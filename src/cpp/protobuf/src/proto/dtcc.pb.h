// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/dtcc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fdtcc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fdtcc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fproto_2fdtcc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fproto_2fdtcc_2eproto {
  static const uint32_t offsets[];
};
namespace DTCC {
class BoundingBox2D;
struct BoundingBox2DDefaultTypeInternal;
extern BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
class BoundingBox3D;
struct BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class Building;
struct BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
class CityModel;
struct CityModelDefaultTypeInternal;
extern CityModelDefaultTypeInternal _CityModel_default_instance_;
class Georeference;
struct GeoreferenceDefaultTypeInternal;
extern GeoreferenceDefaultTypeInternal _Georeference_default_instance_;
class Grid2D;
struct Grid2DDefaultTypeInternal;
extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
class Grid3D;
struct Grid3DDefaultTypeInternal;
extern Grid3DDefaultTypeInternal _Grid3D_default_instance_;
class GridField2D;
struct GridField2DDefaultTypeInternal;
extern GridField2DDefaultTypeInternal _GridField2D_default_instance_;
class GridField3D;
struct GridField3DDefaultTypeInternal;
extern GridField3DDefaultTypeInternal _GridField3D_default_instance_;
class GridVectorField2D;
struct GridVectorField2DDefaultTypeInternal;
extern GridVectorField2DDefaultTypeInternal _GridVectorField2D_default_instance_;
class GridVectorField3D;
struct GridVectorField3DDefaultTypeInternal;
extern GridVectorField3DDefaultTypeInternal _GridVectorField3D_default_instance_;
class LineString;
struct LineStringDefaultTypeInternal;
extern LineStringDefaultTypeInternal _LineString_default_instance_;
class LineString3D;
struct LineString3DDefaultTypeInternal;
extern LineString3DDefaultTypeInternal _LineString3D_default_instance_;
class LinearRing;
struct LinearRingDefaultTypeInternal;
extern LinearRingDefaultTypeInternal _LinearRing_default_instance_;
class Mesh2D;
struct Mesh2DDefaultTypeInternal;
extern Mesh2DDefaultTypeInternal _Mesh2D_default_instance_;
class Mesh3D;
struct Mesh3DDefaultTypeInternal;
extern Mesh3DDefaultTypeInternal _Mesh3D_default_instance_;
class MeshField2D;
struct MeshField2DDefaultTypeInternal;
extern MeshField2DDefaultTypeInternal _MeshField2D_default_instance_;
class MeshField3D;
struct MeshField3DDefaultTypeInternal;
extern MeshField3DDefaultTypeInternal _MeshField3D_default_instance_;
class MeshVectorField2D;
struct MeshVectorField2DDefaultTypeInternal;
extern MeshVectorField2DDefaultTypeInternal _MeshVectorField2D_default_instance_;
class MeshVectorField3D;
struct MeshVectorField3DDefaultTypeInternal;
extern MeshVectorField3DDefaultTypeInternal _MeshVectorField3D_default_instance_;
class MultiPoint;
struct MultiPointDefaultTypeInternal;
extern MultiPointDefaultTypeInternal _MultiPoint_default_instance_;
class MultiPoint3D;
struct MultiPoint3DDefaultTypeInternal;
extern MultiPoint3DDefaultTypeInternal _MultiPoint3D_default_instance_;
class MultiPolygon;
struct MultiPolygonDefaultTypeInternal;
extern MultiPolygonDefaultTypeInternal _MultiPolygon_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Simplex1D;
struct Simplex1DDefaultTypeInternal;
extern Simplex1DDefaultTypeInternal _Simplex1D_default_instance_;
class Simplex2D;
struct Simplex2DDefaultTypeInternal;
extern Simplex2DDefaultTypeInternal _Simplex2D_default_instance_;
class Simplex3D;
struct Simplex3DDefaultTypeInternal;
extern Simplex3DDefaultTypeInternal _Simplex3D_default_instance_;
class Surface2D;
struct Surface2DDefaultTypeInternal;
extern Surface2DDefaultTypeInternal _Surface2D_default_instance_;
class Surface3D;
struct Surface3DDefaultTypeInternal;
extern Surface3DDefaultTypeInternal _Surface3D_default_instance_;
class SurfaceField2D;
struct SurfaceField2DDefaultTypeInternal;
extern SurfaceField2DDefaultTypeInternal _SurfaceField2D_default_instance_;
class SurfaceField3D;
struct SurfaceField3DDefaultTypeInternal;
extern SurfaceField3DDefaultTypeInternal _SurfaceField3D_default_instance_;
class SurfaceVectorField2D;
struct SurfaceVectorField2DDefaultTypeInternal;
extern SurfaceVectorField2DDefaultTypeInternal _SurfaceVectorField2D_default_instance_;
class SurfaceVectorField3D;
struct SurfaceVectorField3DDefaultTypeInternal;
extern SurfaceVectorField3DDefaultTypeInternal _SurfaceVectorField3D_default_instance_;
class Vector2D;
struct Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> ::DTCC::BoundingBox2D* Arena::CreateMaybeMessage<::DTCC::BoundingBox2D>(Arena*);
template<> ::DTCC::BoundingBox3D* Arena::CreateMaybeMessage<::DTCC::BoundingBox3D>(Arena*);
template<> ::DTCC::Building* Arena::CreateMaybeMessage<::DTCC::Building>(Arena*);
template<> ::DTCC::CityModel* Arena::CreateMaybeMessage<::DTCC::CityModel>(Arena*);
template<> ::DTCC::Georeference* Arena::CreateMaybeMessage<::DTCC::Georeference>(Arena*);
template<> ::DTCC::Grid2D* Arena::CreateMaybeMessage<::DTCC::Grid2D>(Arena*);
template<> ::DTCC::Grid3D* Arena::CreateMaybeMessage<::DTCC::Grid3D>(Arena*);
template<> ::DTCC::GridField2D* Arena::CreateMaybeMessage<::DTCC::GridField2D>(Arena*);
template<> ::DTCC::GridField3D* Arena::CreateMaybeMessage<::DTCC::GridField3D>(Arena*);
template<> ::DTCC::GridVectorField2D* Arena::CreateMaybeMessage<::DTCC::GridVectorField2D>(Arena*);
template<> ::DTCC::GridVectorField3D* Arena::CreateMaybeMessage<::DTCC::GridVectorField3D>(Arena*);
template<> ::DTCC::LineString* Arena::CreateMaybeMessage<::DTCC::LineString>(Arena*);
template<> ::DTCC::LineString3D* Arena::CreateMaybeMessage<::DTCC::LineString3D>(Arena*);
template<> ::DTCC::LinearRing* Arena::CreateMaybeMessage<::DTCC::LinearRing>(Arena*);
template<> ::DTCC::Mesh2D* Arena::CreateMaybeMessage<::DTCC::Mesh2D>(Arena*);
template<> ::DTCC::Mesh3D* Arena::CreateMaybeMessage<::DTCC::Mesh3D>(Arena*);
template<> ::DTCC::MeshField2D* Arena::CreateMaybeMessage<::DTCC::MeshField2D>(Arena*);
template<> ::DTCC::MeshField3D* Arena::CreateMaybeMessage<::DTCC::MeshField3D>(Arena*);
template<> ::DTCC::MeshVectorField2D* Arena::CreateMaybeMessage<::DTCC::MeshVectorField2D>(Arena*);
template<> ::DTCC::MeshVectorField3D* Arena::CreateMaybeMessage<::DTCC::MeshVectorField3D>(Arena*);
template<> ::DTCC::MultiPoint* Arena::CreateMaybeMessage<::DTCC::MultiPoint>(Arena*);
template<> ::DTCC::MultiPoint3D* Arena::CreateMaybeMessage<::DTCC::MultiPoint3D>(Arena*);
template<> ::DTCC::MultiPolygon* Arena::CreateMaybeMessage<::DTCC::MultiPolygon>(Arena*);
template<> ::DTCC::PointCloud* Arena::CreateMaybeMessage<::DTCC::PointCloud>(Arena*);
template<> ::DTCC::Polygon* Arena::CreateMaybeMessage<::DTCC::Polygon>(Arena*);
template<> ::DTCC::Simplex1D* Arena::CreateMaybeMessage<::DTCC::Simplex1D>(Arena*);
template<> ::DTCC::Simplex2D* Arena::CreateMaybeMessage<::DTCC::Simplex2D>(Arena*);
template<> ::DTCC::Simplex3D* Arena::CreateMaybeMessage<::DTCC::Simplex3D>(Arena*);
template<> ::DTCC::Surface2D* Arena::CreateMaybeMessage<::DTCC::Surface2D>(Arena*);
template<> ::DTCC::Surface3D* Arena::CreateMaybeMessage<::DTCC::Surface3D>(Arena*);
template<> ::DTCC::SurfaceField2D* Arena::CreateMaybeMessage<::DTCC::SurfaceField2D>(Arena*);
template<> ::DTCC::SurfaceField3D* Arena::CreateMaybeMessage<::DTCC::SurfaceField3D>(Arena*);
template<> ::DTCC::SurfaceVectorField2D* Arena::CreateMaybeMessage<::DTCC::SurfaceVectorField2D>(Arena*);
template<> ::DTCC::SurfaceVectorField3D* Arena::CreateMaybeMessage<::DTCC::SurfaceVectorField3D>(Arena*);
template<> ::DTCC::Vector2D* Arena::CreateMaybeMessage<::DTCC::Vector2D>(Arena*);
template<> ::DTCC::Vector3D* Arena::CreateMaybeMessage<::DTCC::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DTCC {

// ===================================================================

class Vector2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {}
  ~Vector2D() override;
  explicit PROTOBUF_CONSTEXPR Vector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Vector3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  explicit PROTOBUF_CONSTEXPR Vector3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector3D";
  }
  protected:
  explicit Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex1D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Simplex1D) */ {
 public:
  inline Simplex1D() : Simplex1D(nullptr) {}
  ~Simplex1D() override;
  explicit PROTOBUF_CONSTEXPR Simplex1D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Simplex1D(const Simplex1D& from);
  Simplex1D(Simplex1D&& from) noexcept
    : Simplex1D() {
    *this = ::std::move(from);
  }

  inline Simplex1D& operator=(const Simplex1D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex1D& operator=(Simplex1D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Simplex1D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Simplex1D* internal_default_instance() {
    return reinterpret_cast<const Simplex1D*>(
               &_Simplex1D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Simplex1D& a, Simplex1D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex1D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex1D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Simplex1D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Simplex1D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Simplex1D& from);
  void MergeFrom(const Simplex1D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Simplex1D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex1D";
  }
  protected:
  explicit Simplex1D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
  };
  // int32 v0 = 1;
  void clear_v0();
  int32_t v0() const;
  void set_v0(int32_t value);
  private:
  int32_t _internal_v0() const;
  void _internal_set_v0(int32_t value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  int32_t v1() const;
  void set_v1(int32_t value);
  private:
  int32_t _internal_v1() const;
  void _internal_set_v1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex1D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t v0_;
    int32_t v1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Simplex2D) */ {
 public:
  inline Simplex2D() : Simplex2D(nullptr) {}
  ~Simplex2D() override;
  explicit PROTOBUF_CONSTEXPR Simplex2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Simplex2D(const Simplex2D& from);
  Simplex2D(Simplex2D&& from) noexcept
    : Simplex2D() {
    *this = ::std::move(from);
  }

  inline Simplex2D& operator=(const Simplex2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex2D& operator=(Simplex2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Simplex2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Simplex2D* internal_default_instance() {
    return reinterpret_cast<const Simplex2D*>(
               &_Simplex2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Simplex2D& a, Simplex2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Simplex2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Simplex2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Simplex2D& from);
  void MergeFrom(const Simplex2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Simplex2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex2D";
  }
  protected:
  explicit Simplex2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
  };
  // int32 v0 = 1;
  void clear_v0();
  int32_t v0() const;
  void set_v0(int32_t value);
  private:
  int32_t _internal_v0() const;
  void _internal_set_v0(int32_t value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  int32_t v1() const;
  void set_v1(int32_t value);
  private:
  int32_t _internal_v1() const;
  void _internal_set_v1(int32_t value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  int32_t v2() const;
  void set_v2(int32_t value);
  private:
  int32_t _internal_v2() const;
  void _internal_set_v2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t v0_;
    int32_t v1_;
    int32_t v2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Simplex3D) */ {
 public:
  inline Simplex3D() : Simplex3D(nullptr) {}
  ~Simplex3D() override;
  explicit PROTOBUF_CONSTEXPR Simplex3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Simplex3D(const Simplex3D& from);
  Simplex3D(Simplex3D&& from) noexcept
    : Simplex3D() {
    *this = ::std::move(from);
  }

  inline Simplex3D& operator=(const Simplex3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex3D& operator=(Simplex3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Simplex3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Simplex3D* internal_default_instance() {
    return reinterpret_cast<const Simplex3D*>(
               &_Simplex3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Simplex3D& a, Simplex3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Simplex3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Simplex3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Simplex3D& from);
  void MergeFrom(const Simplex3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Simplex3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex3D";
  }
  protected:
  explicit Simplex3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
    kV3FieldNumber = 4,
  };
  // int32 v0 = 1;
  void clear_v0();
  int32_t v0() const;
  void set_v0(int32_t value);
  private:
  int32_t _internal_v0() const;
  void _internal_set_v0(int32_t value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  int32_t v1() const;
  void set_v1(int32_t value);
  private:
  int32_t _internal_v1() const;
  void _internal_set_v1(int32_t value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  int32_t v2() const;
  void set_v2(int32_t value);
  private:
  int32_t _internal_v2() const;
  void _internal_set_v2(int32_t value);
  public:

  // int32 v3 = 4;
  void clear_v3();
  int32_t v3() const;
  void set_v3(int32_t value);
  private:
  int32_t _internal_v3() const;
  void _internal_set_v3(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t v0_;
    int32_t v1_;
    int32_t v2_;
    int32_t v3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox2D) */ {
 public:
  inline BoundingBox2D() : BoundingBox2D(nullptr) {}
  ~BoundingBox2D() override;
  explicit PROTOBUF_CONSTEXPR BoundingBox2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox2D(const BoundingBox2D& from);
  BoundingBox2D(BoundingBox2D&& from) noexcept
    : BoundingBox2D() {
    *this = ::std::move(from);
  }

  inline BoundingBox2D& operator=(const BoundingBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2D& operator=(BoundingBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundingBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox2D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2D*>(
               &_BoundingBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoundingBox2D& a, BoundingBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoundingBox2D& from);
  void MergeFrom(const BoundingBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox2D";
  }
  protected:
  explicit BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector2D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector2D& p() const;
  PROTOBUF_NODISCARD ::DTCC::Vector2D* release_p();
  ::DTCC::Vector2D* mutable_p();
  void set_allocated_p(::DTCC::Vector2D* p);
  private:
  const ::DTCC::Vector2D& _internal_p() const;
  ::DTCC::Vector2D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector2D* p);
  ::DTCC::Vector2D* unsafe_arena_release_p();

  // .DTCC.Vector2D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector2D& q() const;
  PROTOBUF_NODISCARD ::DTCC::Vector2D* release_q();
  ::DTCC::Vector2D* mutable_q();
  void set_allocated_q(::DTCC::Vector2D* q);
  private:
  const ::DTCC::Vector2D& _internal_q() const;
  ::DTCC::Vector2D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector2D* q);
  ::DTCC::Vector2D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DTCC::Vector2D* p_;
    ::DTCC::Vector2D* q_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {}
  ~BoundingBox3D() override;
  explicit PROTOBUF_CONSTEXPR BoundingBox3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundingBox3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoundingBox3D& from);
  void MergeFrom(const BoundingBox3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector3D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector3D& p() const;
  PROTOBUF_NODISCARD ::DTCC::Vector3D* release_p();
  ::DTCC::Vector3D* mutable_p();
  void set_allocated_p(::DTCC::Vector3D* p);
  private:
  const ::DTCC::Vector3D& _internal_p() const;
  ::DTCC::Vector3D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector3D* p);
  ::DTCC::Vector3D* unsafe_arena_release_p();

  // .DTCC.Vector3D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector3D& q() const;
  PROTOBUF_NODISCARD ::DTCC::Vector3D* release_q();
  ::DTCC::Vector3D* mutable_q();
  void set_allocated_q(::DTCC::Vector3D* q);
  private:
  const ::DTCC::Vector3D& _internal_q() const;
  ::DTCC::Vector3D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector3D* q);
  ::DTCC::Vector3D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DTCC::Vector3D* p_;
    ::DTCC::Vector3D* q_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint) */ {
 public:
  inline MultiPoint() : MultiPoint(nullptr) {}
  ~MultiPoint() override;
  explicit PROTOBUF_CONSTEXPR MultiPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint(const MultiPoint& from);
  MultiPoint(MultiPoint&& from) noexcept
    : MultiPoint() {
    *this = ::std::move(from);
  }

  inline MultiPoint& operator=(const MultiPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint& operator=(MultiPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint* internal_default_instance() {
    return reinterpret_cast<const MultiPoint*>(
               &_MultiPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MultiPoint& a, MultiPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint& from);
  void MergeFrom(const MultiPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint";
  }
  protected:
  explicit MultiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_points();
  private:
  const ::DTCC::Vector2D& _internal_points(int index) const;
  ::DTCC::Vector2D* _internal_add_points();
  public:
  const ::DTCC::Vector2D& points(int index) const;
  ::DTCC::Vector2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint3D) */ {
 public:
  inline MultiPoint3D() : MultiPoint3D(nullptr) {}
  ~MultiPoint3D() override;
  explicit PROTOBUF_CONSTEXPR MultiPoint3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint3D(const MultiPoint3D& from);
  MultiPoint3D(MultiPoint3D&& from) noexcept
    : MultiPoint3D() {
    *this = ::std::move(from);
  }

  inline MultiPoint3D& operator=(const MultiPoint3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint3D& operator=(MultiPoint3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint3D* internal_default_instance() {
    return reinterpret_cast<const MultiPoint3D*>(
               &_MultiPoint3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MultiPoint3D& a, MultiPoint3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPoint3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiPoint3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint3D& from);
  void MergeFrom(const MultiPoint3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint3D";
  }
  protected:
  explicit MultiPoint3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_points();
  private:
  const ::DTCC::Vector3D& _internal_points(int index) const;
  ::DTCC::Vector3D* _internal_add_points();
  public:
  const ::DTCC::Vector3D& points(int index) const;
  ::DTCC::Vector3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString) */ {
 public:
  inline LineString() : LineString(nullptr) {}
  ~LineString() override;
  explicit PROTOBUF_CONSTEXPR LineString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString(const LineString& from);
  LineString(LineString&& from) noexcept
    : LineString() {
    *this = ::std::move(from);
  }

  inline LineString& operator=(const LineString& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString& operator=(LineString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString* internal_default_instance() {
    return reinterpret_cast<const LineString*>(
               &_LineString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LineString& a, LineString& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString& from);
  void MergeFrom(const LineString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString";
  }
  protected:
  explicit LineString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString3D) */ {
 public:
  inline LineString3D() : LineString3D(nullptr) {}
  ~LineString3D() override;
  explicit PROTOBUF_CONSTEXPR LineString3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString3D(const LineString3D& from);
  LineString3D(LineString3D&& from) noexcept
    : LineString3D() {
    *this = ::std::move(from);
  }

  inline LineString3D& operator=(const LineString3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString3D& operator=(LineString3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString3D* internal_default_instance() {
    return reinterpret_cast<const LineString3D*>(
               &_LineString3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LineString3D& a, LineString3D& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineString3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineString3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString3D& from);
  void MergeFrom(const LineString3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString3D";
  }
  protected:
  explicit LineString3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class LinearRing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LinearRing) */ {
 public:
  inline LinearRing() : LinearRing(nullptr) {}
  ~LinearRing() override;
  explicit PROTOBUF_CONSTEXPR LinearRing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinearRing(const LinearRing& from);
  LinearRing(LinearRing&& from) noexcept
    : LinearRing() {
    *this = ::std::move(from);
  }

  inline LinearRing& operator=(const LinearRing& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearRing& operator=(LinearRing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinearRing& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearRing* internal_default_instance() {
    return reinterpret_cast<const LinearRing*>(
               &_LinearRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LinearRing& a, LinearRing& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearRing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearRing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearRing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearRing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinearRing& from);
  void MergeFrom(const LinearRing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinearRing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LinearRing";
  }
  protected:
  explicit LinearRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LinearRing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit PROTOBUF_CONSTEXPR Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolesFieldNumber = 2,
    kShellFieldNumber = 1,
  };
  // repeated .DTCC.LinearRing holes = 2;
  int holes_size() const;
  private:
  int _internal_holes_size() const;
  public:
  void clear_holes();
  ::DTCC::LinearRing* mutable_holes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
      mutable_holes();
  private:
  const ::DTCC::LinearRing& _internal_holes(int index) const;
  ::DTCC::LinearRing* _internal_add_holes();
  public:
  const ::DTCC::LinearRing& holes(int index) const;
  ::DTCC::LinearRing* add_holes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
      holes() const;

  // .DTCC.LinearRing shell = 1;
  bool has_shell() const;
  private:
  bool _internal_has_shell() const;
  public:
  void clear_shell();
  const ::DTCC::LinearRing& shell() const;
  PROTOBUF_NODISCARD ::DTCC::LinearRing* release_shell();
  ::DTCC::LinearRing* mutable_shell();
  void set_allocated_shell(::DTCC::LinearRing* shell);
  private:
  const ::DTCC::LinearRing& _internal_shell() const;
  ::DTCC::LinearRing* _internal_mutable_shell();
  public:
  void unsafe_arena_set_allocated_shell(
      ::DTCC::LinearRing* shell);
  ::DTCC::LinearRing* unsafe_arena_release_shell();

  // @@protoc_insertion_point(class_scope:DTCC.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing > holes_;
    ::DTCC::LinearRing* shell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPolygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPolygon) */ {
 public:
  inline MultiPolygon() : MultiPolygon(nullptr) {}
  ~MultiPolygon() override;
  explicit PROTOBUF_CONSTEXPR MultiPolygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPolygon(const MultiPolygon& from);
  MultiPolygon(MultiPolygon&& from) noexcept
    : MultiPolygon() {
    *this = ::std::move(from);
  }

  inline MultiPolygon& operator=(const MultiPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPolygon& operator=(MultiPolygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPolygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPolygon* internal_default_instance() {
    return reinterpret_cast<const MultiPolygon*>(
               &_MultiPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MultiPolygon& a, MultiPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPolygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPolygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiPolygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPolygon& from);
  void MergeFrom(const MultiPolygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPolygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPolygon";
  }
  protected:
  explicit MultiPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
  };
  // repeated .DTCC.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::DTCC::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
      mutable_polygons();
  private:
  const ::DTCC::Polygon& _internal_polygons(int index) const;
  ::DTCC::Polygon* _internal_add_polygons();
  public:
  const ::DTCC::Polygon& polygons(int index) const;
  ::DTCC::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPolygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon > polygons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Grid2D) */ {
 public:
  inline Grid2D() : Grid2D(nullptr) {}
  ~Grid2D() override;
  explicit PROTOBUF_CONSTEXPR Grid2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid2D(const Grid2D& from);
  Grid2D(Grid2D&& from) noexcept
    : Grid2D() {
    *this = ::std::move(from);
  }

  inline Grid2D& operator=(const Grid2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid2D& operator=(Grid2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Grid2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid2D* internal_default_instance() {
    return reinterpret_cast<const Grid2D*>(
               &_Grid2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Grid2D& a, Grid2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grid2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grid2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Grid2D& from);
  void MergeFrom(const Grid2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid2D";
  }
  protected:
  explicit Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kXStepFieldNumber = 4,
    kYStepFieldNumber = 5,
  };
  // .DTCC.BoundingBox2D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox2D& boundingbox() const;
  PROTOBUF_NODISCARD ::DTCC::BoundingBox2D* release_boundingbox();
  ::DTCC::BoundingBox2D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox);
  private:
  const ::DTCC::BoundingBox2D& _internal_boundingbox() const;
  ::DTCC::BoundingBox2D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox2D* boundingbox);
  ::DTCC::BoundingBox2D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  int32_t xsize() const;
  void set_xsize(int32_t value);
  private:
  int32_t _internal_xsize() const;
  void _internal_set_xsize(int32_t value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  int32_t ysize() const;
  void set_ysize(int32_t value);
  private:
  int32_t _internal_ysize() const;
  void _internal_set_ysize(int32_t value);
  public:

  // float xStep = 4;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 5;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DTCC::BoundingBox2D* boundingbox_;
    int32_t xsize_;
    int32_t ysize_;
    float xstep_;
    float ystep_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Grid3D) */ {
 public:
  inline Grid3D() : Grid3D(nullptr) {}
  ~Grid3D() override;
  explicit PROTOBUF_CONSTEXPR Grid3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid3D(const Grid3D& from);
  Grid3D(Grid3D&& from) noexcept
    : Grid3D() {
    *this = ::std::move(from);
  }

  inline Grid3D& operator=(const Grid3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid3D& operator=(Grid3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Grid3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid3D* internal_default_instance() {
    return reinterpret_cast<const Grid3D*>(
               &_Grid3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Grid3D& a, Grid3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grid3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grid3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Grid3D& from);
  void MergeFrom(const Grid3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid3D";
  }
  protected:
  explicit Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kZSizeFieldNumber = 4,
    kXStepFieldNumber = 5,
    kYStepFieldNumber = 6,
    kZStepFieldNumber = 7,
  };
  // .DTCC.BoundingBox3D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox3D& boundingbox() const;
  PROTOBUF_NODISCARD ::DTCC::BoundingBox3D* release_boundingbox();
  ::DTCC::BoundingBox3D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox);
  private:
  const ::DTCC::BoundingBox3D& _internal_boundingbox() const;
  ::DTCC::BoundingBox3D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox3D* boundingbox);
  ::DTCC::BoundingBox3D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  int32_t xsize() const;
  void set_xsize(int32_t value);
  private:
  int32_t _internal_xsize() const;
  void _internal_set_xsize(int32_t value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  int32_t ysize() const;
  void set_ysize(int32_t value);
  private:
  int32_t _internal_ysize() const;
  void _internal_set_ysize(int32_t value);
  public:

  // int32 zSize = 4;
  void clear_zsize();
  int32_t zsize() const;
  void set_zsize(int32_t value);
  private:
  int32_t _internal_zsize() const;
  void _internal_set_zsize(int32_t value);
  public:

  // float xStep = 5;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 6;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // float zStep = 7;
  void clear_zstep();
  float zstep() const;
  void set_zstep(float value);
  private:
  float _internal_zstep() const;
  void _internal_set_zstep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DTCC::BoundingBox3D* boundingbox_;
    int32_t xsize_;
    int32_t ysize_;
    int32_t zsize_;
    float xstep_;
    float ystep_;
    float zstep_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Mesh2D) */ {
 public:
  inline Mesh2D() : Mesh2D(nullptr) {}
  ~Mesh2D() override;
  explicit PROTOBUF_CONSTEXPR Mesh2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh2D(const Mesh2D& from);
  Mesh2D(Mesh2D&& from) noexcept
    : Mesh2D() {
    *this = ::std::move(from);
  }

  inline Mesh2D& operator=(const Mesh2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh2D& operator=(Mesh2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mesh2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh2D* internal_default_instance() {
    return reinterpret_cast<const Mesh2D*>(
               &_Mesh2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Mesh2D& a, Mesh2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mesh2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mesh2D& from);
  void MergeFrom(const Mesh2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh2D";
  }
  protected:
  explicit Mesh2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
    kMarkersFieldNumber = 3,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // repeated .DTCC.Simplex2D cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DTCC::Simplex2D* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
      mutable_cells();
  private:
  const ::DTCC::Simplex2D& _internal_cells(int index) const;
  ::DTCC::Simplex2D* _internal_add_cells();
  public:
  const ::DTCC::Simplex2D& cells(int index) const;
  ::DTCC::Simplex2D* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
      cells() const;

  // repeated int32 markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  private:
  int32_t _internal_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_markers() const;
  void _internal_add_markers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_markers();
  public:
  int32_t markers(int index) const;
  void set_markers(int index, int32_t value);
  void add_markers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:DTCC.Mesh2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D > cells_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > markers_;
    mutable std::atomic<int> _markers_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Mesh3D) */ {
 public:
  inline Mesh3D() : Mesh3D(nullptr) {}
  ~Mesh3D() override;
  explicit PROTOBUF_CONSTEXPR Mesh3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh3D(const Mesh3D& from);
  Mesh3D(Mesh3D&& from) noexcept
    : Mesh3D() {
    *this = ::std::move(from);
  }

  inline Mesh3D& operator=(const Mesh3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh3D& operator=(Mesh3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mesh3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh3D* internal_default_instance() {
    return reinterpret_cast<const Mesh3D*>(
               &_Mesh3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Mesh3D& a, Mesh3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mesh3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mesh3D& from);
  void MergeFrom(const Mesh3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh3D";
  }
  protected:
  explicit Mesh3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
    kMarkersFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Simplex3D cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DTCC::Simplex3D* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >*
      mutable_cells();
  private:
  const ::DTCC::Simplex3D& _internal_cells(int index) const;
  ::DTCC::Simplex3D* _internal_add_cells();
  public:
  const ::DTCC::Simplex3D& cells(int index) const;
  ::DTCC::Simplex3D* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >&
      cells() const;

  // repeated int32 markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  private:
  int32_t _internal_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_markers() const;
  void _internal_add_markers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_markers();
  public:
  int32_t markers(int index) const;
  void set_markers(int index, int32_t value);
  void add_markers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:DTCC.Mesh3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D > cells_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > markers_;
    mutable std::atomic<int> _markers_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Surface2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Surface2D) */ {
 public:
  inline Surface2D() : Surface2D(nullptr) {}
  ~Surface2D() override;
  explicit PROTOBUF_CONSTEXPR Surface2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Surface2D(const Surface2D& from);
  Surface2D(Surface2D&& from) noexcept
    : Surface2D() {
    *this = ::std::move(from);
  }

  inline Surface2D& operator=(const Surface2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surface2D& operator=(Surface2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Surface2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Surface2D* internal_default_instance() {
    return reinterpret_cast<const Surface2D*>(
               &_Surface2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Surface2D& a, Surface2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Surface2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Surface2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Surface2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Surface2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Surface2D& from);
  void MergeFrom(const Surface2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Surface2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Surface2D";
  }
  protected:
  explicit Surface2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kEdgesFieldNumber = 3,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // repeated .DTCC.Vector2D normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::DTCC::Vector2D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_normals();
  private:
  const ::DTCC::Vector2D& _internal_normals(int index) const;
  ::DTCC::Vector2D* _internal_add_normals();
  public:
  const ::DTCC::Vector2D& normals(int index) const;
  ::DTCC::Vector2D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      normals() const;

  // repeated .DTCC.Simplex1D edges = 3;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::DTCC::Simplex1D* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >*
      mutable_edges();
  private:
  const ::DTCC::Simplex1D& _internal_edges(int index) const;
  ::DTCC::Simplex1D* _internal_add_edges();
  public:
  const ::DTCC::Simplex1D& edges(int index) const;
  ::DTCC::Simplex1D* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >&
      edges() const;

  // @@protoc_insertion_point(class_scope:DTCC.Surface2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > normals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D > edges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Surface3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Surface3D) */ {
 public:
  inline Surface3D() : Surface3D(nullptr) {}
  ~Surface3D() override;
  explicit PROTOBUF_CONSTEXPR Surface3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Surface3D(const Surface3D& from);
  Surface3D(Surface3D&& from) noexcept
    : Surface3D() {
    *this = ::std::move(from);
  }

  inline Surface3D& operator=(const Surface3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surface3D& operator=(Surface3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Surface3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Surface3D* internal_default_instance() {
    return reinterpret_cast<const Surface3D*>(
               &_Surface3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Surface3D& a, Surface3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Surface3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Surface3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Surface3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Surface3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Surface3D& from);
  void MergeFrom(const Surface3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Surface3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Surface3D";
  }
  protected:
  explicit Surface3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kFacesFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Vector3D normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::DTCC::Vector3D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_normals();
  private:
  const ::DTCC::Vector3D& _internal_normals(int index) const;
  ::DTCC::Vector3D* _internal_add_normals();
  public:
  const ::DTCC::Vector3D& normals(int index) const;
  ::DTCC::Vector3D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      normals() const;

  // repeated .DTCC.Simplex2D faces = 3;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::DTCC::Simplex2D* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
      mutable_faces();
  private:
  const ::DTCC::Simplex2D& _internal_faces(int index) const;
  ::DTCC::Simplex2D* _internal_add_faces();
  public:
  const ::DTCC::Simplex2D& faces(int index) const;
  ::DTCC::Simplex2D* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
      faces() const;

  // @@protoc_insertion_point(class_scope:DTCC.Surface3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > normals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D > faces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridField2D) */ {
 public:
  inline GridField2D() : GridField2D(nullptr) {}
  ~GridField2D() override;
  explicit PROTOBUF_CONSTEXPR GridField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridField2D(const GridField2D& from);
  GridField2D(GridField2D&& from) noexcept
    : GridField2D() {
    *this = ::std::move(from);
  }

  inline GridField2D& operator=(const GridField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField2D& operator=(GridField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridField2D* internal_default_instance() {
    return reinterpret_cast<const GridField2D*>(
               &_GridField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GridField2D& a, GridField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GridField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GridField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridField2D& from);
  void MergeFrom(const GridField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField2D";
  }
  protected:
  explicit GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  PROTOBUF_NODISCARD ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Grid2D* grid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridField3D) */ {
 public:
  inline GridField3D() : GridField3D(nullptr) {}
  ~GridField3D() override;
  explicit PROTOBUF_CONSTEXPR GridField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridField3D(const GridField3D& from);
  GridField3D(GridField3D&& from) noexcept
    : GridField3D() {
    *this = ::std::move(from);
  }

  inline GridField3D& operator=(const GridField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField3D& operator=(GridField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridField3D* internal_default_instance() {
    return reinterpret_cast<const GridField3D*>(
               &_GridField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GridField3D& a, GridField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GridField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GridField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridField3D& from);
  void MergeFrom(const GridField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField3D";
  }
  protected:
  explicit GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  PROTOBUF_NODISCARD ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Grid3D* grid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField2D) */ {
 public:
  inline GridVectorField2D() : GridVectorField2D(nullptr) {}
  ~GridVectorField2D() override;
  explicit PROTOBUF_CONSTEXPR GridVectorField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridVectorField2D(const GridVectorField2D& from);
  GridVectorField2D(GridVectorField2D&& from) noexcept
    : GridVectorField2D() {
    *this = ::std::move(from);
  }

  inline GridVectorField2D& operator=(const GridVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField2D& operator=(GridVectorField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridVectorField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridVectorField2D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField2D*>(
               &_GridVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GridVectorField2D& a, GridVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GridVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GridVectorField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridVectorField2D& from);
  void MergeFrom(const GridVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVectorField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField2D";
  }
  protected:
  explicit GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  PROTOBUF_NODISCARD ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Grid2D* grid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField3D) */ {
 public:
  inline GridVectorField3D() : GridVectorField3D(nullptr) {}
  ~GridVectorField3D() override;
  explicit PROTOBUF_CONSTEXPR GridVectorField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridVectorField3D(const GridVectorField3D& from);
  GridVectorField3D(GridVectorField3D&& from) noexcept
    : GridVectorField3D() {
    *this = ::std::move(from);
  }

  inline GridVectorField3D& operator=(const GridVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField3D& operator=(GridVectorField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridVectorField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridVectorField3D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField3D*>(
               &_GridVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GridVectorField3D& a, GridVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GridVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GridVectorField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridVectorField3D& from);
  void MergeFrom(const GridVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVectorField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField3D";
  }
  protected:
  explicit GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  PROTOBUF_NODISCARD ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Grid3D* grid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshField2D) */ {
 public:
  inline MeshField2D() : MeshField2D(nullptr) {}
  ~MeshField2D() override;
  explicit PROTOBUF_CONSTEXPR MeshField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshField2D(const MeshField2D& from);
  MeshField2D(MeshField2D&& from) noexcept
    : MeshField2D() {
    *this = ::std::move(from);
  }

  inline MeshField2D& operator=(const MeshField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField2D& operator=(MeshField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshField2D* internal_default_instance() {
    return reinterpret_cast<const MeshField2D*>(
               &_MeshField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MeshField2D& a, MeshField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshField2D& from);
  void MergeFrom(const MeshField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField2D";
  }
  protected:
  explicit MeshField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh2D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh2D& mesh() const;
  PROTOBUF_NODISCARD ::DTCC::Mesh2D* release_mesh();
  ::DTCC::Mesh2D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh2D* mesh);
  private:
  const ::DTCC::Mesh2D& _internal_mesh() const;
  ::DTCC::Mesh2D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh2D* mesh);
  ::DTCC::Mesh2D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Mesh2D* mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshField3D) */ {
 public:
  inline MeshField3D() : MeshField3D(nullptr) {}
  ~MeshField3D() override;
  explicit PROTOBUF_CONSTEXPR MeshField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshField3D(const MeshField3D& from);
  MeshField3D(MeshField3D&& from) noexcept
    : MeshField3D() {
    *this = ::std::move(from);
  }

  inline MeshField3D& operator=(const MeshField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField3D& operator=(MeshField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshField3D* internal_default_instance() {
    return reinterpret_cast<const MeshField3D*>(
               &_MeshField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MeshField3D& a, MeshField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshField3D& from);
  void MergeFrom(const MeshField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField3D";
  }
  protected:
  explicit MeshField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh3D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh3D& mesh() const;
  PROTOBUF_NODISCARD ::DTCC::Mesh3D* release_mesh();
  ::DTCC::Mesh3D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh3D* mesh);
  private:
  const ::DTCC::Mesh3D& _internal_mesh() const;
  ::DTCC::Mesh3D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh3D* mesh);
  ::DTCC::Mesh3D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Mesh3D* mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField2D) */ {
 public:
  inline MeshVectorField2D() : MeshVectorField2D(nullptr) {}
  ~MeshVectorField2D() override;
  explicit PROTOBUF_CONSTEXPR MeshVectorField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshVectorField2D(const MeshVectorField2D& from);
  MeshVectorField2D(MeshVectorField2D&& from) noexcept
    : MeshVectorField2D() {
    *this = ::std::move(from);
  }

  inline MeshVectorField2D& operator=(const MeshVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField2D& operator=(MeshVectorField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshVectorField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshVectorField2D* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField2D*>(
               &_MeshVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MeshVectorField2D& a, MeshVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshVectorField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshVectorField2D& from);
  void MergeFrom(const MeshVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshVectorField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField2D";
  }
  protected:
  explicit MeshVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh2D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh2D& mesh() const;
  PROTOBUF_NODISCARD ::DTCC::Mesh2D* release_mesh();
  ::DTCC::Mesh2D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh2D* mesh);
  private:
  const ::DTCC::Mesh2D& _internal_mesh() const;
  ::DTCC::Mesh2D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh2D* mesh);
  ::DTCC::Mesh2D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Mesh2D* mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField3D) */ {
 public:
  inline MeshVectorField3D() : MeshVectorField3D(nullptr) {}
  ~MeshVectorField3D() override;
  explicit PROTOBUF_CONSTEXPR MeshVectorField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshVectorField3D(const MeshVectorField3D& from);
  MeshVectorField3D(MeshVectorField3D&& from) noexcept
    : MeshVectorField3D() {
    *this = ::std::move(from);
  }

  inline MeshVectorField3D& operator=(const MeshVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField3D& operator=(MeshVectorField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshVectorField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshVectorField3D* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField3D*>(
               &_MeshVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MeshVectorField3D& a, MeshVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshVectorField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshVectorField3D& from);
  void MergeFrom(const MeshVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshVectorField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField3D";
  }
  protected:
  explicit MeshVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh3D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh3D& mesh() const;
  PROTOBUF_NODISCARD ::DTCC::Mesh3D* release_mesh();
  ::DTCC::Mesh3D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh3D* mesh);
  private:
  const ::DTCC::Mesh3D& _internal_mesh() const;
  ::DTCC::Mesh3D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh3D* mesh);
  ::DTCC::Mesh3D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Mesh3D* mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class SurfaceField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.SurfaceField2D) */ {
 public:
  inline SurfaceField2D() : SurfaceField2D(nullptr) {}
  ~SurfaceField2D() override;
  explicit PROTOBUF_CONSTEXPR SurfaceField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SurfaceField2D(const SurfaceField2D& from);
  SurfaceField2D(SurfaceField2D&& from) noexcept
    : SurfaceField2D() {
    *this = ::std::move(from);
  }

  inline SurfaceField2D& operator=(const SurfaceField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceField2D& operator=(SurfaceField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SurfaceField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const SurfaceField2D* internal_default_instance() {
    return reinterpret_cast<const SurfaceField2D*>(
               &_SurfaceField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SurfaceField2D& a, SurfaceField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SurfaceField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SurfaceField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SurfaceField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SurfaceField2D& from);
  void MergeFrom(const SurfaceField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.SurfaceField2D";
  }
  protected:
  explicit SurfaceField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSurfaceFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Surface2D surface = 1;
  bool has_surface() const;
  private:
  bool _internal_has_surface() const;
  public:
  void clear_surface();
  const ::DTCC::Surface2D& surface() const;
  PROTOBUF_NODISCARD ::DTCC::Surface2D* release_surface();
  ::DTCC::Surface2D* mutable_surface();
  void set_allocated_surface(::DTCC::Surface2D* surface);
  private:
  const ::DTCC::Surface2D& _internal_surface() const;
  ::DTCC::Surface2D* _internal_mutable_surface();
  public:
  void unsafe_arena_set_allocated_surface(
      ::DTCC::Surface2D* surface);
  ::DTCC::Surface2D* unsafe_arena_release_surface();

  // @@protoc_insertion_point(class_scope:DTCC.SurfaceField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Surface2D* surface_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class SurfaceField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.SurfaceField3D) */ {
 public:
  inline SurfaceField3D() : SurfaceField3D(nullptr) {}
  ~SurfaceField3D() override;
  explicit PROTOBUF_CONSTEXPR SurfaceField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SurfaceField3D(const SurfaceField3D& from);
  SurfaceField3D(SurfaceField3D&& from) noexcept
    : SurfaceField3D() {
    *this = ::std::move(from);
  }

  inline SurfaceField3D& operator=(const SurfaceField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceField3D& operator=(SurfaceField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SurfaceField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const SurfaceField3D* internal_default_instance() {
    return reinterpret_cast<const SurfaceField3D*>(
               &_SurfaceField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SurfaceField3D& a, SurfaceField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SurfaceField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SurfaceField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SurfaceField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SurfaceField3D& from);
  void MergeFrom(const SurfaceField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.SurfaceField3D";
  }
  protected:
  explicit SurfaceField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSurfaceFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Surface3D surface = 1;
  bool has_surface() const;
  private:
  bool _internal_has_surface() const;
  public:
  void clear_surface();
  const ::DTCC::Surface3D& surface() const;
  PROTOBUF_NODISCARD ::DTCC::Surface3D* release_surface();
  ::DTCC::Surface3D* mutable_surface();
  void set_allocated_surface(::DTCC::Surface3D* surface);
  private:
  const ::DTCC::Surface3D& _internal_surface() const;
  ::DTCC::Surface3D* _internal_mutable_surface();
  public:
  void unsafe_arena_set_allocated_surface(
      ::DTCC::Surface3D* surface);
  ::DTCC::Surface3D* unsafe_arena_release_surface();

  // @@protoc_insertion_point(class_scope:DTCC.SurfaceField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Surface3D* surface_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class SurfaceVectorField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.SurfaceVectorField2D) */ {
 public:
  inline SurfaceVectorField2D() : SurfaceVectorField2D(nullptr) {}
  ~SurfaceVectorField2D() override;
  explicit PROTOBUF_CONSTEXPR SurfaceVectorField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SurfaceVectorField2D(const SurfaceVectorField2D& from);
  SurfaceVectorField2D(SurfaceVectorField2D&& from) noexcept
    : SurfaceVectorField2D() {
    *this = ::std::move(from);
  }

  inline SurfaceVectorField2D& operator=(const SurfaceVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceVectorField2D& operator=(SurfaceVectorField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SurfaceVectorField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const SurfaceVectorField2D* internal_default_instance() {
    return reinterpret_cast<const SurfaceVectorField2D*>(
               &_SurfaceVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SurfaceVectorField2D& a, SurfaceVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceVectorField2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SurfaceVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SurfaceVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SurfaceVectorField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SurfaceVectorField2D& from);
  void MergeFrom(const SurfaceVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceVectorField2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.SurfaceVectorField2D";
  }
  protected:
  explicit SurfaceVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSurfaceFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Surface2D surface = 1;
  bool has_surface() const;
  private:
  bool _internal_has_surface() const;
  public:
  void clear_surface();
  const ::DTCC::Surface2D& surface() const;
  PROTOBUF_NODISCARD ::DTCC::Surface2D* release_surface();
  ::DTCC::Surface2D* mutable_surface();
  void set_allocated_surface(::DTCC::Surface2D* surface);
  private:
  const ::DTCC::Surface2D& _internal_surface() const;
  ::DTCC::Surface2D* _internal_mutable_surface();
  public:
  void unsafe_arena_set_allocated_surface(
      ::DTCC::Surface2D* surface);
  ::DTCC::Surface2D* unsafe_arena_release_surface();

  // @@protoc_insertion_point(class_scope:DTCC.SurfaceVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Surface2D* surface_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class SurfaceVectorField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.SurfaceVectorField3D) */ {
 public:
  inline SurfaceVectorField3D() : SurfaceVectorField3D(nullptr) {}
  ~SurfaceVectorField3D() override;
  explicit PROTOBUF_CONSTEXPR SurfaceVectorField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SurfaceVectorField3D(const SurfaceVectorField3D& from);
  SurfaceVectorField3D(SurfaceVectorField3D&& from) noexcept
    : SurfaceVectorField3D() {
    *this = ::std::move(from);
  }

  inline SurfaceVectorField3D& operator=(const SurfaceVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceVectorField3D& operator=(SurfaceVectorField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SurfaceVectorField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const SurfaceVectorField3D* internal_default_instance() {
    return reinterpret_cast<const SurfaceVectorField3D*>(
               &_SurfaceVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SurfaceVectorField3D& a, SurfaceVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceVectorField3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SurfaceVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SurfaceVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SurfaceVectorField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SurfaceVectorField3D& from);
  void MergeFrom(const SurfaceVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceVectorField3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.SurfaceVectorField3D";
  }
  protected:
  explicit SurfaceVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSurfaceFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Surface3D surface = 1;
  bool has_surface() const;
  private:
  bool _internal_has_surface() const;
  public:
  void clear_surface();
  const ::DTCC::Surface3D& surface() const;
  PROTOBUF_NODISCARD ::DTCC::Surface3D* release_surface();
  ::DTCC::Surface3D* mutable_surface();
  void set_allocated_surface(::DTCC::Surface3D* surface);
  private:
  const ::DTCC::Surface3D& _internal_surface() const;
  ::DTCC::Surface3D* _internal_mutable_surface();
  public:
  void unsafe_arena_set_allocated_surface(
      ::DTCC::Surface3D* surface);
  ::DTCC::Surface3D* unsafe_arena_release_surface();

  // @@protoc_insertion_point(class_scope:DTCC.SurfaceVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    ::DTCC::Surface3D* surface_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit PROTOBUF_CONSTEXPR PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kClassificationFieldNumber = 3,
    kIntensityFieldNumber = 4,
    kReturnNumberFieldNumber = 5,
    kNumReturnsFieldNumber = 6,
    kUsedClassificationsFieldNumber = 7,
    kBoundsFieldNumber = 2,
    kGeoreferenceFieldNumber = 8,
  };
  // repeated .DTCC.Vector3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_points();
  private:
  const ::DTCC::Vector3D& _internal_points(int index) const;
  ::DTCC::Vector3D* _internal_add_points();
  public:
  const ::DTCC::Vector3D& points(int index) const;
  ::DTCC::Vector3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      points() const;

  // repeated uint32 classification = 3;
  int classification_size() const;
  private:
  int _internal_classification_size() const;
  public:
  void clear_classification();
  private:
  uint32_t _internal_classification(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_classification() const;
  void _internal_add_classification(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_classification();
  public:
  uint32_t classification(int index) const;
  void set_classification(int index, uint32_t value);
  void add_classification(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      classification() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_classification();

  // repeated uint32 intensity = 4;
  int intensity_size() const;
  private:
  int _internal_intensity_size() const;
  public:
  void clear_intensity();
  private:
  uint32_t _internal_intensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_intensity() const;
  void _internal_add_intensity(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_intensity();
  public:
  uint32_t intensity(int index) const;
  void set_intensity(int index, uint32_t value);
  void add_intensity(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      intensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_intensity();

  // repeated uint32 returnNumber = 5;
  int returnnumber_size() const;
  private:
  int _internal_returnnumber_size() const;
  public:
  void clear_returnnumber();
  private:
  uint32_t _internal_returnnumber(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_returnnumber() const;
  void _internal_add_returnnumber(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_returnnumber();
  public:
  uint32_t returnnumber(int index) const;
  void set_returnnumber(int index, uint32_t value);
  void add_returnnumber(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      returnnumber() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_returnnumber();

  // repeated uint32 numReturns = 6;
  int numreturns_size() const;
  private:
  int _internal_numreturns_size() const;
  public:
  void clear_numreturns();
  private:
  uint32_t _internal_numreturns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_numreturns() const;
  void _internal_add_numreturns(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_numreturns();
  public:
  uint32_t numreturns(int index) const;
  void set_numreturns(int index, uint32_t value);
  void add_numreturns(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      numreturns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_numreturns();

  // repeated uint32 usedClassifications = 7;
  int usedclassifications_size() const;
  private:
  int _internal_usedclassifications_size() const;
  public:
  void clear_usedclassifications();
  private:
  uint32_t _internal_usedclassifications(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_usedclassifications() const;
  void _internal_add_usedclassifications(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_usedclassifications();
  public:
  uint32_t usedclassifications(int index) const;
  void set_usedclassifications(int index, uint32_t value);
  void add_usedclassifications(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      usedclassifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_usedclassifications();

  // .DTCC.BoundingBox2D bounds = 2;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::BoundingBox2D& bounds() const;
  PROTOBUF_NODISCARD ::DTCC::BoundingBox2D* release_bounds();
  ::DTCC::BoundingBox2D* mutable_bounds();
  void set_allocated_bounds(::DTCC::BoundingBox2D* bounds);
  private:
  const ::DTCC::BoundingBox2D& _internal_bounds() const;
  ::DTCC::BoundingBox2D* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::BoundingBox2D* bounds);
  ::DTCC::BoundingBox2D* unsafe_arena_release_bounds();

  // .DTCC.Georeference georeference = 8;
  bool has_georeference() const;
  private:
  bool _internal_has_georeference() const;
  public:
  void clear_georeference();
  const ::DTCC::Georeference& georeference() const;
  PROTOBUF_NODISCARD ::DTCC::Georeference* release_georeference();
  ::DTCC::Georeference* mutable_georeference();
  void set_allocated_georeference(::DTCC::Georeference* georeference);
  private:
  const ::DTCC::Georeference& _internal_georeference() const;
  ::DTCC::Georeference* _internal_mutable_georeference();
  public:
  void unsafe_arena_set_allocated_georeference(
      ::DTCC::Georeference* georeference);
  ::DTCC::Georeference* unsafe_arena_release_georeference();

  // @@protoc_insertion_point(class_scope:DTCC.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > classification_;
    mutable std::atomic<int> _classification_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > intensity_;
    mutable std::atomic<int> _intensity_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > returnnumber_;
    mutable std::atomic<int> _returnnumber_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > numreturns_;
    mutable std::atomic<int> _numreturns_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > usedclassifications_;
    mutable std::atomic<int> _usedclassifications_cached_byte_size_;
    ::DTCC::BoundingBox2D* bounds_;
    ::DTCC::Georeference* georeference_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Building final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Building) */ {
 public:
  inline Building() : Building(nullptr) {}
  ~Building() override;
  explicit PROTOBUF_CONSTEXPR Building(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Building(const Building& from);
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Building& operator=(Building&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Building& default_instance() {
    return *internal_default_instance();
  }
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Building* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Building* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Building* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Building";
  }
  protected:
  explicit Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFootPrintFieldNumber = 2,
    kRoofpointsFieldNumber = 5,
    kHeightFieldNumber = 3,
    kGroundHeightFieldNumber = 4,
    kErrorFieldNumber = 6,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .DTCC.Polygon footPrint = 2;
  bool has_footprint() const;
  private:
  bool _internal_has_footprint() const;
  public:
  void clear_footprint();
  const ::DTCC::Polygon& footprint() const;
  PROTOBUF_NODISCARD ::DTCC::Polygon* release_footprint();
  ::DTCC::Polygon* mutable_footprint();
  void set_allocated_footprint(::DTCC::Polygon* footprint);
  private:
  const ::DTCC::Polygon& _internal_footprint() const;
  ::DTCC::Polygon* _internal_mutable_footprint();
  public:
  void unsafe_arena_set_allocated_footprint(
      ::DTCC::Polygon* footprint);
  ::DTCC::Polygon* unsafe_arena_release_footprint();

  // .DTCC.PointCloud roofpoints = 5;
  bool has_roofpoints() const;
  private:
  bool _internal_has_roofpoints() const;
  public:
  void clear_roofpoints();
  const ::DTCC::PointCloud& roofpoints() const;
  PROTOBUF_NODISCARD ::DTCC::PointCloud* release_roofpoints();
  ::DTCC::PointCloud* mutable_roofpoints();
  void set_allocated_roofpoints(::DTCC::PointCloud* roofpoints);
  private:
  const ::DTCC::PointCloud& _internal_roofpoints() const;
  ::DTCC::PointCloud* _internal_mutable_roofpoints();
  public:
  void unsafe_arena_set_allocated_roofpoints(
      ::DTCC::PointCloud* roofpoints);
  ::DTCC::PointCloud* unsafe_arena_release_roofpoints();

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double groundHeight = 4;
  void clear_groundheight();
  double groundheight() const;
  void set_groundheight(double value);
  private:
  double _internal_groundheight() const;
  void _internal_set_groundheight(double value);
  public:

  // uint64 error = 6;
  void clear_error();
  uint64_t error() const;
  void set_error(uint64_t value);
  private:
  uint64_t _internal_error() const;
  void _internal_set_error(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Building)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::DTCC::Polygon* footprint_;
    ::DTCC::PointCloud* roofpoints_;
    double height_;
    double groundheight_;
    uint64_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class CityModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.CityModel) */ {
 public:
  inline CityModel() : CityModel(nullptr) {}
  ~CityModel() override;
  explicit PROTOBUF_CONSTEXPR CityModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CityModel(const CityModel& from);
  CityModel(CityModel&& from) noexcept
    : CityModel() {
    *this = ::std::move(from);
  }

  inline CityModel& operator=(const CityModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CityModel& operator=(CityModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CityModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CityModel* internal_default_instance() {
    return reinterpret_cast<const CityModel*>(
               &_CityModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CityModel& a, CityModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CityModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CityModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CityModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CityModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CityModel& from);
  void MergeFrom(const CityModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CityModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.CityModel";
  }
  protected:
  explicit CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildingsFieldNumber = 1,
    kGeoreferenceFieldNumber = 3,
  };
  // repeated .DTCC.Building buildings = 1;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::DTCC::Building* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
      mutable_buildings();
  private:
  const ::DTCC::Building& _internal_buildings(int index) const;
  ::DTCC::Building* _internal_add_buildings();
  public:
  const ::DTCC::Building& buildings(int index) const;
  ::DTCC::Building* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
      buildings() const;

  // .DTCC.Georeference georeference = 3;
  bool has_georeference() const;
  private:
  bool _internal_has_georeference() const;
  public:
  void clear_georeference();
  const ::DTCC::Georeference& georeference() const;
  PROTOBUF_NODISCARD ::DTCC::Georeference* release_georeference();
  ::DTCC::Georeference* mutable_georeference();
  void set_allocated_georeference(::DTCC::Georeference* georeference);
  private:
  const ::DTCC::Georeference& _internal_georeference() const;
  ::DTCC::Georeference* _internal_mutable_georeference();
  public:
  void unsafe_arena_set_allocated_georeference(
      ::DTCC::Georeference* georeference);
  ::DTCC::Georeference* unsafe_arena_release_georeference();

  // @@protoc_insertion_point(class_scope:DTCC.CityModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building > buildings_;
    ::DTCC::Georeference* georeference_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// -------------------------------------------------------------------

class Georeference final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Georeference) */ {
 public:
  inline Georeference() : Georeference(nullptr) {}
  ~Georeference() override;
  explicit PROTOBUF_CONSTEXPR Georeference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Georeference(const Georeference& from);
  Georeference(Georeference&& from) noexcept
    : Georeference() {
    *this = ::std::move(from);
  }

  inline Georeference& operator=(const Georeference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Georeference& operator=(Georeference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Georeference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Georeference* internal_default_instance() {
    return reinterpret_cast<const Georeference*>(
               &_Georeference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Georeference& a, Georeference& b) {
    a.Swap(&b);
  }
  inline void Swap(Georeference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Georeference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Georeference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Georeference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Georeference& from);
  void MergeFrom(const Georeference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Georeference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Georeference";
  }
  protected:
  explicit Georeference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrsFieldNumber = 1,
    kX0FieldNumber = 3,
    kY0FieldNumber = 4,
    kEpsgFieldNumber = 2,
  };
  // string crs = 1;
  void clear_crs();
  const std::string& crs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crs();
  PROTOBUF_NODISCARD std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // double x0 = 3;
  void clear_x0();
  double x0() const;
  void set_x0(double value);
  private:
  double _internal_x0() const;
  void _internal_set_x0(double value);
  public:

  // double y0 = 4;
  void clear_y0();
  double y0() const;
  void set_y0(double value);
  private:
  double _internal_y0() const;
  void _internal_set_y0(double value);
  public:

  // int32 epsg = 2;
  void clear_epsg();
  int32_t epsg() const;
  void set_epsg(int32_t value);
  private:
  int32_t _internal_epsg() const;
  void _internal_set_epsg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Georeference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
    double x0_;
    double y0_;
    int32_t epsg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fdtcc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.y)
}

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3D::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3D::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3D::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.z)
}

// -------------------------------------------------------------------

// Simplex1D

// int32 v0 = 1;
inline void Simplex1D::clear_v0() {
  _impl_.v0_ = 0;
}
inline int32_t Simplex1D::_internal_v0() const {
  return _impl_.v0_;
}
inline int32_t Simplex1D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex1D.v0)
  return _internal_v0();
}
inline void Simplex1D::_internal_set_v0(int32_t value) {
  
  _impl_.v0_ = value;
}
inline void Simplex1D::set_v0(int32_t value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex1D.v0)
}

// int32 v1 = 2;
inline void Simplex1D::clear_v1() {
  _impl_.v1_ = 0;
}
inline int32_t Simplex1D::_internal_v1() const {
  return _impl_.v1_;
}
inline int32_t Simplex1D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex1D.v1)
  return _internal_v1();
}
inline void Simplex1D::_internal_set_v1(int32_t value) {
  
  _impl_.v1_ = value;
}
inline void Simplex1D::set_v1(int32_t value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex1D.v1)
}

// -------------------------------------------------------------------

// Simplex2D

// int32 v0 = 1;
inline void Simplex2D::clear_v0() {
  _impl_.v0_ = 0;
}
inline int32_t Simplex2D::_internal_v0() const {
  return _impl_.v0_;
}
inline int32_t Simplex2D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v0)
  return _internal_v0();
}
inline void Simplex2D::_internal_set_v0(int32_t value) {
  
  _impl_.v0_ = value;
}
inline void Simplex2D::set_v0(int32_t value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v0)
}

// int32 v1 = 2;
inline void Simplex2D::clear_v1() {
  _impl_.v1_ = 0;
}
inline int32_t Simplex2D::_internal_v1() const {
  return _impl_.v1_;
}
inline int32_t Simplex2D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v1)
  return _internal_v1();
}
inline void Simplex2D::_internal_set_v1(int32_t value) {
  
  _impl_.v1_ = value;
}
inline void Simplex2D::set_v1(int32_t value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v1)
}

// int32 v2 = 3;
inline void Simplex2D::clear_v2() {
  _impl_.v2_ = 0;
}
inline int32_t Simplex2D::_internal_v2() const {
  return _impl_.v2_;
}
inline int32_t Simplex2D::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v2)
  return _internal_v2();
}
inline void Simplex2D::_internal_set_v2(int32_t value) {
  
  _impl_.v2_ = value;
}
inline void Simplex2D::set_v2(int32_t value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v2)
}

// -------------------------------------------------------------------

// Simplex3D

// int32 v0 = 1;
inline void Simplex3D::clear_v0() {
  _impl_.v0_ = 0;
}
inline int32_t Simplex3D::_internal_v0() const {
  return _impl_.v0_;
}
inline int32_t Simplex3D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v0)
  return _internal_v0();
}
inline void Simplex3D::_internal_set_v0(int32_t value) {
  
  _impl_.v0_ = value;
}
inline void Simplex3D::set_v0(int32_t value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v0)
}

// int32 v1 = 2;
inline void Simplex3D::clear_v1() {
  _impl_.v1_ = 0;
}
inline int32_t Simplex3D::_internal_v1() const {
  return _impl_.v1_;
}
inline int32_t Simplex3D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v1)
  return _internal_v1();
}
inline void Simplex3D::_internal_set_v1(int32_t value) {
  
  _impl_.v1_ = value;
}
inline void Simplex3D::set_v1(int32_t value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v1)
}

// int32 v2 = 3;
inline void Simplex3D::clear_v2() {
  _impl_.v2_ = 0;
}
inline int32_t Simplex3D::_internal_v2() const {
  return _impl_.v2_;
}
inline int32_t Simplex3D::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v2)
  return _internal_v2();
}
inline void Simplex3D::_internal_set_v2(int32_t value) {
  
  _impl_.v2_ = value;
}
inline void Simplex3D::set_v2(int32_t value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v2)
}

// int32 v3 = 4;
inline void Simplex3D::clear_v3() {
  _impl_.v3_ = 0;
}
inline int32_t Simplex3D::_internal_v3() const {
  return _impl_.v3_;
}
inline int32_t Simplex3D::v3() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v3)
  return _internal_v3();
}
inline void Simplex3D::_internal_set_v3(int32_t value) {
  
  _impl_.v3_ = value;
}
inline void Simplex3D::set_v3(int32_t value) {
  _internal_set_v3(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v3)
}

// -------------------------------------------------------------------

// BoundingBox2D

// .DTCC.Vector2D p = 1;
inline bool BoundingBox2D::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool BoundingBox2D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox2D::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_p() const {
  const ::DTCC::Vector2D* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector2D&>(
      ::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.p)
  return _internal_p();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector2D* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.p)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_p() {
  
  ::DTCC::Vector2D* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.p)
  
  ::DTCC::Vector2D* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_p() {
  ::DTCC::Vector2D* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.p)
  return _msg;
}
inline void BoundingBox2D::set_allocated_p(::DTCC::Vector2D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.p)
}

// .DTCC.Vector2D q = 2;
inline bool BoundingBox2D::_internal_has_q() const {
  return this != internal_default_instance() && _impl_.q_ != nullptr;
}
inline bool BoundingBox2D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox2D::clear_q() {
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_q() const {
  const ::DTCC::Vector2D* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector2D&>(
      ::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.q)
  return _internal_q();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector2D* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.q)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_q() {
  
  ::DTCC::Vector2D* temp = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.q)
  
  ::DTCC::Vector2D* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_q() {
  
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArenaForAllocation());
    _impl_.q_ = p;
  }
  return _impl_.q_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_q() {
  ::DTCC::Vector2D* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.q)
  return _msg;
}
inline void BoundingBox2D::set_allocated_q(::DTCC::Vector2D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.q)
}

// -------------------------------------------------------------------

// BoundingBox3D

// .DTCC.Vector3D p = 1;
inline bool BoundingBox3D::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool BoundingBox3D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox3D::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_p() const {
  const ::DTCC::Vector3D* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector3D&>(
      ::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.p)
  return _internal_p();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector3D* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.p)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_p() {
  
  ::DTCC::Vector3D* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.p)
  
  ::DTCC::Vector3D* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_p() {
  ::DTCC::Vector3D* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.p)
  return _msg;
}
inline void BoundingBox3D::set_allocated_p(::DTCC::Vector3D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.p)
}

// .DTCC.Vector3D q = 2;
inline bool BoundingBox3D::_internal_has_q() const {
  return this != internal_default_instance() && _impl_.q_ != nullptr;
}
inline bool BoundingBox3D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox3D::clear_q() {
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_q() const {
  const ::DTCC::Vector3D* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector3D&>(
      ::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.q)
  return _internal_q();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector3D* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.q)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_q() {
  
  ::DTCC::Vector3D* temp = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.q)
  
  ::DTCC::Vector3D* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_q() {
  
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArenaForAllocation());
    _impl_.q_ = p;
  }
  return _impl_.q_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_q() {
  ::DTCC::Vector3D* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.q)
  return _msg;
}
inline void BoundingBox3D::set_allocated_q(::DTCC::Vector3D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.q)
}

// -------------------------------------------------------------------

// MultiPoint

// repeated .DTCC.Vector2D points = 1;
inline int MultiPoint::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int MultiPoint::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint::clear_points() {
  _impl_.points_.Clear();
}
inline ::DTCC::Vector2D* MultiPoint::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
MultiPoint::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint.points)
  return &_impl_.points_;
}
inline const ::DTCC::Vector2D& MultiPoint::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::DTCC::Vector2D& MultiPoint::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint.points)
  return _internal_points(index);
}
inline ::DTCC::Vector2D* MultiPoint::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::DTCC::Vector2D* MultiPoint::add_points() {
  ::DTCC::Vector2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
MultiPoint::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint.points)
  return _impl_.points_;
}

// -------------------------------------------------------------------

// MultiPoint3D

// repeated .DTCC.Vector3D points = 1;
inline int MultiPoint3D::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int MultiPoint3D::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint3D::clear_points() {
  _impl_.points_.Clear();
}
inline ::DTCC::Vector3D* MultiPoint3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint3D.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
MultiPoint3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint3D.points)
  return &_impl_.points_;
}
inline const ::DTCC::Vector3D& MultiPoint3D::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::DTCC::Vector3D& MultiPoint3D::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint3D.points)
  return _internal_points(index);
}
inline ::DTCC::Vector3D* MultiPoint3D::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::DTCC::Vector3D* MultiPoint3D::add_points() {
  ::DTCC::Vector3D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint3D.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
MultiPoint3D::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint3D.points)
  return _impl_.points_;
}

// -------------------------------------------------------------------

// LineString

// repeated .DTCC.Vector2D vertices = 1;
inline int LineString::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int LineString::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector2D* LineString::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LineString::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector2D& LineString::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LineString::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LineString::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector2D* LineString::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LineString::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString.vertices)
  return _impl_.vertices_;
}

// -------------------------------------------------------------------

// LineString3D

// repeated .DTCC.Vector3D vertices = 1;
inline int LineString3D::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int LineString3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString3D::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector3D* LineString3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString3D.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
LineString3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString3D.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector3D& LineString3D::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector3D& LineString3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* LineString3D::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector3D* LineString3D::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString3D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
LineString3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString3D.vertices)
  return _impl_.vertices_;
}

// -------------------------------------------------------------------

// LinearRing

// repeated .DTCC.Vector2D vertices = 1;
inline int LinearRing::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int LinearRing::vertices_size() const {
  return _internal_vertices_size();
}
inline void LinearRing::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector2D* LinearRing::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LinearRing.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LinearRing::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LinearRing.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector2D& LinearRing::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LinearRing::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LinearRing.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LinearRing::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector2D* LinearRing::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LinearRing.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LinearRing::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LinearRing.vertices)
  return _impl_.vertices_;
}

// -------------------------------------------------------------------

// Polygon

// .DTCC.LinearRing shell = 1;
inline bool Polygon::_internal_has_shell() const {
  return this != internal_default_instance() && _impl_.shell_ != nullptr;
}
inline bool Polygon::has_shell() const {
  return _internal_has_shell();
}
inline void Polygon::clear_shell() {
  if (GetArenaForAllocation() == nullptr && _impl_.shell_ != nullptr) {
    delete _impl_.shell_;
  }
  _impl_.shell_ = nullptr;
}
inline const ::DTCC::LinearRing& Polygon::_internal_shell() const {
  const ::DTCC::LinearRing* p = _impl_.shell_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::LinearRing&>(
      ::DTCC::_LinearRing_default_instance_);
}
inline const ::DTCC::LinearRing& Polygon::shell() const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.shell)
  return _internal_shell();
}
inline void Polygon::unsafe_arena_set_allocated_shell(
    ::DTCC::LinearRing* shell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shell_);
  }
  _impl_.shell_ = shell;
  if (shell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Polygon.shell)
}
inline ::DTCC::LinearRing* Polygon::release_shell() {
  
  ::DTCC::LinearRing* temp = _impl_.shell_;
  _impl_.shell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::LinearRing* Polygon::unsafe_arena_release_shell() {
  // @@protoc_insertion_point(field_release:DTCC.Polygon.shell)
  
  ::DTCC::LinearRing* temp = _impl_.shell_;
  _impl_.shell_ = nullptr;
  return temp;
}
inline ::DTCC::LinearRing* Polygon::_internal_mutable_shell() {
  
  if (_impl_.shell_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::LinearRing>(GetArenaForAllocation());
    _impl_.shell_ = p;
  }
  return _impl_.shell_;
}
inline ::DTCC::LinearRing* Polygon::mutable_shell() {
  ::DTCC::LinearRing* _msg = _internal_mutable_shell();
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.shell)
  return _msg;
}
inline void Polygon::set_allocated_shell(::DTCC::LinearRing* shell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shell_;
  }
  if (shell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shell);
    if (message_arena != submessage_arena) {
      shell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shell_ = shell;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Polygon.shell)
}

// repeated .DTCC.LinearRing holes = 2;
inline int Polygon::_internal_holes_size() const {
  return _impl_.holes_.size();
}
inline int Polygon::holes_size() const {
  return _internal_holes_size();
}
inline void Polygon::clear_holes() {
  _impl_.holes_.Clear();
}
inline ::DTCC::LinearRing* Polygon::mutable_holes(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.holes)
  return _impl_.holes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
Polygon::mutable_holes() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Polygon.holes)
  return &_impl_.holes_;
}
inline const ::DTCC::LinearRing& Polygon::_internal_holes(int index) const {
  return _impl_.holes_.Get(index);
}
inline const ::DTCC::LinearRing& Polygon::holes(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.holes)
  return _internal_holes(index);
}
inline ::DTCC::LinearRing* Polygon::_internal_add_holes() {
  return _impl_.holes_.Add();
}
inline ::DTCC::LinearRing* Polygon::add_holes() {
  ::DTCC::LinearRing* _add = _internal_add_holes();
  // @@protoc_insertion_point(field_add:DTCC.Polygon.holes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
Polygon::holes() const {
  // @@protoc_insertion_point(field_list:DTCC.Polygon.holes)
  return _impl_.holes_;
}

// -------------------------------------------------------------------

// MultiPolygon

// repeated .DTCC.Polygon polygons = 1;
inline int MultiPolygon::_internal_polygons_size() const {
  return _impl_.polygons_.size();
}
inline int MultiPolygon::polygons_size() const {
  return _internal_polygons_size();
}
inline void MultiPolygon::clear_polygons() {
  _impl_.polygons_.Clear();
}
inline ::DTCC::Polygon* MultiPolygon::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPolygon.polygons)
  return _impl_.polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
MultiPolygon::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPolygon.polygons)
  return &_impl_.polygons_;
}
inline const ::DTCC::Polygon& MultiPolygon::_internal_polygons(int index) const {
  return _impl_.polygons_.Get(index);
}
inline const ::DTCC::Polygon& MultiPolygon::polygons(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPolygon.polygons)
  return _internal_polygons(index);
}
inline ::DTCC::Polygon* MultiPolygon::_internal_add_polygons() {
  return _impl_.polygons_.Add();
}
inline ::DTCC::Polygon* MultiPolygon::add_polygons() {
  ::DTCC::Polygon* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:DTCC.MultiPolygon.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
MultiPolygon::polygons() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPolygon.polygons)
  return _impl_.polygons_;
}

// -------------------------------------------------------------------

// Grid2D

// .DTCC.BoundingBox2D boundingBox = 1;
inline bool Grid2D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && _impl_.boundingbox_ != nullptr;
}
inline bool Grid2D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid2D::clear_boundingbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.boundingbox_ != nullptr) {
    delete _impl_.boundingbox_;
  }
  _impl_.boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& Grid2D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox2D* p = _impl_.boundingbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox2D&>(
      ::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& Grid2D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid2D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox2D* boundingbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingbox_);
  }
  _impl_.boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid2D.boundingBox)
}
inline ::DTCC::BoundingBox2D* Grid2D::release_boundingbox() {
  
  ::DTCC::BoundingBox2D* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid2D.boundingBox)
  
  ::DTCC::BoundingBox2D* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::_internal_mutable_boundingbox() {
  
  if (_impl_.boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArenaForAllocation());
    _impl_.boundingbox_ = p;
  }
  return _impl_.boundingbox_;
}
inline ::DTCC::BoundingBox2D* Grid2D::mutable_boundingbox() {
  ::DTCC::BoundingBox2D* _msg = _internal_mutable_boundingbox();
  // @@protoc_insertion_point(field_mutable:DTCC.Grid2D.boundingBox)
  return _msg;
}
inline void Grid2D::set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid2D.boundingBox)
}

// int32 xSize = 2;
inline void Grid2D::clear_xsize() {
  _impl_.xsize_ = 0;
}
inline int32_t Grid2D::_internal_xsize() const {
  return _impl_.xsize_;
}
inline int32_t Grid2D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xSize)
  return _internal_xsize();
}
inline void Grid2D::_internal_set_xsize(int32_t value) {
  
  _impl_.xsize_ = value;
}
inline void Grid2D::set_xsize(int32_t value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xSize)
}

// int32 ySize = 3;
inline void Grid2D::clear_ysize() {
  _impl_.ysize_ = 0;
}
inline int32_t Grid2D::_internal_ysize() const {
  return _impl_.ysize_;
}
inline int32_t Grid2D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.ySize)
  return _internal_ysize();
}
inline void Grid2D::_internal_set_ysize(int32_t value) {
  
  _impl_.ysize_ = value;
}
inline void Grid2D::set_ysize(int32_t value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.ySize)
}

// float xStep = 4;
inline void Grid2D::clear_xstep() {
  _impl_.xstep_ = 0;
}
inline float Grid2D::_internal_xstep() const {
  return _impl_.xstep_;
}
inline float Grid2D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xStep)
  return _internal_xstep();
}
inline void Grid2D::_internal_set_xstep(float value) {
  
  _impl_.xstep_ = value;
}
inline void Grid2D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xStep)
}

// float yStep = 5;
inline void Grid2D::clear_ystep() {
  _impl_.ystep_ = 0;
}
inline float Grid2D::_internal_ystep() const {
  return _impl_.ystep_;
}
inline float Grid2D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.yStep)
  return _internal_ystep();
}
inline void Grid2D::_internal_set_ystep(float value) {
  
  _impl_.ystep_ = value;
}
inline void Grid2D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.yStep)
}

// -------------------------------------------------------------------

// Grid3D

// .DTCC.BoundingBox3D boundingBox = 1;
inline bool Grid3D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && _impl_.boundingbox_ != nullptr;
}
inline bool Grid3D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid3D::clear_boundingbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.boundingbox_ != nullptr) {
    delete _impl_.boundingbox_;
  }
  _impl_.boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox3D& Grid3D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox3D* p = _impl_.boundingbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox3D&>(
      ::DTCC::_BoundingBox3D_default_instance_);
}
inline const ::DTCC::BoundingBox3D& Grid3D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid3D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox3D* boundingbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingbox_);
  }
  _impl_.boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid3D.boundingBox)
}
inline ::DTCC::BoundingBox3D* Grid3D::release_boundingbox() {
  
  ::DTCC::BoundingBox3D* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid3D.boundingBox)
  
  ::DTCC::BoundingBox3D* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::_internal_mutable_boundingbox() {
  
  if (_impl_.boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox3D>(GetArenaForAllocation());
    _impl_.boundingbox_ = p;
  }
  return _impl_.boundingbox_;
}
inline ::DTCC::BoundingBox3D* Grid3D::mutable_boundingbox() {
  ::DTCC::BoundingBox3D* _msg = _internal_mutable_boundingbox();
  // @@protoc_insertion_point(field_mutable:DTCC.Grid3D.boundingBox)
  return _msg;
}
inline void Grid3D::set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid3D.boundingBox)
}

// int32 xSize = 2;
inline void Grid3D::clear_xsize() {
  _impl_.xsize_ = 0;
}
inline int32_t Grid3D::_internal_xsize() const {
  return _impl_.xsize_;
}
inline int32_t Grid3D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xSize)
  return _internal_xsize();
}
inline void Grid3D::_internal_set_xsize(int32_t value) {
  
  _impl_.xsize_ = value;
}
inline void Grid3D::set_xsize(int32_t value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xSize)
}

// int32 ySize = 3;
inline void Grid3D::clear_ysize() {
  _impl_.ysize_ = 0;
}
inline int32_t Grid3D::_internal_ysize() const {
  return _impl_.ysize_;
}
inline int32_t Grid3D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.ySize)
  return _internal_ysize();
}
inline void Grid3D::_internal_set_ysize(int32_t value) {
  
  _impl_.ysize_ = value;
}
inline void Grid3D::set_ysize(int32_t value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.ySize)
}

// int32 zSize = 4;
inline void Grid3D::clear_zsize() {
  _impl_.zsize_ = 0;
}
inline int32_t Grid3D::_internal_zsize() const {
  return _impl_.zsize_;
}
inline int32_t Grid3D::zsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zSize)
  return _internal_zsize();
}
inline void Grid3D::_internal_set_zsize(int32_t value) {
  
  _impl_.zsize_ = value;
}
inline void Grid3D::set_zsize(int32_t value) {
  _internal_set_zsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zSize)
}

// float xStep = 5;
inline void Grid3D::clear_xstep() {
  _impl_.xstep_ = 0;
}
inline float Grid3D::_internal_xstep() const {
  return _impl_.xstep_;
}
inline float Grid3D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xStep)
  return _internal_xstep();
}
inline void Grid3D::_internal_set_xstep(float value) {
  
  _impl_.xstep_ = value;
}
inline void Grid3D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xStep)
}

// float yStep = 6;
inline void Grid3D::clear_ystep() {
  _impl_.ystep_ = 0;
}
inline float Grid3D::_internal_ystep() const {
  return _impl_.ystep_;
}
inline float Grid3D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.yStep)
  return _internal_ystep();
}
inline void Grid3D::_internal_set_ystep(float value) {
  
  _impl_.ystep_ = value;
}
inline void Grid3D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.yStep)
}

// float zStep = 7;
inline void Grid3D::clear_zstep() {
  _impl_.zstep_ = 0;
}
inline float Grid3D::_internal_zstep() const {
  return _impl_.zstep_;
}
inline float Grid3D::zstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zStep)
  return _internal_zstep();
}
inline void Grid3D::_internal_set_zstep(float value) {
  
  _impl_.zstep_ = value;
}
inline void Grid3D::set_zstep(float value) {
  _internal_set_zstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zStep)
}

// -------------------------------------------------------------------

// Mesh2D

// repeated .DTCC.Vector2D vertices = 1;
inline int Mesh2D::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Mesh2D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh2D::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector2D* Mesh2D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh2D.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Mesh2D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector2D& Mesh2D::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector2D& Mesh2D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* Mesh2D::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector2D* Mesh2D::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Mesh2D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.vertices)
  return _impl_.vertices_;
}

// repeated .DTCC.Simplex2D cells = 2;
inline int Mesh2D::_internal_cells_size() const {
  return _impl_.cells_.size();
}
inline int Mesh2D::cells_size() const {
  return _internal_cells_size();
}
inline void Mesh2D::clear_cells() {
  _impl_.cells_.Clear();
}
inline ::DTCC::Simplex2D* Mesh2D::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh2D.cells)
  return _impl_.cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
Mesh2D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.cells)
  return &_impl_.cells_;
}
inline const ::DTCC::Simplex2D& Mesh2D::_internal_cells(int index) const {
  return _impl_.cells_.Get(index);
}
inline const ::DTCC::Simplex2D& Mesh2D::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.cells)
  return _internal_cells(index);
}
inline ::DTCC::Simplex2D* Mesh2D::_internal_add_cells() {
  return _impl_.cells_.Add();
}
inline ::DTCC::Simplex2D* Mesh2D::add_cells() {
  ::DTCC::Simplex2D* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
Mesh2D::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.cells)
  return _impl_.cells_;
}

// repeated int32 markers = 3;
inline int Mesh2D::_internal_markers_size() const {
  return _impl_.markers_.size();
}
inline int Mesh2D::markers_size() const {
  return _internal_markers_size();
}
inline void Mesh2D::clear_markers() {
  _impl_.markers_.Clear();
}
inline int32_t Mesh2D::_internal_markers(int index) const {
  return _impl_.markers_.Get(index);
}
inline int32_t Mesh2D::markers(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.markers)
  return _internal_markers(index);
}
inline void Mesh2D::set_markers(int index, int32_t value) {
  _impl_.markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh2D.markers)
}
inline void Mesh2D::_internal_add_markers(int32_t value) {
  _impl_.markers_.Add(value);
}
inline void Mesh2D::add_markers(int32_t value) {
  _internal_add_markers(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh2D::_internal_markers() const {
  return _impl_.markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh2D::markers() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.markers)
  return _internal_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh2D::_internal_mutable_markers() {
  return &_impl_.markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh2D::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.markers)
  return _internal_mutable_markers();
}

// -------------------------------------------------------------------

// Mesh3D

// repeated .DTCC.Vector3D vertices = 1;
inline int Mesh3D::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Mesh3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh3D::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector3D* Mesh3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh3D.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Mesh3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector3D& Mesh3D::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector3D& Mesh3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* Mesh3D::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector3D* Mesh3D::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Mesh3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.vertices)
  return _impl_.vertices_;
}

// repeated .DTCC.Simplex3D cells = 2;
inline int Mesh3D::_internal_cells_size() const {
  return _impl_.cells_.size();
}
inline int Mesh3D::cells_size() const {
  return _internal_cells_size();
}
inline void Mesh3D::clear_cells() {
  _impl_.cells_.Clear();
}
inline ::DTCC::Simplex3D* Mesh3D::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh3D.cells)
  return _impl_.cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >*
Mesh3D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.cells)
  return &_impl_.cells_;
}
inline const ::DTCC::Simplex3D& Mesh3D::_internal_cells(int index) const {
  return _impl_.cells_.Get(index);
}
inline const ::DTCC::Simplex3D& Mesh3D::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.cells)
  return _internal_cells(index);
}
inline ::DTCC::Simplex3D* Mesh3D::_internal_add_cells() {
  return _impl_.cells_.Add();
}
inline ::DTCC::Simplex3D* Mesh3D::add_cells() {
  ::DTCC::Simplex3D* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >&
Mesh3D::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.cells)
  return _impl_.cells_;
}

// repeated int32 markers = 3;
inline int Mesh3D::_internal_markers_size() const {
  return _impl_.markers_.size();
}
inline int Mesh3D::markers_size() const {
  return _internal_markers_size();
}
inline void Mesh3D::clear_markers() {
  _impl_.markers_.Clear();
}
inline int32_t Mesh3D::_internal_markers(int index) const {
  return _impl_.markers_.Get(index);
}
inline int32_t Mesh3D::markers(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.markers)
  return _internal_markers(index);
}
inline void Mesh3D::set_markers(int index, int32_t value) {
  _impl_.markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh3D.markers)
}
inline void Mesh3D::_internal_add_markers(int32_t value) {
  _impl_.markers_.Add(value);
}
inline void Mesh3D::add_markers(int32_t value) {
  _internal_add_markers(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh3D::_internal_markers() const {
  return _impl_.markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh3D::markers() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.markers)
  return _internal_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh3D::_internal_mutable_markers() {
  return &_impl_.markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh3D::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.markers)
  return _internal_mutable_markers();
}

// -------------------------------------------------------------------

// Surface2D

// repeated .DTCC.Vector2D vertices = 1;
inline int Surface2D::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Surface2D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Surface2D::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector2D* Surface2D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Surface2D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector2D& Surface2D::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector2D& Surface2D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* Surface2D::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector2D* Surface2D::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Surface2D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.vertices)
  return _impl_.vertices_;
}

// repeated .DTCC.Vector2D normals = 2;
inline int Surface2D::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int Surface2D::normals_size() const {
  return _internal_normals_size();
}
inline void Surface2D::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::DTCC::Vector2D* Surface2D::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Surface2D::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.normals)
  return &_impl_.normals_;
}
inline const ::DTCC::Vector2D& Surface2D::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::DTCC::Vector2D& Surface2D::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.normals)
  return _internal_normals(index);
}
inline ::DTCC::Vector2D* Surface2D::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::DTCC::Vector2D* Surface2D::add_normals() {
  ::DTCC::Vector2D* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Surface2D::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.normals)
  return _impl_.normals_;
}

// repeated .DTCC.Simplex1D edges = 3;
inline int Surface2D::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int Surface2D::edges_size() const {
  return _internal_edges_size();
}
inline void Surface2D::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::DTCC::Simplex1D* Surface2D::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >*
Surface2D::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.edges)
  return &_impl_.edges_;
}
inline const ::DTCC::Simplex1D& Surface2D::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::DTCC::Simplex1D& Surface2D::edges(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.edges)
  return _internal_edges(index);
}
inline ::DTCC::Simplex1D* Surface2D::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::DTCC::Simplex1D* Surface2D::add_edges() {
  ::DTCC::Simplex1D* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >&
Surface2D::edges() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.edges)
  return _impl_.edges_;
}

// -------------------------------------------------------------------

// Surface3D

// repeated .DTCC.Vector3D vertices = 1;
inline int Surface3D::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Surface3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Surface3D::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::DTCC::Vector3D* Surface3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Surface3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.vertices)
  return &_impl_.vertices_;
}
inline const ::DTCC::Vector3D& Surface3D::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::DTCC::Vector3D& Surface3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* Surface3D::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::DTCC::Vector3D* Surface3D::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Surface3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.vertices)
  return _impl_.vertices_;
}

// repeated .DTCC.Vector3D normals = 2;
inline int Surface3D::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int Surface3D::normals_size() const {
  return _internal_normals_size();
}
inline void Surface3D::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::DTCC::Vector3D* Surface3D::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Surface3D::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.normals)
  return &_impl_.normals_;
}
inline const ::DTCC::Vector3D& Surface3D::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::DTCC::Vector3D& Surface3D::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.normals)
  return _internal_normals(index);
}
inline ::DTCC::Vector3D* Surface3D::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::DTCC::Vector3D* Surface3D::add_normals() {
  ::DTCC::Vector3D* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Surface3D::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.normals)
  return _impl_.normals_;
}

// repeated .DTCC.Simplex2D faces = 3;
inline int Surface3D::_internal_faces_size() const {
  return _impl_.faces_.size();
}
inline int Surface3D::faces_size() const {
  return _internal_faces_size();
}
inline void Surface3D::clear_faces() {
  _impl_.faces_.Clear();
}
inline ::DTCC::Simplex2D* Surface3D::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.faces)
  return _impl_.faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
Surface3D::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.faces)
  return &_impl_.faces_;
}
inline const ::DTCC::Simplex2D& Surface3D::_internal_faces(int index) const {
  return _impl_.faces_.Get(index);
}
inline const ::DTCC::Simplex2D& Surface3D::faces(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.faces)
  return _internal_faces(index);
}
inline ::DTCC::Simplex2D* Surface3D::_internal_add_faces() {
  return _impl_.faces_.Add();
}
inline ::DTCC::Simplex2D* Surface3D::add_faces() {
  ::DTCC::Simplex2D* _add = _internal_add_faces();
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.faces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
Surface3D::faces() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.faces)
  return _impl_.faces_;
}

// -------------------------------------------------------------------

// GridField2D

// .DTCC.Grid2D grid = 1;
inline bool GridField2D::_internal_has_grid() const {
  return this != internal_default_instance() && _impl_.grid_ != nullptr;
}
inline bool GridField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField2D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid2D&>(
      ::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.grid)
  return _internal_grid();
}
inline void GridField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField2D.grid)
}
inline ::DTCC::Grid2D* GridField2D::release_grid() {
  
  ::DTCC::Grid2D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField2D.grid)
  
  ::DTCC::Grid2D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::_internal_mutable_grid() {
  
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::DTCC::Grid2D* GridField2D::mutable_grid() {
  ::DTCC::Grid2D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridField2D.grid)
  return _msg;
}
inline void GridField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField2D.grid)
}

// repeated float values = 2;
inline int GridField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int GridField2D::values_size() const {
  return _internal_values_size();
}
inline void GridField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float GridField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float GridField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.values)
  return _internal_values(index);
}
inline void GridField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField2D.values)
}
inline void GridField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void GridField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridField3D

// .DTCC.Grid3D grid = 1;
inline bool GridField3D::_internal_has_grid() const {
  return this != internal_default_instance() && _impl_.grid_ != nullptr;
}
inline bool GridField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField3D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid3D&>(
      ::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.grid)
  return _internal_grid();
}
inline void GridField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField3D.grid)
}
inline ::DTCC::Grid3D* GridField3D::release_grid() {
  
  ::DTCC::Grid3D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField3D.grid)
  
  ::DTCC::Grid3D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::_internal_mutable_grid() {
  
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::DTCC::Grid3D* GridField3D::mutable_grid() {
  ::DTCC::Grid3D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridField3D.grid)
  return _msg;
}
inline void GridField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField3D.grid)
}

// repeated float values = 2;
inline int GridField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int GridField3D::values_size() const {
  return _internal_values_size();
}
inline void GridField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float GridField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float GridField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.values)
  return _internal_values(index);
}
inline void GridField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField3D.values)
}
inline void GridField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void GridField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField2D

// .DTCC.Grid2D grid = 1;
inline bool GridVectorField2D::_internal_has_grid() const {
  return this != internal_default_instance() && _impl_.grid_ != nullptr;
}
inline bool GridVectorField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField2D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridVectorField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid2D&>(
      ::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridVectorField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.grid)
  return _internal_grid();
}
inline void GridVectorField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField2D.grid)
}
inline ::DTCC::Grid2D* GridVectorField2D::release_grid() {
  
  ::DTCC::Grid2D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField2D.grid)
  
  ::DTCC::Grid2D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::_internal_mutable_grid() {
  
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::DTCC::Grid2D* GridVectorField2D::mutable_grid() {
  ::DTCC::Grid2D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField2D.grid)
  return _msg;
}
inline void GridVectorField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField2D.grid)
}

// repeated float values = 2;
inline int GridVectorField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int GridVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float GridVectorField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float GridVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.values)
  return _internal_values(index);
}
inline void GridVectorField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField2D.values)
}
inline void GridVectorField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void GridVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField3D

// .DTCC.Grid3D grid = 1;
inline bool GridVectorField3D::_internal_has_grid() const {
  return this != internal_default_instance() && _impl_.grid_ != nullptr;
}
inline bool GridVectorField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField3D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridVectorField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid3D&>(
      ::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridVectorField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.grid)
  return _internal_grid();
}
inline void GridVectorField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField3D.grid)
}
inline ::DTCC::Grid3D* GridVectorField3D::release_grid() {
  
  ::DTCC::Grid3D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField3D.grid)
  
  ::DTCC::Grid3D* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::_internal_mutable_grid() {
  
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::DTCC::Grid3D* GridVectorField3D::mutable_grid() {
  ::DTCC::Grid3D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField3D.grid)
  return _msg;
}
inline void GridVectorField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField3D.grid)
}

// repeated float values = 2;
inline int GridVectorField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int GridVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float GridVectorField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float GridVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.values)
  return _internal_values(index);
}
inline void GridVectorField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField3D.values)
}
inline void GridVectorField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void GridVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField2D

// .DTCC.Mesh2D mesh = 1;
inline bool MeshField2D::_internal_has_mesh() const {
  return this != internal_default_instance() && _impl_.mesh_ != nullptr;
}
inline bool MeshField2D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField2D::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
}
inline const ::DTCC::Mesh2D& MeshField2D::_internal_mesh() const {
  const ::DTCC::Mesh2D* p = _impl_.mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh2D&>(
      ::DTCC::_Mesh2D_default_instance_);
}
inline const ::DTCC::Mesh2D& MeshField2D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField2D.mesh)
  return _internal_mesh();
}
inline void MeshField2D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh2D* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mesh_);
  }
  _impl_.mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField2D.mesh)
}
inline ::DTCC::Mesh2D* MeshField2D::release_mesh() {
  
  ::DTCC::Mesh2D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh2D* MeshField2D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField2D.mesh)
  
  ::DTCC::Mesh2D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh2D* MeshField2D::_internal_mutable_mesh() {
  
  if (_impl_.mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh2D>(GetArenaForAllocation());
    _impl_.mesh_ = p;
  }
  return _impl_.mesh_;
}
inline ::DTCC::Mesh2D* MeshField2D::mutable_mesh() {
  ::DTCC::Mesh2D* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField2D.mesh)
  return _msg;
}
inline void MeshField2D::set_allocated_mesh(::DTCC::Mesh2D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField2D.mesh)
}

// repeated float values = 2;
inline int MeshField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int MeshField2D::values_size() const {
  return _internal_values_size();
}
inline void MeshField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float MeshField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float MeshField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField2D.values)
  return _internal_values(index);
}
inline void MeshField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField2D.values)
}
inline void MeshField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void MeshField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField3D

// .DTCC.Mesh3D mesh = 1;
inline bool MeshField3D::_internal_has_mesh() const {
  return this != internal_default_instance() && _impl_.mesh_ != nullptr;
}
inline bool MeshField3D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField3D::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
}
inline const ::DTCC::Mesh3D& MeshField3D::_internal_mesh() const {
  const ::DTCC::Mesh3D* p = _impl_.mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh3D&>(
      ::DTCC::_Mesh3D_default_instance_);
}
inline const ::DTCC::Mesh3D& MeshField3D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField3D.mesh)
  return _internal_mesh();
}
inline void MeshField3D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh3D* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mesh_);
  }
  _impl_.mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField3D.mesh)
}
inline ::DTCC::Mesh3D* MeshField3D::release_mesh() {
  
  ::DTCC::Mesh3D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh3D* MeshField3D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField3D.mesh)
  
  ::DTCC::Mesh3D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh3D* MeshField3D::_internal_mutable_mesh() {
  
  if (_impl_.mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh3D>(GetArenaForAllocation());
    _impl_.mesh_ = p;
  }
  return _impl_.mesh_;
}
inline ::DTCC::Mesh3D* MeshField3D::mutable_mesh() {
  ::DTCC::Mesh3D* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField3D.mesh)
  return _msg;
}
inline void MeshField3D::set_allocated_mesh(::DTCC::Mesh3D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField3D.mesh)
}

// repeated float values = 2;
inline int MeshField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int MeshField3D::values_size() const {
  return _internal_values_size();
}
inline void MeshField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float MeshField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float MeshField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField3D.values)
  return _internal_values(index);
}
inline void MeshField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField3D.values)
}
inline void MeshField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void MeshField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField2D

// .DTCC.Mesh2D mesh = 1;
inline bool MeshVectorField2D::_internal_has_mesh() const {
  return this != internal_default_instance() && _impl_.mesh_ != nullptr;
}
inline bool MeshVectorField2D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField2D::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
}
inline const ::DTCC::Mesh2D& MeshVectorField2D::_internal_mesh() const {
  const ::DTCC::Mesh2D* p = _impl_.mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh2D&>(
      ::DTCC::_Mesh2D_default_instance_);
}
inline const ::DTCC::Mesh2D& MeshVectorField2D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField2D.mesh)
  return _internal_mesh();
}
inline void MeshVectorField2D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh2D* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mesh_);
  }
  _impl_.mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField2D.mesh)
}
inline ::DTCC::Mesh2D* MeshVectorField2D::release_mesh() {
  
  ::DTCC::Mesh2D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField2D.mesh)
  
  ::DTCC::Mesh2D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::_internal_mutable_mesh() {
  
  if (_impl_.mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh2D>(GetArenaForAllocation());
    _impl_.mesh_ = p;
  }
  return _impl_.mesh_;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::mutable_mesh() {
  ::DTCC::Mesh2D* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField2D.mesh)
  return _msg;
}
inline void MeshVectorField2D::set_allocated_mesh(::DTCC::Mesh2D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField2D.mesh)
}

// repeated float values = 2;
inline int MeshVectorField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int MeshVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float MeshVectorField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float MeshVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField2D.values)
  return _internal_values(index);
}
inline void MeshVectorField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField2D.values)
}
inline void MeshVectorField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void MeshVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField3D

// .DTCC.Mesh3D mesh = 1;
inline bool MeshVectorField3D::_internal_has_mesh() const {
  return this != internal_default_instance() && _impl_.mesh_ != nullptr;
}
inline bool MeshVectorField3D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField3D::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
}
inline const ::DTCC::Mesh3D& MeshVectorField3D::_internal_mesh() const {
  const ::DTCC::Mesh3D* p = _impl_.mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh3D&>(
      ::DTCC::_Mesh3D_default_instance_);
}
inline const ::DTCC::Mesh3D& MeshVectorField3D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField3D.mesh)
  return _internal_mesh();
}
inline void MeshVectorField3D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh3D* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mesh_);
  }
  _impl_.mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField3D.mesh)
}
inline ::DTCC::Mesh3D* MeshVectorField3D::release_mesh() {
  
  ::DTCC::Mesh3D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField3D.mesh)
  
  ::DTCC::Mesh3D* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::_internal_mutable_mesh() {
  
  if (_impl_.mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh3D>(GetArenaForAllocation());
    _impl_.mesh_ = p;
  }
  return _impl_.mesh_;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::mutable_mesh() {
  ::DTCC::Mesh3D* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField3D.mesh)
  return _msg;
}
inline void MeshVectorField3D::set_allocated_mesh(::DTCC::Mesh3D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField3D.mesh)
}

// repeated float values = 2;
inline int MeshVectorField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int MeshVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float MeshVectorField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float MeshVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField3D.values)
  return _internal_values(index);
}
inline void MeshVectorField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField3D.values)
}
inline void MeshVectorField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void MeshVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SurfaceField2D

// .DTCC.Surface2D surface = 1;
inline bool SurfaceField2D::_internal_has_surface() const {
  return this != internal_default_instance() && _impl_.surface_ != nullptr;
}
inline bool SurfaceField2D::has_surface() const {
  return _internal_has_surface();
}
inline void SurfaceField2D::clear_surface() {
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
}
inline const ::DTCC::Surface2D& SurfaceField2D::_internal_surface() const {
  const ::DTCC::Surface2D* p = _impl_.surface_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Surface2D&>(
      ::DTCC::_Surface2D_default_instance_);
}
inline const ::DTCC::Surface2D& SurfaceField2D::surface() const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceField2D.surface)
  return _internal_surface();
}
inline void SurfaceField2D::unsafe_arena_set_allocated_surface(
    ::DTCC::Surface2D* surface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surface_);
  }
  _impl_.surface_ = surface;
  if (surface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.SurfaceField2D.surface)
}
inline ::DTCC::Surface2D* SurfaceField2D::release_surface() {
  
  ::DTCC::Surface2D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Surface2D* SurfaceField2D::unsafe_arena_release_surface() {
  // @@protoc_insertion_point(field_release:DTCC.SurfaceField2D.surface)
  
  ::DTCC::Surface2D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
  return temp;
}
inline ::DTCC::Surface2D* SurfaceField2D::_internal_mutable_surface() {
  
  if (_impl_.surface_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Surface2D>(GetArenaForAllocation());
    _impl_.surface_ = p;
  }
  return _impl_.surface_;
}
inline ::DTCC::Surface2D* SurfaceField2D::mutable_surface() {
  ::DTCC::Surface2D* _msg = _internal_mutable_surface();
  // @@protoc_insertion_point(field_mutable:DTCC.SurfaceField2D.surface)
  return _msg;
}
inline void SurfaceField2D::set_allocated_surface(::DTCC::Surface2D* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.surface_;
  }
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(surface);
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:DTCC.SurfaceField2D.surface)
}

// repeated float values = 2;
inline int SurfaceField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SurfaceField2D::values_size() const {
  return _internal_values_size();
}
inline void SurfaceField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float SurfaceField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float SurfaceField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceField2D.values)
  return _internal_values(index);
}
inline void SurfaceField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.SurfaceField2D.values)
}
inline void SurfaceField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void SurfaceField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.SurfaceField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.SurfaceField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.SurfaceField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SurfaceField3D

// .DTCC.Surface3D surface = 1;
inline bool SurfaceField3D::_internal_has_surface() const {
  return this != internal_default_instance() && _impl_.surface_ != nullptr;
}
inline bool SurfaceField3D::has_surface() const {
  return _internal_has_surface();
}
inline void SurfaceField3D::clear_surface() {
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
}
inline const ::DTCC::Surface3D& SurfaceField3D::_internal_surface() const {
  const ::DTCC::Surface3D* p = _impl_.surface_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Surface3D&>(
      ::DTCC::_Surface3D_default_instance_);
}
inline const ::DTCC::Surface3D& SurfaceField3D::surface() const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceField3D.surface)
  return _internal_surface();
}
inline void SurfaceField3D::unsafe_arena_set_allocated_surface(
    ::DTCC::Surface3D* surface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surface_);
  }
  _impl_.surface_ = surface;
  if (surface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.SurfaceField3D.surface)
}
inline ::DTCC::Surface3D* SurfaceField3D::release_surface() {
  
  ::DTCC::Surface3D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Surface3D* SurfaceField3D::unsafe_arena_release_surface() {
  // @@protoc_insertion_point(field_release:DTCC.SurfaceField3D.surface)
  
  ::DTCC::Surface3D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
  return temp;
}
inline ::DTCC::Surface3D* SurfaceField3D::_internal_mutable_surface() {
  
  if (_impl_.surface_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Surface3D>(GetArenaForAllocation());
    _impl_.surface_ = p;
  }
  return _impl_.surface_;
}
inline ::DTCC::Surface3D* SurfaceField3D::mutable_surface() {
  ::DTCC::Surface3D* _msg = _internal_mutable_surface();
  // @@protoc_insertion_point(field_mutable:DTCC.SurfaceField3D.surface)
  return _msg;
}
inline void SurfaceField3D::set_allocated_surface(::DTCC::Surface3D* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.surface_;
  }
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(surface);
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:DTCC.SurfaceField3D.surface)
}

// repeated float values = 2;
inline int SurfaceField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SurfaceField3D::values_size() const {
  return _internal_values_size();
}
inline void SurfaceField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float SurfaceField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float SurfaceField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceField3D.values)
  return _internal_values(index);
}
inline void SurfaceField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.SurfaceField3D.values)
}
inline void SurfaceField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void SurfaceField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.SurfaceField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.SurfaceField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.SurfaceField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SurfaceVectorField2D

// .DTCC.Surface2D surface = 1;
inline bool SurfaceVectorField2D::_internal_has_surface() const {
  return this != internal_default_instance() && _impl_.surface_ != nullptr;
}
inline bool SurfaceVectorField2D::has_surface() const {
  return _internal_has_surface();
}
inline void SurfaceVectorField2D::clear_surface() {
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
}
inline const ::DTCC::Surface2D& SurfaceVectorField2D::_internal_surface() const {
  const ::DTCC::Surface2D* p = _impl_.surface_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Surface2D&>(
      ::DTCC::_Surface2D_default_instance_);
}
inline const ::DTCC::Surface2D& SurfaceVectorField2D::surface() const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceVectorField2D.surface)
  return _internal_surface();
}
inline void SurfaceVectorField2D::unsafe_arena_set_allocated_surface(
    ::DTCC::Surface2D* surface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surface_);
  }
  _impl_.surface_ = surface;
  if (surface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.SurfaceVectorField2D.surface)
}
inline ::DTCC::Surface2D* SurfaceVectorField2D::release_surface() {
  
  ::DTCC::Surface2D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Surface2D* SurfaceVectorField2D::unsafe_arena_release_surface() {
  // @@protoc_insertion_point(field_release:DTCC.SurfaceVectorField2D.surface)
  
  ::DTCC::Surface2D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
  return temp;
}
inline ::DTCC::Surface2D* SurfaceVectorField2D::_internal_mutable_surface() {
  
  if (_impl_.surface_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Surface2D>(GetArenaForAllocation());
    _impl_.surface_ = p;
  }
  return _impl_.surface_;
}
inline ::DTCC::Surface2D* SurfaceVectorField2D::mutable_surface() {
  ::DTCC::Surface2D* _msg = _internal_mutable_surface();
  // @@protoc_insertion_point(field_mutable:DTCC.SurfaceVectorField2D.surface)
  return _msg;
}
inline void SurfaceVectorField2D::set_allocated_surface(::DTCC::Surface2D* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.surface_;
  }
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(surface);
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:DTCC.SurfaceVectorField2D.surface)
}

// repeated float values = 2;
inline int SurfaceVectorField2D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SurfaceVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void SurfaceVectorField2D::clear_values() {
  _impl_.values_.Clear();
}
inline float SurfaceVectorField2D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float SurfaceVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceVectorField2D.values)
  return _internal_values(index);
}
inline void SurfaceVectorField2D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.SurfaceVectorField2D.values)
}
inline void SurfaceVectorField2D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void SurfaceVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.SurfaceVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceVectorField2D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.SurfaceVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceVectorField2D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.SurfaceVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SurfaceVectorField3D

// .DTCC.Surface3D surface = 1;
inline bool SurfaceVectorField3D::_internal_has_surface() const {
  return this != internal_default_instance() && _impl_.surface_ != nullptr;
}
inline bool SurfaceVectorField3D::has_surface() const {
  return _internal_has_surface();
}
inline void SurfaceVectorField3D::clear_surface() {
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
}
inline const ::DTCC::Surface3D& SurfaceVectorField3D::_internal_surface() const {
  const ::DTCC::Surface3D* p = _impl_.surface_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Surface3D&>(
      ::DTCC::_Surface3D_default_instance_);
}
inline const ::DTCC::Surface3D& SurfaceVectorField3D::surface() const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceVectorField3D.surface)
  return _internal_surface();
}
inline void SurfaceVectorField3D::unsafe_arena_set_allocated_surface(
    ::DTCC::Surface3D* surface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surface_);
  }
  _impl_.surface_ = surface;
  if (surface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.SurfaceVectorField3D.surface)
}
inline ::DTCC::Surface3D* SurfaceVectorField3D::release_surface() {
  
  ::DTCC::Surface3D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Surface3D* SurfaceVectorField3D::unsafe_arena_release_surface() {
  // @@protoc_insertion_point(field_release:DTCC.SurfaceVectorField3D.surface)
  
  ::DTCC::Surface3D* temp = _impl_.surface_;
  _impl_.surface_ = nullptr;
  return temp;
}
inline ::DTCC::Surface3D* SurfaceVectorField3D::_internal_mutable_surface() {
  
  if (_impl_.surface_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Surface3D>(GetArenaForAllocation());
    _impl_.surface_ = p;
  }
  return _impl_.surface_;
}
inline ::DTCC::Surface3D* SurfaceVectorField3D::mutable_surface() {
  ::DTCC::Surface3D* _msg = _internal_mutable_surface();
  // @@protoc_insertion_point(field_mutable:DTCC.SurfaceVectorField3D.surface)
  return _msg;
}
inline void SurfaceVectorField3D::set_allocated_surface(::DTCC::Surface3D* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.surface_;
  }
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(surface);
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:DTCC.SurfaceVectorField3D.surface)
}

// repeated float values = 2;
inline int SurfaceVectorField3D::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SurfaceVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void SurfaceVectorField3D::clear_values() {
  _impl_.values_.Clear();
}
inline float SurfaceVectorField3D::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float SurfaceVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.SurfaceVectorField3D.values)
  return _internal_values(index);
}
inline void SurfaceVectorField3D::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.SurfaceVectorField3D.values)
}
inline void SurfaceVectorField3D::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void SurfaceVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.SurfaceVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceVectorField3D::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SurfaceVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.SurfaceVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceVectorField3D::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SurfaceVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.SurfaceVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PointCloud

// repeated .DTCC.Vector3D points = 1;
inline int PointCloud::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  _impl_.points_.Clear();
}
inline ::DTCC::Vector3D* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.points)
  return &_impl_.points_;
}
inline const ::DTCC::Vector3D& PointCloud::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::DTCC::Vector3D& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.points)
  return _internal_points(index);
}
inline ::DTCC::Vector3D* PointCloud::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::DTCC::Vector3D* PointCloud::add_points() {
  ::DTCC::Vector3D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.points)
  return _impl_.points_;
}

// .DTCC.BoundingBox2D bounds = 2;
inline bool PointCloud::_internal_has_bounds() const {
  return this != internal_default_instance() && _impl_.bounds_ != nullptr;
}
inline bool PointCloud::has_bounds() const {
  return _internal_has_bounds();
}
inline void PointCloud::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && _impl_.bounds_ != nullptr) {
    delete _impl_.bounds_;
  }
  _impl_.bounds_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& PointCloud::_internal_bounds() const {
  const ::DTCC::BoundingBox2D* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox2D&>(
      ::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& PointCloud::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.bounds)
  return _internal_bounds();
}
inline void PointCloud::unsafe_arena_set_allocated_bounds(
    ::DTCC::BoundingBox2D* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.bounds)
}
inline ::DTCC::BoundingBox2D* PointCloud::release_bounds() {
  
  ::DTCC::BoundingBox2D* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox2D* PointCloud::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.bounds)
  
  ::DTCC::BoundingBox2D* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* PointCloud::_internal_mutable_bounds() {
  
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArenaForAllocation());
    _impl_.bounds_ = p;
  }
  return _impl_.bounds_;
}
inline ::DTCC::BoundingBox2D* PointCloud::mutable_bounds() {
  ::DTCC::BoundingBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.bounds)
  return _msg;
}
inline void PointCloud::set_allocated_bounds(::DTCC::BoundingBox2D* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.bounds)
}

// repeated uint32 classification = 3;
inline int PointCloud::_internal_classification_size() const {
  return _impl_.classification_.size();
}
inline int PointCloud::classification_size() const {
  return _internal_classification_size();
}
inline void PointCloud::clear_classification() {
  _impl_.classification_.Clear();
}
inline uint32_t PointCloud::_internal_classification(int index) const {
  return _impl_.classification_.Get(index);
}
inline uint32_t PointCloud::classification(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.classification)
  return _internal_classification(index);
}
inline void PointCloud::set_classification(int index, uint32_t value) {
  _impl_.classification_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.classification)
}
inline void PointCloud::_internal_add_classification(uint32_t value) {
  _impl_.classification_.Add(value);
}
inline void PointCloud::add_classification(uint32_t value) {
  _internal_add_classification(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.classification)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::_internal_classification() const {
  return _impl_.classification_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::classification() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.classification)
  return _internal_classification();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::_internal_mutable_classification() {
  return &_impl_.classification_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::mutable_classification() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.classification)
  return _internal_mutable_classification();
}

// repeated uint32 intensity = 4;
inline int PointCloud::_internal_intensity_size() const {
  return _impl_.intensity_.size();
}
inline int PointCloud::intensity_size() const {
  return _internal_intensity_size();
}
inline void PointCloud::clear_intensity() {
  _impl_.intensity_.Clear();
}
inline uint32_t PointCloud::_internal_intensity(int index) const {
  return _impl_.intensity_.Get(index);
}
inline uint32_t PointCloud::intensity(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.intensity)
  return _internal_intensity(index);
}
inline void PointCloud::set_intensity(int index, uint32_t value) {
  _impl_.intensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.intensity)
}
inline void PointCloud::_internal_add_intensity(uint32_t value) {
  _impl_.intensity_.Add(value);
}
inline void PointCloud::add_intensity(uint32_t value) {
  _internal_add_intensity(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.intensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::_internal_intensity() const {
  return _impl_.intensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::intensity() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.intensity)
  return _internal_intensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::_internal_mutable_intensity() {
  return &_impl_.intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.intensity)
  return _internal_mutable_intensity();
}

// repeated uint32 returnNumber = 5;
inline int PointCloud::_internal_returnnumber_size() const {
  return _impl_.returnnumber_.size();
}
inline int PointCloud::returnnumber_size() const {
  return _internal_returnnumber_size();
}
inline void PointCloud::clear_returnnumber() {
  _impl_.returnnumber_.Clear();
}
inline uint32_t PointCloud::_internal_returnnumber(int index) const {
  return _impl_.returnnumber_.Get(index);
}
inline uint32_t PointCloud::returnnumber(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.returnNumber)
  return _internal_returnnumber(index);
}
inline void PointCloud::set_returnnumber(int index, uint32_t value) {
  _impl_.returnnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.returnNumber)
}
inline void PointCloud::_internal_add_returnnumber(uint32_t value) {
  _impl_.returnnumber_.Add(value);
}
inline void PointCloud::add_returnnumber(uint32_t value) {
  _internal_add_returnnumber(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.returnNumber)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::_internal_returnnumber() const {
  return _impl_.returnnumber_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::returnnumber() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.returnNumber)
  return _internal_returnnumber();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::_internal_mutable_returnnumber() {
  return &_impl_.returnnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::mutable_returnnumber() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.returnNumber)
  return _internal_mutable_returnnumber();
}

// repeated uint32 numReturns = 6;
inline int PointCloud::_internal_numreturns_size() const {
  return _impl_.numreturns_.size();
}
inline int PointCloud::numreturns_size() const {
  return _internal_numreturns_size();
}
inline void PointCloud::clear_numreturns() {
  _impl_.numreturns_.Clear();
}
inline uint32_t PointCloud::_internal_numreturns(int index) const {
  return _impl_.numreturns_.Get(index);
}
inline uint32_t PointCloud::numreturns(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.numReturns)
  return _internal_numreturns(index);
}
inline void PointCloud::set_numreturns(int index, uint32_t value) {
  _impl_.numreturns_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.numReturns)
}
inline void PointCloud::_internal_add_numreturns(uint32_t value) {
  _impl_.numreturns_.Add(value);
}
inline void PointCloud::add_numreturns(uint32_t value) {
  _internal_add_numreturns(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.numReturns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::_internal_numreturns() const {
  return _impl_.numreturns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::numreturns() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.numReturns)
  return _internal_numreturns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::_internal_mutable_numreturns() {
  return &_impl_.numreturns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::mutable_numreturns() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.numReturns)
  return _internal_mutable_numreturns();
}

// repeated uint32 usedClassifications = 7;
inline int PointCloud::_internal_usedclassifications_size() const {
  return _impl_.usedclassifications_.size();
}
inline int PointCloud::usedclassifications_size() const {
  return _internal_usedclassifications_size();
}
inline void PointCloud::clear_usedclassifications() {
  _impl_.usedclassifications_.Clear();
}
inline uint32_t PointCloud::_internal_usedclassifications(int index) const {
  return _impl_.usedclassifications_.Get(index);
}
inline uint32_t PointCloud::usedclassifications(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.usedClassifications)
  return _internal_usedclassifications(index);
}
inline void PointCloud::set_usedclassifications(int index, uint32_t value) {
  _impl_.usedclassifications_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.usedClassifications)
}
inline void PointCloud::_internal_add_usedclassifications(uint32_t value) {
  _impl_.usedclassifications_.Add(value);
}
inline void PointCloud::add_usedclassifications(uint32_t value) {
  _internal_add_usedclassifications(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.usedClassifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::_internal_usedclassifications() const {
  return _impl_.usedclassifications_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PointCloud::usedclassifications() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.usedClassifications)
  return _internal_usedclassifications();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::_internal_mutable_usedclassifications() {
  return &_impl_.usedclassifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PointCloud::mutable_usedclassifications() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.usedClassifications)
  return _internal_mutable_usedclassifications();
}

// .DTCC.Georeference georeference = 8;
inline bool PointCloud::_internal_has_georeference() const {
  return this != internal_default_instance() && _impl_.georeference_ != nullptr;
}
inline bool PointCloud::has_georeference() const {
  return _internal_has_georeference();
}
inline void PointCloud::clear_georeference() {
  if (GetArenaForAllocation() == nullptr && _impl_.georeference_ != nullptr) {
    delete _impl_.georeference_;
  }
  _impl_.georeference_ = nullptr;
}
inline const ::DTCC::Georeference& PointCloud::_internal_georeference() const {
  const ::DTCC::Georeference* p = _impl_.georeference_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georeference&>(
      ::DTCC::_Georeference_default_instance_);
}
inline const ::DTCC::Georeference& PointCloud::georeference() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.georeference)
  return _internal_georeference();
}
inline void PointCloud::unsafe_arena_set_allocated_georeference(
    ::DTCC::Georeference* georeference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.georeference_);
  }
  _impl_.georeference_ = georeference;
  if (georeference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.georeference)
}
inline ::DTCC::Georeference* PointCloud::release_georeference() {
  
  ::DTCC::Georeference* temp = _impl_.georeference_;
  _impl_.georeference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georeference* PointCloud::unsafe_arena_release_georeference() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.georeference)
  
  ::DTCC::Georeference* temp = _impl_.georeference_;
  _impl_.georeference_ = nullptr;
  return temp;
}
inline ::DTCC::Georeference* PointCloud::_internal_mutable_georeference() {
  
  if (_impl_.georeference_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georeference>(GetArenaForAllocation());
    _impl_.georeference_ = p;
  }
  return _impl_.georeference_;
}
inline ::DTCC::Georeference* PointCloud::mutable_georeference() {
  ::DTCC::Georeference* _msg = _internal_mutable_georeference();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.georeference)
  return _msg;
}
inline void PointCloud::set_allocated_georeference(::DTCC::Georeference* georeference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.georeference_;
  }
  if (georeference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(georeference);
    if (message_arena != submessage_arena) {
      georeference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georeference, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.georeference_ = georeference;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.georeference)
}

// -------------------------------------------------------------------

// Building

// string uuid = 1;
inline void Building::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& Building::uuid() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Building::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Building.uuid)
}
inline std::string* Building::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.uuid)
  return _s;
}
inline const std::string& Building::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void Building::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Building::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* Building::release_uuid() {
  // @@protoc_insertion_point(field_release:DTCC.Building.uuid)
  return _impl_.uuid_.Release();
}
inline void Building::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.uuid)
}

// .DTCC.Polygon footPrint = 2;
inline bool Building::_internal_has_footprint() const {
  return this != internal_default_instance() && _impl_.footprint_ != nullptr;
}
inline bool Building::has_footprint() const {
  return _internal_has_footprint();
}
inline void Building::clear_footprint() {
  if (GetArenaForAllocation() == nullptr && _impl_.footprint_ != nullptr) {
    delete _impl_.footprint_;
  }
  _impl_.footprint_ = nullptr;
}
inline const ::DTCC::Polygon& Building::_internal_footprint() const {
  const ::DTCC::Polygon* p = _impl_.footprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Polygon&>(
      ::DTCC::_Polygon_default_instance_);
}
inline const ::DTCC::Polygon& Building::footprint() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.footPrint)
  return _internal_footprint();
}
inline void Building::unsafe_arena_set_allocated_footprint(
    ::DTCC::Polygon* footprint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.footprint_);
  }
  _impl_.footprint_ = footprint;
  if (footprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.footPrint)
}
inline ::DTCC::Polygon* Building::release_footprint() {
  
  ::DTCC::Polygon* temp = _impl_.footprint_;
  _impl_.footprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Polygon* Building::unsafe_arena_release_footprint() {
  // @@protoc_insertion_point(field_release:DTCC.Building.footPrint)
  
  ::DTCC::Polygon* temp = _impl_.footprint_;
  _impl_.footprint_ = nullptr;
  return temp;
}
inline ::DTCC::Polygon* Building::_internal_mutable_footprint() {
  
  if (_impl_.footprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Polygon>(GetArenaForAllocation());
    _impl_.footprint_ = p;
  }
  return _impl_.footprint_;
}
inline ::DTCC::Polygon* Building::mutable_footprint() {
  ::DTCC::Polygon* _msg = _internal_mutable_footprint();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.footPrint)
  return _msg;
}
inline void Building::set_allocated_footprint(::DTCC::Polygon* footprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.footprint_;
  }
  if (footprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(footprint);
    if (message_arena != submessage_arena) {
      footprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footprint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.footprint_ = footprint;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.footPrint)
}

// double height = 3;
inline void Building::clear_height() {
  _impl_.height_ = 0;
}
inline double Building::_internal_height() const {
  return _impl_.height_;
}
inline double Building::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.height)
  return _internal_height();
}
inline void Building::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void Building::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.height)
}

// double groundHeight = 4;
inline void Building::clear_groundheight() {
  _impl_.groundheight_ = 0;
}
inline double Building::_internal_groundheight() const {
  return _impl_.groundheight_;
}
inline double Building::groundheight() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.groundHeight)
  return _internal_groundheight();
}
inline void Building::_internal_set_groundheight(double value) {
  
  _impl_.groundheight_ = value;
}
inline void Building::set_groundheight(double value) {
  _internal_set_groundheight(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.groundHeight)
}

// .DTCC.PointCloud roofpoints = 5;
inline bool Building::_internal_has_roofpoints() const {
  return this != internal_default_instance() && _impl_.roofpoints_ != nullptr;
}
inline bool Building::has_roofpoints() const {
  return _internal_has_roofpoints();
}
inline void Building::clear_roofpoints() {
  if (GetArenaForAllocation() == nullptr && _impl_.roofpoints_ != nullptr) {
    delete _impl_.roofpoints_;
  }
  _impl_.roofpoints_ = nullptr;
}
inline const ::DTCC::PointCloud& Building::_internal_roofpoints() const {
  const ::DTCC::PointCloud* p = _impl_.roofpoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::PointCloud&>(
      ::DTCC::_PointCloud_default_instance_);
}
inline const ::DTCC::PointCloud& Building::roofpoints() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.roofpoints)
  return _internal_roofpoints();
}
inline void Building::unsafe_arena_set_allocated_roofpoints(
    ::DTCC::PointCloud* roofpoints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roofpoints_);
  }
  _impl_.roofpoints_ = roofpoints;
  if (roofpoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.roofpoints)
}
inline ::DTCC::PointCloud* Building::release_roofpoints() {
  
  ::DTCC::PointCloud* temp = _impl_.roofpoints_;
  _impl_.roofpoints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::PointCloud* Building::unsafe_arena_release_roofpoints() {
  // @@protoc_insertion_point(field_release:DTCC.Building.roofpoints)
  
  ::DTCC::PointCloud* temp = _impl_.roofpoints_;
  _impl_.roofpoints_ = nullptr;
  return temp;
}
inline ::DTCC::PointCloud* Building::_internal_mutable_roofpoints() {
  
  if (_impl_.roofpoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::PointCloud>(GetArenaForAllocation());
    _impl_.roofpoints_ = p;
  }
  return _impl_.roofpoints_;
}
inline ::DTCC::PointCloud* Building::mutable_roofpoints() {
  ::DTCC::PointCloud* _msg = _internal_mutable_roofpoints();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.roofpoints)
  return _msg;
}
inline void Building::set_allocated_roofpoints(::DTCC::PointCloud* roofpoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roofpoints_;
  }
  if (roofpoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roofpoints);
    if (message_arena != submessage_arena) {
      roofpoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roofpoints, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roofpoints_ = roofpoints;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.roofpoints)
}

// uint64 error = 6;
inline void Building::clear_error() {
  _impl_.error_ = uint64_t{0u};
}
inline uint64_t Building::_internal_error() const {
  return _impl_.error_;
}
inline uint64_t Building::error() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.error)
  return _internal_error();
}
inline void Building::_internal_set_error(uint64_t value) {
  
  _impl_.error_ = value;
}
inline void Building::set_error(uint64_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.error)
}

// -------------------------------------------------------------------

// CityModel

// repeated .DTCC.Building buildings = 1;
inline int CityModel::_internal_buildings_size() const {
  return _impl_.buildings_.size();
}
inline int CityModel::buildings_size() const {
  return _internal_buildings_size();
}
inline void CityModel::clear_buildings() {
  _impl_.buildings_.Clear();
}
inline ::DTCC::Building* CityModel::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.buildings)
  return _impl_.buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
CityModel::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.CityModel.buildings)
  return &_impl_.buildings_;
}
inline const ::DTCC::Building& CityModel::_internal_buildings(int index) const {
  return _impl_.buildings_.Get(index);
}
inline const ::DTCC::Building& CityModel::buildings(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.buildings)
  return _internal_buildings(index);
}
inline ::DTCC::Building* CityModel::_internal_add_buildings() {
  return _impl_.buildings_.Add();
}
inline ::DTCC::Building* CityModel::add_buildings() {
  ::DTCC::Building* _add = _internal_add_buildings();
  // @@protoc_insertion_point(field_add:DTCC.CityModel.buildings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
CityModel::buildings() const {
  // @@protoc_insertion_point(field_list:DTCC.CityModel.buildings)
  return _impl_.buildings_;
}

// .DTCC.Georeference georeference = 3;
inline bool CityModel::_internal_has_georeference() const {
  return this != internal_default_instance() && _impl_.georeference_ != nullptr;
}
inline bool CityModel::has_georeference() const {
  return _internal_has_georeference();
}
inline void CityModel::clear_georeference() {
  if (GetArenaForAllocation() == nullptr && _impl_.georeference_ != nullptr) {
    delete _impl_.georeference_;
  }
  _impl_.georeference_ = nullptr;
}
inline const ::DTCC::Georeference& CityModel::_internal_georeference() const {
  const ::DTCC::Georeference* p = _impl_.georeference_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georeference&>(
      ::DTCC::_Georeference_default_instance_);
}
inline const ::DTCC::Georeference& CityModel::georeference() const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.georeference)
  return _internal_georeference();
}
inline void CityModel::unsafe_arena_set_allocated_georeference(
    ::DTCC::Georeference* georeference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.georeference_);
  }
  _impl_.georeference_ = georeference;
  if (georeference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.CityModel.georeference)
}
inline ::DTCC::Georeference* CityModel::release_georeference() {
  
  ::DTCC::Georeference* temp = _impl_.georeference_;
  _impl_.georeference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georeference* CityModel::unsafe_arena_release_georeference() {
  // @@protoc_insertion_point(field_release:DTCC.CityModel.georeference)
  
  ::DTCC::Georeference* temp = _impl_.georeference_;
  _impl_.georeference_ = nullptr;
  return temp;
}
inline ::DTCC::Georeference* CityModel::_internal_mutable_georeference() {
  
  if (_impl_.georeference_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georeference>(GetArenaForAllocation());
    _impl_.georeference_ = p;
  }
  return _impl_.georeference_;
}
inline ::DTCC::Georeference* CityModel::mutable_georeference() {
  ::DTCC::Georeference* _msg = _internal_mutable_georeference();
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.georeference)
  return _msg;
}
inline void CityModel::set_allocated_georeference(::DTCC::Georeference* georeference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.georeference_;
  }
  if (georeference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(georeference);
    if (message_arena != submessage_arena) {
      georeference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georeference, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.georeference_ = georeference;
  // @@protoc_insertion_point(field_set_allocated:DTCC.CityModel.georeference)
}

// -------------------------------------------------------------------

// Georeference

// string crs = 1;
inline void Georeference::clear_crs() {
  _impl_.crs_.ClearToEmpty();
}
inline const std::string& Georeference::crs() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.crs)
  return _internal_crs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Georeference::set_crs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.crs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Georeference.crs)
}
inline std::string* Georeference::mutable_crs() {
  std::string* _s = _internal_mutable_crs();
  // @@protoc_insertion_point(field_mutable:DTCC.Georeference.crs)
  return _s;
}
inline const std::string& Georeference::_internal_crs() const {
  return _impl_.crs_.Get();
}
inline void Georeference::_internal_set_crs(const std::string& value) {
  
  _impl_.crs_.Set(value, GetArenaForAllocation());
}
inline std::string* Georeference::_internal_mutable_crs() {
  
  return _impl_.crs_.Mutable(GetArenaForAllocation());
}
inline std::string* Georeference::release_crs() {
  // @@protoc_insertion_point(field_release:DTCC.Georeference.crs)
  return _impl_.crs_.Release();
}
inline void Georeference::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  _impl_.crs_.SetAllocated(crs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crs_.IsDefault()) {
    _impl_.crs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DTCC.Georeference.crs)
}

// int32 epsg = 2;
inline void Georeference::clear_epsg() {
  _impl_.epsg_ = 0;
}
inline int32_t Georeference::_internal_epsg() const {
  return _impl_.epsg_;
}
inline int32_t Georeference::epsg() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.epsg)
  return _internal_epsg();
}
inline void Georeference::_internal_set_epsg(int32_t value) {
  
  _impl_.epsg_ = value;
}
inline void Georeference::set_epsg(int32_t value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.epsg)
}

// double x0 = 3;
inline void Georeference::clear_x0() {
  _impl_.x0_ = 0;
}
inline double Georeference::_internal_x0() const {
  return _impl_.x0_;
}
inline double Georeference::x0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.x0)
  return _internal_x0();
}
inline void Georeference::_internal_set_x0(double value) {
  
  _impl_.x0_ = value;
}
inline void Georeference::set_x0(double value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.x0)
}

// double y0 = 4;
inline void Georeference::clear_y0() {
  _impl_.y0_ = 0;
}
inline double Georeference::_internal_y0() const {
  return _impl_.y0_;
}
inline double Georeference::y0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.y0)
  return _internal_y0();
}
inline void Georeference::_internal_set_y0(double value) {
  
  _impl_.y0_ = value;
}
inline void Georeference::set_y0(double value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.y0)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTCC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fdtcc_2eproto
