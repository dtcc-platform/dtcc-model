// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtcc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace DTCC {
class BoundingBox2D;
struct BoundingBox2DDefaultTypeInternal;
extern BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
class BoundingBox3D;
struct BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class Building;
struct BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
class CityModel;
struct CityModelDefaultTypeInternal;
extern CityModelDefaultTypeInternal _CityModel_default_instance_;
class Georeference;
struct GeoreferenceDefaultTypeInternal;
extern GeoreferenceDefaultTypeInternal _Georeference_default_instance_;
class Grid2D;
struct Grid2DDefaultTypeInternal;
extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
class Grid3D;
struct Grid3DDefaultTypeInternal;
extern Grid3DDefaultTypeInternal _Grid3D_default_instance_;
class GridField2D;
struct GridField2DDefaultTypeInternal;
extern GridField2DDefaultTypeInternal _GridField2D_default_instance_;
class GridField3D;
struct GridField3DDefaultTypeInternal;
extern GridField3DDefaultTypeInternal _GridField3D_default_instance_;
class GridVectorField2D;
struct GridVectorField2DDefaultTypeInternal;
extern GridVectorField2DDefaultTypeInternal _GridVectorField2D_default_instance_;
class GridVectorField3D;
struct GridVectorField3DDefaultTypeInternal;
extern GridVectorField3DDefaultTypeInternal _GridVectorField3D_default_instance_;
class LineString;
struct LineStringDefaultTypeInternal;
extern LineStringDefaultTypeInternal _LineString_default_instance_;
class LineString3D;
struct LineString3DDefaultTypeInternal;
extern LineString3DDefaultTypeInternal _LineString3D_default_instance_;
class LinearRing;
struct LinearRingDefaultTypeInternal;
extern LinearRingDefaultTypeInternal _LinearRing_default_instance_;
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class MeshField;
struct MeshFieldDefaultTypeInternal;
extern MeshFieldDefaultTypeInternal _MeshField_default_instance_;
class MeshVectorField;
struct MeshVectorFieldDefaultTypeInternal;
extern MeshVectorFieldDefaultTypeInternal _MeshVectorField_default_instance_;
class MultiPoint;
struct MultiPointDefaultTypeInternal;
extern MultiPointDefaultTypeInternal _MultiPoint_default_instance_;
class MultiPoint3D;
struct MultiPoint3DDefaultTypeInternal;
extern MultiPoint3DDefaultTypeInternal _MultiPoint3D_default_instance_;
class MultiPolygon;
struct MultiPolygonDefaultTypeInternal;
extern MultiPolygonDefaultTypeInternal _MultiPolygon_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Tetrahedron;
struct TetrahedronDefaultTypeInternal;
extern TetrahedronDefaultTypeInternal _Tetrahedron_default_instance_;
class Triangle;
struct TriangleDefaultTypeInternal;
extern TriangleDefaultTypeInternal _Triangle_default_instance_;
class Vector2D;
struct Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
class VolumeMesh;
struct VolumeMeshDefaultTypeInternal;
extern VolumeMeshDefaultTypeInternal _VolumeMesh_default_instance_;
class VolumeMeshField;
struct VolumeMeshFieldDefaultTypeInternal;
extern VolumeMeshFieldDefaultTypeInternal _VolumeMeshField_default_instance_;
class VolumeVectorField;
struct VolumeVectorFieldDefaultTypeInternal;
extern VolumeVectorFieldDefaultTypeInternal _VolumeVectorField_default_instance_;
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> ::DTCC::BoundingBox2D* Arena::CreateMaybeMessage<::DTCC::BoundingBox2D>(Arena*);
template<> ::DTCC::BoundingBox3D* Arena::CreateMaybeMessage<::DTCC::BoundingBox3D>(Arena*);
template<> ::DTCC::Building* Arena::CreateMaybeMessage<::DTCC::Building>(Arena*);
template<> ::DTCC::CityModel* Arena::CreateMaybeMessage<::DTCC::CityModel>(Arena*);
template<> ::DTCC::Georeference* Arena::CreateMaybeMessage<::DTCC::Georeference>(Arena*);
template<> ::DTCC::Grid2D* Arena::CreateMaybeMessage<::DTCC::Grid2D>(Arena*);
template<> ::DTCC::Grid3D* Arena::CreateMaybeMessage<::DTCC::Grid3D>(Arena*);
template<> ::DTCC::GridField2D* Arena::CreateMaybeMessage<::DTCC::GridField2D>(Arena*);
template<> ::DTCC::GridField3D* Arena::CreateMaybeMessage<::DTCC::GridField3D>(Arena*);
template<> ::DTCC::GridVectorField2D* Arena::CreateMaybeMessage<::DTCC::GridVectorField2D>(Arena*);
template<> ::DTCC::GridVectorField3D* Arena::CreateMaybeMessage<::DTCC::GridVectorField3D>(Arena*);
template<> ::DTCC::LineString* Arena::CreateMaybeMessage<::DTCC::LineString>(Arena*);
template<> ::DTCC::LineString3D* Arena::CreateMaybeMessage<::DTCC::LineString3D>(Arena*);
template<> ::DTCC::LinearRing* Arena::CreateMaybeMessage<::DTCC::LinearRing>(Arena*);
template<> ::DTCC::Mesh* Arena::CreateMaybeMessage<::DTCC::Mesh>(Arena*);
template<> ::DTCC::MeshField* Arena::CreateMaybeMessage<::DTCC::MeshField>(Arena*);
template<> ::DTCC::MeshVectorField* Arena::CreateMaybeMessage<::DTCC::MeshVectorField>(Arena*);
template<> ::DTCC::MultiPoint* Arena::CreateMaybeMessage<::DTCC::MultiPoint>(Arena*);
template<> ::DTCC::MultiPoint3D* Arena::CreateMaybeMessage<::DTCC::MultiPoint3D>(Arena*);
template<> ::DTCC::MultiPolygon* Arena::CreateMaybeMessage<::DTCC::MultiPolygon>(Arena*);
template<> ::DTCC::PointCloud* Arena::CreateMaybeMessage<::DTCC::PointCloud>(Arena*);
template<> ::DTCC::Polygon* Arena::CreateMaybeMessage<::DTCC::Polygon>(Arena*);
template<> ::DTCC::Tetrahedron* Arena::CreateMaybeMessage<::DTCC::Tetrahedron>(Arena*);
template<> ::DTCC::Triangle* Arena::CreateMaybeMessage<::DTCC::Triangle>(Arena*);
template<> ::DTCC::Vector2D* Arena::CreateMaybeMessage<::DTCC::Vector2D>(Arena*);
template<> ::DTCC::Vector3D* Arena::CreateMaybeMessage<::DTCC::Vector3D>(Arena*);
template<> ::DTCC::VolumeMesh* Arena::CreateMaybeMessage<::DTCC::VolumeMesh>(Arena*);
template<> ::DTCC::VolumeMeshField* Arena::CreateMaybeMessage<::DTCC::VolumeMeshField>(Arena*);
template<> ::DTCC::VolumeVectorField* Arena::CreateMaybeMessage<::DTCC::VolumeVectorField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DTCC {

// ===================================================================

class Vector2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {}
  ~Vector2D() override;
  explicit constexpr Vector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return new Vector2D();
  }

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Vector3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  explicit constexpr Vector3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return new Vector3D();
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector3D";
  }
  protected:
  explicit Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Triangle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Triangle) */ {
 public:
  inline Triangle() : Triangle(nullptr) {}
  ~Triangle() override;
  explicit constexpr Triangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Triangle(const Triangle& from);
  Triangle(Triangle&& from) noexcept
    : Triangle() {
    *this = ::std::move(from);
  }

  inline Triangle& operator=(const Triangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Triangle& operator=(Triangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Triangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Triangle* internal_default_instance() {
    return reinterpret_cast<const Triangle*>(
               &_Triangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Triangle& a, Triangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Triangle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Triangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Triangle* New() const final {
    return new Triangle();
  }

  Triangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Triangle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Triangle& from);
  void MergeFrom(const Triangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Triangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Triangle";
  }
  protected:
  explicit Triangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
  };
  // int32 v0 = 1;
  void clear_v0();
  ::PROTOBUF_NAMESPACE_ID::int32 v0() const;
  void set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v0() const;
  void _internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 v1() const;
  void set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v1() const;
  void _internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  ::PROTOBUF_NAMESPACE_ID::int32 v2() const;
  void set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v2() const;
  void _internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Triangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 v0_;
  ::PROTOBUF_NAMESPACE_ID::int32 v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 v2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Tetrahedron final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Tetrahedron) */ {
 public:
  inline Tetrahedron() : Tetrahedron(nullptr) {}
  ~Tetrahedron() override;
  explicit constexpr Tetrahedron(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tetrahedron(const Tetrahedron& from);
  Tetrahedron(Tetrahedron&& from) noexcept
    : Tetrahedron() {
    *this = ::std::move(from);
  }

  inline Tetrahedron& operator=(const Tetrahedron& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tetrahedron& operator=(Tetrahedron&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Tetrahedron& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tetrahedron* internal_default_instance() {
    return reinterpret_cast<const Tetrahedron*>(
               &_Tetrahedron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tetrahedron& a, Tetrahedron& b) {
    a.Swap(&b);
  }
  inline void Swap(Tetrahedron* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tetrahedron* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tetrahedron* New() const final {
    return new Tetrahedron();
  }

  Tetrahedron* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tetrahedron>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Tetrahedron& from);
  void MergeFrom(const Tetrahedron& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tetrahedron* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Tetrahedron";
  }
  protected:
  explicit Tetrahedron(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
    kV3FieldNumber = 4,
  };
  // int32 v0 = 1;
  void clear_v0();
  ::PROTOBUF_NAMESPACE_ID::int32 v0() const;
  void set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v0() const;
  void _internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 v1() const;
  void set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v1() const;
  void _internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  ::PROTOBUF_NAMESPACE_ID::int32 v2() const;
  void set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v2() const;
  void _internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v3 = 4;
  void clear_v3();
  ::PROTOBUF_NAMESPACE_ID::int32 v3() const;
  void set_v3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v3() const;
  void _internal_set_v3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Tetrahedron)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 v0_;
  ::PROTOBUF_NAMESPACE_ID::int32 v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 v2_;
  ::PROTOBUF_NAMESPACE_ID::int32 v3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox2D) */ {
 public:
  inline BoundingBox2D() : BoundingBox2D(nullptr) {}
  ~BoundingBox2D() override;
  explicit constexpr BoundingBox2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox2D(const BoundingBox2D& from);
  BoundingBox2D(BoundingBox2D&& from) noexcept
    : BoundingBox2D() {
    *this = ::std::move(from);
  }

  inline BoundingBox2D& operator=(const BoundingBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2D& operator=(BoundingBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundingBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox2D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2D*>(
               &_BoundingBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BoundingBox2D& a, BoundingBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox2D* New() const final {
    return new BoundingBox2D();
  }

  BoundingBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoundingBox2D& from);
  void MergeFrom(const BoundingBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox2D";
  }
  protected:
  explicit BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector2D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector2D& p() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Vector2D* release_p();
  ::DTCC::Vector2D* mutable_p();
  void set_allocated_p(::DTCC::Vector2D* p);
  private:
  const ::DTCC::Vector2D& _internal_p() const;
  ::DTCC::Vector2D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector2D* p);
  ::DTCC::Vector2D* unsafe_arena_release_p();

  // .DTCC.Vector2D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector2D& q() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Vector2D* release_q();
  ::DTCC::Vector2D* mutable_q();
  void set_allocated_q(::DTCC::Vector2D* q);
  private:
  const ::DTCC::Vector2D& _internal_q() const;
  ::DTCC::Vector2D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector2D* q);
  ::DTCC::Vector2D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::Vector2D* p_;
  ::DTCC::Vector2D* q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {}
  ~BoundingBox3D() override;
  explicit constexpr BoundingBox3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundingBox3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox3D* New() const final {
    return new BoundingBox3D();
  }

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoundingBox3D& from);
  void MergeFrom(const BoundingBox3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector3D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector3D& p() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Vector3D* release_p();
  ::DTCC::Vector3D* mutable_p();
  void set_allocated_p(::DTCC::Vector3D* p);
  private:
  const ::DTCC::Vector3D& _internal_p() const;
  ::DTCC::Vector3D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector3D* p);
  ::DTCC::Vector3D* unsafe_arena_release_p();

  // .DTCC.Vector3D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector3D& q() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Vector3D* release_q();
  ::DTCC::Vector3D* mutable_q();
  void set_allocated_q(::DTCC::Vector3D* q);
  private:
  const ::DTCC::Vector3D& _internal_q() const;
  ::DTCC::Vector3D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector3D* q);
  ::DTCC::Vector3D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::Vector3D* p_;
  ::DTCC::Vector3D* q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint) */ {
 public:
  inline MultiPoint() : MultiPoint(nullptr) {}
  ~MultiPoint() override;
  explicit constexpr MultiPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint(const MultiPoint& from);
  MultiPoint(MultiPoint&& from) noexcept
    : MultiPoint() {
    *this = ::std::move(from);
  }

  inline MultiPoint& operator=(const MultiPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint& operator=(MultiPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint* internal_default_instance() {
    return reinterpret_cast<const MultiPoint*>(
               &_MultiPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MultiPoint& a, MultiPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPoint* New() const final {
    return new MultiPoint();
  }

  MultiPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint& from);
  void MergeFrom(const MultiPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint";
  }
  protected:
  explicit MultiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_points();
  private:
  const ::DTCC::Vector2D& _internal_points(int index) const;
  ::DTCC::Vector2D* _internal_add_points();
  public:
  const ::DTCC::Vector2D& points(int index) const;
  ::DTCC::Vector2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint3D) */ {
 public:
  inline MultiPoint3D() : MultiPoint3D(nullptr) {}
  ~MultiPoint3D() override;
  explicit constexpr MultiPoint3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint3D(const MultiPoint3D& from);
  MultiPoint3D(MultiPoint3D&& from) noexcept
    : MultiPoint3D() {
    *this = ::std::move(from);
  }

  inline MultiPoint3D& operator=(const MultiPoint3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint3D& operator=(MultiPoint3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint3D* internal_default_instance() {
    return reinterpret_cast<const MultiPoint3D*>(
               &_MultiPoint3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MultiPoint3D& a, MultiPoint3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPoint3D* New() const final {
    return new MultiPoint3D();
  }

  MultiPoint3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPoint3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint3D& from);
  void MergeFrom(const MultiPoint3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint3D";
  }
  protected:
  explicit MultiPoint3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_points();
  private:
  const ::DTCC::Vector3D& _internal_points(int index) const;
  ::DTCC::Vector3D* _internal_add_points();
  public:
  const ::DTCC::Vector3D& points(int index) const;
  ::DTCC::Vector3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString) */ {
 public:
  inline LineString() : LineString(nullptr) {}
  ~LineString() override;
  explicit constexpr LineString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString(const LineString& from);
  LineString(LineString&& from) noexcept
    : LineString() {
    *this = ::std::move(from);
  }

  inline LineString& operator=(const LineString& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString& operator=(LineString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString* internal_default_instance() {
    return reinterpret_cast<const LineString*>(
               &_LineString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LineString& a, LineString& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineString* New() const final {
    return new LineString();
  }

  LineString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString& from);
  void MergeFrom(const LineString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString";
  }
  protected:
  explicit LineString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString3D) */ {
 public:
  inline LineString3D() : LineString3D(nullptr) {}
  ~LineString3D() override;
  explicit constexpr LineString3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString3D(const LineString3D& from);
  LineString3D(LineString3D&& from) noexcept
    : LineString3D() {
    *this = ::std::move(from);
  }

  inline LineString3D& operator=(const LineString3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString3D& operator=(LineString3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString3D* internal_default_instance() {
    return reinterpret_cast<const LineString3D*>(
               &_LineString3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LineString3D& a, LineString3D& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineString3D* New() const final {
    return new LineString3D();
  }

  LineString3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineString3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString3D& from);
  void MergeFrom(const LineString3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString3D";
  }
  protected:
  explicit LineString3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LinearRing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LinearRing) */ {
 public:
  inline LinearRing() : LinearRing(nullptr) {}
  ~LinearRing() override;
  explicit constexpr LinearRing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinearRing(const LinearRing& from);
  LinearRing(LinearRing&& from) noexcept
    : LinearRing() {
    *this = ::std::move(from);
  }

  inline LinearRing& operator=(const LinearRing& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearRing& operator=(LinearRing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinearRing& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearRing* internal_default_instance() {
    return reinterpret_cast<const LinearRing*>(
               &_LinearRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LinearRing& a, LinearRing& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearRing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearRing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearRing* New() const final {
    return new LinearRing();
  }

  LinearRing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearRing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinearRing& from);
  void MergeFrom(const LinearRing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinearRing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LinearRing";
  }
  protected:
  explicit LinearRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LinearRing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return new Polygon();
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolesFieldNumber = 2,
    kShellFieldNumber = 1,
  };
  // repeated .DTCC.LinearRing holes = 2;
  int holes_size() const;
  private:
  int _internal_holes_size() const;
  public:
  void clear_holes();
  ::DTCC::LinearRing* mutable_holes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
      mutable_holes();
  private:
  const ::DTCC::LinearRing& _internal_holes(int index) const;
  ::DTCC::LinearRing* _internal_add_holes();
  public:
  const ::DTCC::LinearRing& holes(int index) const;
  ::DTCC::LinearRing* add_holes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
      holes() const;

  // .DTCC.LinearRing shell = 1;
  bool has_shell() const;
  private:
  bool _internal_has_shell() const;
  public:
  void clear_shell();
  const ::DTCC::LinearRing& shell() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::LinearRing* release_shell();
  ::DTCC::LinearRing* mutable_shell();
  void set_allocated_shell(::DTCC::LinearRing* shell);
  private:
  const ::DTCC::LinearRing& _internal_shell() const;
  ::DTCC::LinearRing* _internal_mutable_shell();
  public:
  void unsafe_arena_set_allocated_shell(
      ::DTCC::LinearRing* shell);
  ::DTCC::LinearRing* unsafe_arena_release_shell();

  // @@protoc_insertion_point(class_scope:DTCC.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing > holes_;
  ::DTCC::LinearRing* shell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPolygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPolygon) */ {
 public:
  inline MultiPolygon() : MultiPolygon(nullptr) {}
  ~MultiPolygon() override;
  explicit constexpr MultiPolygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPolygon(const MultiPolygon& from);
  MultiPolygon(MultiPolygon&& from) noexcept
    : MultiPolygon() {
    *this = ::std::move(from);
  }

  inline MultiPolygon& operator=(const MultiPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPolygon& operator=(MultiPolygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPolygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPolygon* internal_default_instance() {
    return reinterpret_cast<const MultiPolygon*>(
               &_MultiPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MultiPolygon& a, MultiPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPolygon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPolygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPolygon* New() const final {
    return new MultiPolygon();
  }

  MultiPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPolygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPolygon& from);
  void MergeFrom(const MultiPolygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPolygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPolygon";
  }
  protected:
  explicit MultiPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
  };
  // repeated .DTCC.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::DTCC::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
      mutable_polygons();
  private:
  const ::DTCC::Polygon& _internal_polygons(int index) const;
  ::DTCC::Polygon* _internal_add_polygons();
  public:
  const ::DTCC::Polygon& polygons(int index) const;
  ::DTCC::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPolygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon > polygons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Grid2D) */ {
 public:
  inline Grid2D() : Grid2D(nullptr) {}
  ~Grid2D() override;
  explicit constexpr Grid2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid2D(const Grid2D& from);
  Grid2D(Grid2D&& from) noexcept
    : Grid2D() {
    *this = ::std::move(from);
  }

  inline Grid2D& operator=(const Grid2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid2D& operator=(Grid2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Grid2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid2D* internal_default_instance() {
    return reinterpret_cast<const Grid2D*>(
               &_Grid2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Grid2D& a, Grid2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grid2D* New() const final {
    return new Grid2D();
  }

  Grid2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grid2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Grid2D& from);
  void MergeFrom(const Grid2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid2D";
  }
  protected:
  explicit Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kXStepFieldNumber = 4,
    kYStepFieldNumber = 5,
  };
  // .DTCC.BoundingBox2D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox2D& boundingbox() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::BoundingBox2D* release_boundingbox();
  ::DTCC::BoundingBox2D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox);
  private:
  const ::DTCC::BoundingBox2D& _internal_boundingbox() const;
  ::DTCC::BoundingBox2D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox2D* boundingbox);
  ::DTCC::BoundingBox2D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  ::PROTOBUF_NAMESPACE_ID::int32 xsize() const;
  void set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xsize() const;
  void _internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  ::PROTOBUF_NAMESPACE_ID::int32 ysize() const;
  void set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ysize() const;
  void _internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xStep = 4;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 5;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::BoundingBox2D* boundingbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 xsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ysize_;
  float xstep_;
  float ystep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Grid3D) */ {
 public:
  inline Grid3D() : Grid3D(nullptr) {}
  ~Grid3D() override;
  explicit constexpr Grid3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid3D(const Grid3D& from);
  Grid3D(Grid3D&& from) noexcept
    : Grid3D() {
    *this = ::std::move(from);
  }

  inline Grid3D& operator=(const Grid3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid3D& operator=(Grid3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Grid3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid3D* internal_default_instance() {
    return reinterpret_cast<const Grid3D*>(
               &_Grid3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Grid3D& a, Grid3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grid3D* New() const final {
    return new Grid3D();
  }

  Grid3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grid3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Grid3D& from);
  void MergeFrom(const Grid3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid3D";
  }
  protected:
  explicit Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kZSizeFieldNumber = 4,
    kXStepFieldNumber = 5,
    kYStepFieldNumber = 6,
    kZStepFieldNumber = 7,
  };
  // .DTCC.BoundingBox3D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox3D& boundingbox() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::BoundingBox3D* release_boundingbox();
  ::DTCC::BoundingBox3D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox);
  private:
  const ::DTCC::BoundingBox3D& _internal_boundingbox() const;
  ::DTCC::BoundingBox3D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox3D* boundingbox);
  ::DTCC::BoundingBox3D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  ::PROTOBUF_NAMESPACE_ID::int32 xsize() const;
  void set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xsize() const;
  void _internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  ::PROTOBUF_NAMESPACE_ID::int32 ysize() const;
  void set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ysize() const;
  void _internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zSize = 4;
  void clear_zsize();
  ::PROTOBUF_NAMESPACE_ID::int32 zsize() const;
  void set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zsize() const;
  void _internal_set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xStep = 5;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 6;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // float zStep = 7;
  void clear_zstep();
  float zstep() const;
  void set_zstep(float value);
  private:
  float _internal_zstep() const;
  void _internal_set_zstep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::BoundingBox3D* boundingbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 xsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ysize_;
  ::PROTOBUF_NAMESPACE_ID::int32 zsize_;
  float xstep_;
  float ystep_;
  float zstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() override;
  explicit constexpr Mesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return new Mesh();
  }

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh";
  }
  protected:
  explicit Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kFacesFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Vector3D normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::DTCC::Vector3D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_normals();
  private:
  const ::DTCC::Vector3D& _internal_normals(int index) const;
  ::DTCC::Vector3D* _internal_add_normals();
  public:
  const ::DTCC::Vector3D& normals(int index) const;
  ::DTCC::Vector3D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      normals() const;

  // repeated .DTCC.Triangle faces = 3;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::DTCC::Triangle* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Triangle >*
      mutable_faces();
  private:
  const ::DTCC::Triangle& _internal_faces(int index) const;
  ::DTCC::Triangle* _internal_add_faces();
  public:
  const ::DTCC::Triangle& faces(int index) const;
  ::DTCC::Triangle* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Triangle >&
      faces() const;

  // @@protoc_insertion_point(class_scope:DTCC.Mesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > normals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Triangle > faces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeMesh final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeMesh) */ {
 public:
  inline VolumeMesh() : VolumeMesh(nullptr) {}
  ~VolumeMesh() override;
  explicit constexpr VolumeMesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeMesh(const VolumeMesh& from);
  VolumeMesh(VolumeMesh&& from) noexcept
    : VolumeMesh() {
    *this = ::std::move(from);
  }

  inline VolumeMesh& operator=(const VolumeMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeMesh& operator=(VolumeMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeMesh* internal_default_instance() {
    return reinterpret_cast<const VolumeMesh*>(
               &_VolumeMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VolumeMesh& a, VolumeMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeMesh* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeMesh* New() const final {
    return new VolumeMesh();
  }

  VolumeMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeMesh>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeMesh& from);
  void MergeFrom(const VolumeMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeMesh";
  }
  protected:
  explicit VolumeMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
    kMarkersFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Tetrahedron cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DTCC::Tetrahedron* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Tetrahedron >*
      mutable_cells();
  private:
  const ::DTCC::Tetrahedron& _internal_cells(int index) const;
  ::DTCC::Tetrahedron* _internal_add_cells();
  public:
  const ::DTCC::Tetrahedron& cells(int index) const;
  ::DTCC::Tetrahedron* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Tetrahedron >&
      cells() const;

  // repeated int32 markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_markers() const;
  void _internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_markers();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 markers(int index) const;
  void set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Tetrahedron > cells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > markers_;
  mutable std::atomic<int> _markers_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridField2D) */ {
 public:
  inline GridField2D() : GridField2D(nullptr) {}
  ~GridField2D() override;
  explicit constexpr GridField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridField2D(const GridField2D& from);
  GridField2D(GridField2D&& from) noexcept
    : GridField2D() {
    *this = ::std::move(from);
  }

  inline GridField2D& operator=(const GridField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField2D& operator=(GridField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridField2D* internal_default_instance() {
    return reinterpret_cast<const GridField2D*>(
               &_GridField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GridField2D& a, GridField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridField2D* New() const final {
    return new GridField2D();
  }

  GridField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridField2D& from);
  void MergeFrom(const GridField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField2D";
  }
  protected:
  explicit GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid2D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridField3D) */ {
 public:
  inline GridField3D() : GridField3D(nullptr) {}
  ~GridField3D() override;
  explicit constexpr GridField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridField3D(const GridField3D& from);
  GridField3D(GridField3D&& from) noexcept
    : GridField3D() {
    *this = ::std::move(from);
  }

  inline GridField3D& operator=(const GridField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField3D& operator=(GridField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridField3D* internal_default_instance() {
    return reinterpret_cast<const GridField3D*>(
               &_GridField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GridField3D& a, GridField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridField3D* New() const final {
    return new GridField3D();
  }

  GridField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridField3D& from);
  void MergeFrom(const GridField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField3D";
  }
  protected:
  explicit GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid3D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField2D) */ {
 public:
  inline GridVectorField2D() : GridVectorField2D(nullptr) {}
  ~GridVectorField2D() override;
  explicit constexpr GridVectorField2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridVectorField2D(const GridVectorField2D& from);
  GridVectorField2D(GridVectorField2D&& from) noexcept
    : GridVectorField2D() {
    *this = ::std::move(from);
  }

  inline GridVectorField2D& operator=(const GridVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField2D& operator=(GridVectorField2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridVectorField2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridVectorField2D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField2D*>(
               &_GridVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GridVectorField2D& a, GridVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridVectorField2D* New() const final {
    return new GridVectorField2D();
  }

  GridVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridVectorField2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridVectorField2D& from);
  void MergeFrom(const GridVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVectorField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField2D";
  }
  protected:
  explicit GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid2D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField3D) */ {
 public:
  inline GridVectorField3D() : GridVectorField3D(nullptr) {}
  ~GridVectorField3D() override;
  explicit constexpr GridVectorField3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridVectorField3D(const GridVectorField3D& from);
  GridVectorField3D(GridVectorField3D&& from) noexcept
    : GridVectorField3D() {
    *this = ::std::move(from);
  }

  inline GridVectorField3D& operator=(const GridVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField3D& operator=(GridVectorField3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridVectorField3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridVectorField3D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField3D*>(
               &_GridVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GridVectorField3D& a, GridVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridVectorField3D* New() const final {
    return new GridVectorField3D();
  }

  GridVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridVectorField3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridVectorField3D& from);
  void MergeFrom(const GridVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVectorField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField3D";
  }
  protected:
  explicit GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid3D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshField) */ {
 public:
  inline MeshField() : MeshField(nullptr) {}
  ~MeshField() override;
  explicit constexpr MeshField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshField(const MeshField& from);
  MeshField(MeshField&& from) noexcept
    : MeshField() {
    *this = ::std::move(from);
  }

  inline MeshField& operator=(const MeshField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField& operator=(MeshField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshField* internal_default_instance() {
    return reinterpret_cast<const MeshField*>(
               &_MeshField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MeshField& a, MeshField& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshField* New() const final {
    return new MeshField();
  }

  MeshField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshField& from);
  void MergeFrom(const MeshField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField";
  }
  protected:
  explicit MeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Mesh* release_mesh();
  ::DTCC::Mesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh* mesh);
  private:
  const ::DTCC::Mesh& _internal_mesh() const;
  ::DTCC::Mesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh* mesh);
  ::DTCC::Mesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Mesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField) */ {
 public:
  inline MeshVectorField() : MeshVectorField(nullptr) {}
  ~MeshVectorField() override;
  explicit constexpr MeshVectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshVectorField(const MeshVectorField& from);
  MeshVectorField(MeshVectorField&& from) noexcept
    : MeshVectorField() {
    *this = ::std::move(from);
  }

  inline MeshVectorField& operator=(const MeshVectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField& operator=(MeshVectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshVectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshVectorField* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField*>(
               &_MeshVectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MeshVectorField& a, MeshVectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshVectorField* New() const final {
    return new MeshVectorField();
  }

  MeshVectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshVectorField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshVectorField& from);
  void MergeFrom(const MeshVectorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshVectorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField";
  }
  protected:
  explicit MeshVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Mesh* release_mesh();
  ::DTCC::Mesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh* mesh);
  private:
  const ::DTCC::Mesh& _internal_mesh() const;
  ::DTCC::Mesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh* mesh);
  ::DTCC::Mesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Mesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeMeshField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeMeshField) */ {
 public:
  inline VolumeMeshField() : VolumeMeshField(nullptr) {}
  ~VolumeMeshField() override;
  explicit constexpr VolumeMeshField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeMeshField(const VolumeMeshField& from);
  VolumeMeshField(VolumeMeshField&& from) noexcept
    : VolumeMeshField() {
    *this = ::std::move(from);
  }

  inline VolumeMeshField& operator=(const VolumeMeshField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeMeshField& operator=(VolumeMeshField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeMeshField& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeMeshField* internal_default_instance() {
    return reinterpret_cast<const VolumeMeshField*>(
               &_VolumeMeshField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VolumeMeshField& a, VolumeMeshField& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeMeshField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeMeshField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeMeshField* New() const final {
    return new VolumeMeshField();
  }

  VolumeMeshField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeMeshField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeMeshField& from);
  void MergeFrom(const VolumeMeshField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeMeshField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeMeshField";
  }
  protected:
  explicit VolumeMeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.VolumeMesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::VolumeMesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::VolumeMesh* release_mesh();
  ::DTCC::VolumeMesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::VolumeMesh* mesh);
  private:
  const ::DTCC::VolumeMesh& _internal_mesh() const;
  ::DTCC::VolumeMesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::VolumeMesh* mesh);
  ::DTCC::VolumeMesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeMeshField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::VolumeMesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeVectorField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeVectorField) */ {
 public:
  inline VolumeVectorField() : VolumeVectorField(nullptr) {}
  ~VolumeVectorField() override;
  explicit constexpr VolumeVectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeVectorField(const VolumeVectorField& from);
  VolumeVectorField(VolumeVectorField&& from) noexcept
    : VolumeVectorField() {
    *this = ::std::move(from);
  }

  inline VolumeVectorField& operator=(const VolumeVectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeVectorField& operator=(VolumeVectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeVectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeVectorField* internal_default_instance() {
    return reinterpret_cast<const VolumeVectorField*>(
               &_VolumeVectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(VolumeVectorField& a, VolumeVectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeVectorField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeVectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeVectorField* New() const final {
    return new VolumeVectorField();
  }

  VolumeVectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeVectorField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeVectorField& from);
  void MergeFrom(const VolumeVectorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeVectorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeVectorField";
  }
  protected:
  explicit VolumeVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.VolumeMesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::VolumeMesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::VolumeMesh* release_mesh();
  ::DTCC::VolumeMesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::VolumeMesh* mesh);
  private:
  const ::DTCC::VolumeMesh& _internal_mesh() const;
  ::DTCC::VolumeMesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::VolumeMesh* mesh);
  ::DTCC::VolumeMesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeVectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::VolumeMesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit constexpr PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return new PointCloud();
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kClassificationFieldNumber = 3,
    kIntensityFieldNumber = 4,
    kReturnNumberFieldNumber = 5,
    kNumReturnsFieldNumber = 6,
    kUsedClassificationsFieldNumber = 7,
    kBoundsFieldNumber = 2,
    kGeoreferenceFieldNumber = 8,
  };
  // repeated .DTCC.Vector3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_points();
  private:
  const ::DTCC::Vector3D& _internal_points(int index) const;
  ::DTCC::Vector3D* _internal_add_points();
  public:
  const ::DTCC::Vector3D& points(int index) const;
  ::DTCC::Vector3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      points() const;

  // repeated uint32 classification = 3;
  int classification_size() const;
  private:
  int _internal_classification_size() const;
  public:
  void clear_classification();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classification(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_classification() const;
  void _internal_add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_classification();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 classification(int index) const;
  void set_classification(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      classification() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_classification();

  // repeated uint32 intensity = 4;
  int intensity_size() const;
  private:
  int _internal_intensity_size() const;
  public:
  void clear_intensity();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_intensity() const;
  void _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_intensity();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity(int index) const;
  void set_intensity(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      intensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_intensity();

  // repeated uint32 returnNumber = 5;
  int returnnumber_size() const;
  private:
  int _internal_returnnumber_size() const;
  public:
  void clear_returnnumber();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_returnnumber(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_returnnumber() const;
  void _internal_add_returnnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_returnnumber();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 returnnumber(int index) const;
  void set_returnnumber(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_returnnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      returnnumber() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_returnnumber();

  // repeated uint32 numReturns = 6;
  int numreturns_size() const;
  private:
  int _internal_numreturns_size() const;
  public:
  void clear_numreturns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numreturns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_numreturns() const;
  void _internal_add_numreturns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_numreturns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 numreturns(int index) const;
  void set_numreturns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_numreturns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      numreturns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_numreturns();

  // repeated uint32 usedClassifications = 7;
  int usedclassifications_size() const;
  private:
  int _internal_usedclassifications_size() const;
  public:
  void clear_usedclassifications();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usedclassifications(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_usedclassifications() const;
  void _internal_add_usedclassifications(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_usedclassifications();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 usedclassifications(int index) const;
  void set_usedclassifications(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_usedclassifications(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      usedclassifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_usedclassifications();

  // .DTCC.BoundingBox2D bounds = 2;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::BoundingBox2D& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::BoundingBox2D* release_bounds();
  ::DTCC::BoundingBox2D* mutable_bounds();
  void set_allocated_bounds(::DTCC::BoundingBox2D* bounds);
  private:
  const ::DTCC::BoundingBox2D& _internal_bounds() const;
  ::DTCC::BoundingBox2D* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::BoundingBox2D* bounds);
  ::DTCC::BoundingBox2D* unsafe_arena_release_bounds();

  // .DTCC.Georeference georeference = 8;
  bool has_georeference() const;
  private:
  bool _internal_has_georeference() const;
  public:
  void clear_georeference();
  const ::DTCC::Georeference& georeference() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Georeference* release_georeference();
  ::DTCC::Georeference* mutable_georeference();
  void set_allocated_georeference(::DTCC::Georeference* georeference);
  private:
  const ::DTCC::Georeference& _internal_georeference() const;
  ::DTCC::Georeference* _internal_mutable_georeference();
  public:
  void unsafe_arena_set_allocated_georeference(
      ::DTCC::Georeference* georeference);
  ::DTCC::Georeference* unsafe_arena_release_georeference();

  // @@protoc_insertion_point(class_scope:DTCC.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > classification_;
  mutable std::atomic<int> _classification_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > intensity_;
  mutable std::atomic<int> _intensity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > returnnumber_;
  mutable std::atomic<int> _returnnumber_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > numreturns_;
  mutable std::atomic<int> _numreturns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > usedclassifications_;
  mutable std::atomic<int> _usedclassifications_cached_byte_size_;
  ::DTCC::BoundingBox2D* bounds_;
  ::DTCC::Georeference* georeference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Building final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Building) */ {
 public:
  inline Building() : Building(nullptr) {}
  ~Building() override;
  explicit constexpr Building(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Building(const Building& from);
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Building& operator=(Building&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Building& default_instance() {
    return *internal_default_instance();
  }
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Building* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Building* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Building* New() const final {
    return new Building();
  }

  Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Building";
  }
  protected:
  explicit Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFootPrintFieldNumber = 2,
    kRoofpointsFieldNumber = 5,
    kHeightFieldNumber = 3,
    kGroundHeightFieldNumber = 4,
    kErrorFieldNumber = 6,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .DTCC.Polygon footPrint = 2;
  bool has_footprint() const;
  private:
  bool _internal_has_footprint() const;
  public:
  void clear_footprint();
  const ::DTCC::Polygon& footprint() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Polygon* release_footprint();
  ::DTCC::Polygon* mutable_footprint();
  void set_allocated_footprint(::DTCC::Polygon* footprint);
  private:
  const ::DTCC::Polygon& _internal_footprint() const;
  ::DTCC::Polygon* _internal_mutable_footprint();
  public:
  void unsafe_arena_set_allocated_footprint(
      ::DTCC::Polygon* footprint);
  ::DTCC::Polygon* unsafe_arena_release_footprint();

  // .DTCC.PointCloud roofpoints = 5;
  bool has_roofpoints() const;
  private:
  bool _internal_has_roofpoints() const;
  public:
  void clear_roofpoints();
  const ::DTCC::PointCloud& roofpoints() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::PointCloud* release_roofpoints();
  ::DTCC::PointCloud* mutable_roofpoints();
  void set_allocated_roofpoints(::DTCC::PointCloud* roofpoints);
  private:
  const ::DTCC::PointCloud& _internal_roofpoints() const;
  ::DTCC::PointCloud* _internal_mutable_roofpoints();
  public:
  void unsafe_arena_set_allocated_roofpoints(
      ::DTCC::PointCloud* roofpoints);
  ::DTCC::PointCloud* unsafe_arena_release_roofpoints();

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double groundHeight = 4;
  void clear_groundheight();
  double groundheight() const;
  void set_groundheight(double value);
  private:
  double _internal_groundheight() const;
  void _internal_set_groundheight(double value);
  public:

  // uint64 error = 6;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint64 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Building)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::DTCC::Polygon* footprint_;
  ::DTCC::PointCloud* roofpoints_;
  double height_;
  double groundheight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class CityModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.CityModel) */ {
 public:
  inline CityModel() : CityModel(nullptr) {}
  ~CityModel() override;
  explicit constexpr CityModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CityModel(const CityModel& from);
  CityModel(CityModel&& from) noexcept
    : CityModel() {
    *this = ::std::move(from);
  }

  inline CityModel& operator=(const CityModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CityModel& operator=(CityModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CityModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CityModel* internal_default_instance() {
    return reinterpret_cast<const CityModel*>(
               &_CityModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CityModel& a, CityModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CityModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CityModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CityModel* New() const final {
    return new CityModel();
  }

  CityModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CityModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CityModel& from);
  void MergeFrom(const CityModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CityModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.CityModel";
  }
  protected:
  explicit CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildingsFieldNumber = 1,
    kBoundsFieldNumber = 2,
    kGeoreferenceFieldNumber = 3,
    kTerrainFieldNumber = 4,
  };
  // repeated .DTCC.Building buildings = 1;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::DTCC::Building* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
      mutable_buildings();
  private:
  const ::DTCC::Building& _internal_buildings(int index) const;
  ::DTCC::Building* _internal_add_buildings();
  public:
  const ::DTCC::Building& buildings(int index) const;
  ::DTCC::Building* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
      buildings() const;

  // .DTCC.BoundingBox2D bounds = 2;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::BoundingBox2D& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::BoundingBox2D* release_bounds();
  ::DTCC::BoundingBox2D* mutable_bounds();
  void set_allocated_bounds(::DTCC::BoundingBox2D* bounds);
  private:
  const ::DTCC::BoundingBox2D& _internal_bounds() const;
  ::DTCC::BoundingBox2D* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::BoundingBox2D* bounds);
  ::DTCC::BoundingBox2D* unsafe_arena_release_bounds();

  // .DTCC.Georeference georeference = 3;
  bool has_georeference() const;
  private:
  bool _internal_has_georeference() const;
  public:
  void clear_georeference();
  const ::DTCC::Georeference& georeference() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Georeference* release_georeference();
  ::DTCC::Georeference* mutable_georeference();
  void set_allocated_georeference(::DTCC::Georeference* georeference);
  private:
  const ::DTCC::Georeference& _internal_georeference() const;
  ::DTCC::Georeference* _internal_mutable_georeference();
  public:
  void unsafe_arena_set_allocated_georeference(
      ::DTCC::Georeference* georeference);
  ::DTCC::Georeference* unsafe_arena_release_georeference();

  // .DTCC.GridField2D terrain = 4;
  bool has_terrain() const;
  private:
  bool _internal_has_terrain() const;
  public:
  void clear_terrain();
  const ::DTCC::GridField2D& terrain() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::GridField2D* release_terrain();
  ::DTCC::GridField2D* mutable_terrain();
  void set_allocated_terrain(::DTCC::GridField2D* terrain);
  private:
  const ::DTCC::GridField2D& _internal_terrain() const;
  ::DTCC::GridField2D* _internal_mutable_terrain();
  public:
  void unsafe_arena_set_allocated_terrain(
      ::DTCC::GridField2D* terrain);
  ::DTCC::GridField2D* unsafe_arena_release_terrain();

  // @@protoc_insertion_point(class_scope:DTCC.CityModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building > buildings_;
  ::DTCC::BoundingBox2D* bounds_;
  ::DTCC::Georeference* georeference_;
  ::DTCC::GridField2D* terrain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Georeference final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Georeference) */ {
 public:
  inline Georeference() : Georeference(nullptr) {}
  ~Georeference() override;
  explicit constexpr Georeference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Georeference(const Georeference& from);
  Georeference(Georeference&& from) noexcept
    : Georeference() {
    *this = ::std::move(from);
  }

  inline Georeference& operator=(const Georeference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Georeference& operator=(Georeference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Georeference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Georeference* internal_default_instance() {
    return reinterpret_cast<const Georeference*>(
               &_Georeference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Georeference& a, Georeference& b) {
    a.Swap(&b);
  }
  inline void Swap(Georeference* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Georeference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Georeference* New() const final {
    return new Georeference();
  }

  Georeference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Georeference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Georeference& from);
  void MergeFrom(const Georeference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Georeference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Georeference";
  }
  protected:
  explicit Georeference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrsFieldNumber = 1,
    kX0FieldNumber = 3,
    kY0FieldNumber = 4,
    kEpsgFieldNumber = 2,
  };
  // string crs = 1;
  void clear_crs();
  const std::string& crs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crs();
  PROTOBUF_MUST_USE_RESULT std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // double x0 = 3;
  void clear_x0();
  double x0() const;
  void set_x0(double value);
  private:
  double _internal_x0() const;
  void _internal_set_x0(double value);
  public:

  // double y0 = 4;
  void clear_y0();
  double y0() const;
  void set_y0(double value);
  private:
  double _internal_y0() const;
  void _internal_set_y0(double value);
  public:

  // int32 epsg = 2;
  void clear_epsg();
  ::PROTOBUF_NAMESPACE_ID::int32 epsg() const;
  void set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsg() const;
  void _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Georeference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
  double x0_;
  double y0_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.y)
}

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::_internal_x() const {
  return x_;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::_internal_y() const {
  return y_;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::_internal_z() const {
  return z_;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.z)
}

// -------------------------------------------------------------------

// Triangle

// int32 v0 = 1;
inline void Triangle::clear_v0() {
  v0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::_internal_v0() const {
  return v0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Triangle.v0)
  return _internal_v0();
}
inline void Triangle::_internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v0_ = value;
}
inline void Triangle::set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Triangle.v0)
}

// int32 v1 = 2;
inline void Triangle::clear_v1() {
  v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::_internal_v1() const {
  return v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Triangle.v1)
  return _internal_v1();
}
inline void Triangle::_internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v1_ = value;
}
inline void Triangle::set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Triangle.v1)
}

// int32 v2 = 3;
inline void Triangle::clear_v2() {
  v2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::_internal_v2() const {
  return v2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Triangle.v2)
  return _internal_v2();
}
inline void Triangle::_internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v2_ = value;
}
inline void Triangle::set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Triangle.v2)
}

// -------------------------------------------------------------------

// Tetrahedron

// int32 v0 = 1;
inline void Tetrahedron::clear_v0() {
  v0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::_internal_v0() const {
  return v0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Tetrahedron.v0)
  return _internal_v0();
}
inline void Tetrahedron::_internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v0_ = value;
}
inline void Tetrahedron::set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Tetrahedron.v0)
}

// int32 v1 = 2;
inline void Tetrahedron::clear_v1() {
  v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::_internal_v1() const {
  return v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Tetrahedron.v1)
  return _internal_v1();
}
inline void Tetrahedron::_internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v1_ = value;
}
inline void Tetrahedron::set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Tetrahedron.v1)
}

// int32 v2 = 3;
inline void Tetrahedron::clear_v2() {
  v2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::_internal_v2() const {
  return v2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Tetrahedron.v2)
  return _internal_v2();
}
inline void Tetrahedron::_internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v2_ = value;
}
inline void Tetrahedron::set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Tetrahedron.v2)
}

// int32 v3 = 4;
inline void Tetrahedron::clear_v3() {
  v3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::_internal_v3() const {
  return v3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tetrahedron::v3() const {
  // @@protoc_insertion_point(field_get:DTCC.Tetrahedron.v3)
  return _internal_v3();
}
inline void Tetrahedron::_internal_set_v3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v3_ = value;
}
inline void Tetrahedron::set_v3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v3(value);
  // @@protoc_insertion_point(field_set:DTCC.Tetrahedron.v3)
}

// -------------------------------------------------------------------

// BoundingBox2D

// .DTCC.Vector2D p = 1;
inline bool BoundingBox2D::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool BoundingBox2D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox2D::clear_p() {
  if (GetArenaForAllocation() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_p() const {
  const ::DTCC::Vector2D* p = p_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector2D&>(
      ::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.p)
  return _internal_p();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector2D* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.p)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_p() {
  
  ::DTCC::Vector2D* temp = p_;
  p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.p)
  
  ::DTCC::Vector2D* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArenaForAllocation());
    p_ = p;
  }
  return p_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_p() {
  ::DTCC::Vector2D* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.p)
  return _msg;
}
inline void BoundingBox2D::set_allocated_p(::DTCC::Vector2D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Vector2D>::GetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.p)
}

// .DTCC.Vector2D q = 2;
inline bool BoundingBox2D::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool BoundingBox2D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox2D::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_q() const {
  const ::DTCC::Vector2D* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector2D&>(
      ::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.q)
  return _internal_q();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector2D* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.q)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_q() {
  
  ::DTCC::Vector2D* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.q)
  
  ::DTCC::Vector2D* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_q() {
  ::DTCC::Vector2D* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.q)
  return _msg;
}
inline void BoundingBox2D::set_allocated_q(::DTCC::Vector2D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Vector2D>::GetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.q)
}

// -------------------------------------------------------------------

// BoundingBox3D

// .DTCC.Vector3D p = 1;
inline bool BoundingBox3D::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool BoundingBox3D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox3D::clear_p() {
  if (GetArenaForAllocation() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_p() const {
  const ::DTCC::Vector3D* p = p_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector3D&>(
      ::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.p)
  return _internal_p();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector3D* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.p)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_p() {
  
  ::DTCC::Vector3D* temp = p_;
  p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.p)
  
  ::DTCC::Vector3D* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArenaForAllocation());
    p_ = p;
  }
  return p_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_p() {
  ::DTCC::Vector3D* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.p)
  return _msg;
}
inline void BoundingBox3D::set_allocated_p(::DTCC::Vector3D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Vector3D>::GetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.p)
}

// .DTCC.Vector3D q = 2;
inline bool BoundingBox3D::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool BoundingBox3D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox3D::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_q() const {
  const ::DTCC::Vector3D* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Vector3D&>(
      ::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.q)
  return _internal_q();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector3D* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.q)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_q() {
  
  ::DTCC::Vector3D* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.q)
  
  ::DTCC::Vector3D* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_q() {
  ::DTCC::Vector3D* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.q)
  return _msg;
}
inline void BoundingBox3D::set_allocated_q(::DTCC::Vector3D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Vector3D>::GetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.q)
}

// -------------------------------------------------------------------

// MultiPoint

// repeated .DTCC.Vector2D points = 1;
inline int MultiPoint::_internal_points_size() const {
  return points_.size();
}
inline int MultiPoint::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint::clear_points() {
  points_.Clear();
}
inline ::DTCC::Vector2D* MultiPoint::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
MultiPoint::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint.points)
  return &points_;
}
inline const ::DTCC::Vector2D& MultiPoint::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::DTCC::Vector2D& MultiPoint::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint.points)
  return _internal_points(index);
}
inline ::DTCC::Vector2D* MultiPoint::_internal_add_points() {
  return points_.Add();
}
inline ::DTCC::Vector2D* MultiPoint::add_points() {
  ::DTCC::Vector2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
MultiPoint::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint.points)
  return points_;
}

// -------------------------------------------------------------------

// MultiPoint3D

// repeated .DTCC.Vector3D points = 1;
inline int MultiPoint3D::_internal_points_size() const {
  return points_.size();
}
inline int MultiPoint3D::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint3D::clear_points() {
  points_.Clear();
}
inline ::DTCC::Vector3D* MultiPoint3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint3D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
MultiPoint3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint3D.points)
  return &points_;
}
inline const ::DTCC::Vector3D& MultiPoint3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::DTCC::Vector3D& MultiPoint3D::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint3D.points)
  return _internal_points(index);
}
inline ::DTCC::Vector3D* MultiPoint3D::_internal_add_points() {
  return points_.Add();
}
inline ::DTCC::Vector3D* MultiPoint3D::add_points() {
  ::DTCC::Vector3D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint3D.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
MultiPoint3D::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint3D.points)
  return points_;
}

// -------------------------------------------------------------------

// LineString

// repeated .DTCC.Vector2D vertices = 1;
inline int LineString::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LineString::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* LineString::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LineString::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& LineString::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LineString::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LineString::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* LineString::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LineString::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// LineString3D

// repeated .DTCC.Vector3D vertices = 1;
inline int LineString3D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LineString3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString3D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* LineString3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString3D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
LineString3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString3D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& LineString3D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& LineString3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* LineString3D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* LineString3D::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString3D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
LineString3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString3D.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// LinearRing

// repeated .DTCC.Vector2D vertices = 1;
inline int LinearRing::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LinearRing::vertices_size() const {
  return _internal_vertices_size();
}
inline void LinearRing::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* LinearRing::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LinearRing.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LinearRing::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LinearRing.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& LinearRing::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LinearRing::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LinearRing.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LinearRing::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* LinearRing::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LinearRing.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LinearRing::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LinearRing.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// Polygon

// .DTCC.LinearRing shell = 1;
inline bool Polygon::_internal_has_shell() const {
  return this != internal_default_instance() && shell_ != nullptr;
}
inline bool Polygon::has_shell() const {
  return _internal_has_shell();
}
inline void Polygon::clear_shell() {
  if (GetArenaForAllocation() == nullptr && shell_ != nullptr) {
    delete shell_;
  }
  shell_ = nullptr;
}
inline const ::DTCC::LinearRing& Polygon::_internal_shell() const {
  const ::DTCC::LinearRing* p = shell_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::LinearRing&>(
      ::DTCC::_LinearRing_default_instance_);
}
inline const ::DTCC::LinearRing& Polygon::shell() const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.shell)
  return _internal_shell();
}
inline void Polygon::unsafe_arena_set_allocated_shell(
    ::DTCC::LinearRing* shell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shell_);
  }
  shell_ = shell;
  if (shell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Polygon.shell)
}
inline ::DTCC::LinearRing* Polygon::release_shell() {
  
  ::DTCC::LinearRing* temp = shell_;
  shell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::LinearRing* Polygon::unsafe_arena_release_shell() {
  // @@protoc_insertion_point(field_release:DTCC.Polygon.shell)
  
  ::DTCC::LinearRing* temp = shell_;
  shell_ = nullptr;
  return temp;
}
inline ::DTCC::LinearRing* Polygon::_internal_mutable_shell() {
  
  if (shell_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::LinearRing>(GetArenaForAllocation());
    shell_ = p;
  }
  return shell_;
}
inline ::DTCC::LinearRing* Polygon::mutable_shell() {
  ::DTCC::LinearRing* _msg = _internal_mutable_shell();
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.shell)
  return _msg;
}
inline void Polygon::set_allocated_shell(::DTCC::LinearRing* shell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shell_;
  }
  if (shell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::LinearRing>::GetOwningArena(shell);
    if (message_arena != submessage_arena) {
      shell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell, submessage_arena);
    }
    
  } else {
    
  }
  shell_ = shell;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Polygon.shell)
}

// repeated .DTCC.LinearRing holes = 2;
inline int Polygon::_internal_holes_size() const {
  return holes_.size();
}
inline int Polygon::holes_size() const {
  return _internal_holes_size();
}
inline void Polygon::clear_holes() {
  holes_.Clear();
}
inline ::DTCC::LinearRing* Polygon::mutable_holes(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.holes)
  return holes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
Polygon::mutable_holes() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Polygon.holes)
  return &holes_;
}
inline const ::DTCC::LinearRing& Polygon::_internal_holes(int index) const {
  return holes_.Get(index);
}
inline const ::DTCC::LinearRing& Polygon::holes(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.holes)
  return _internal_holes(index);
}
inline ::DTCC::LinearRing* Polygon::_internal_add_holes() {
  return holes_.Add();
}
inline ::DTCC::LinearRing* Polygon::add_holes() {
  ::DTCC::LinearRing* _add = _internal_add_holes();
  // @@protoc_insertion_point(field_add:DTCC.Polygon.holes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
Polygon::holes() const {
  // @@protoc_insertion_point(field_list:DTCC.Polygon.holes)
  return holes_;
}

// -------------------------------------------------------------------

// MultiPolygon

// repeated .DTCC.Polygon polygons = 1;
inline int MultiPolygon::_internal_polygons_size() const {
  return polygons_.size();
}
inline int MultiPolygon::polygons_size() const {
  return _internal_polygons_size();
}
inline void MultiPolygon::clear_polygons() {
  polygons_.Clear();
}
inline ::DTCC::Polygon* MultiPolygon::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPolygon.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
MultiPolygon::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPolygon.polygons)
  return &polygons_;
}
inline const ::DTCC::Polygon& MultiPolygon::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::DTCC::Polygon& MultiPolygon::polygons(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPolygon.polygons)
  return _internal_polygons(index);
}
inline ::DTCC::Polygon* MultiPolygon::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::DTCC::Polygon* MultiPolygon::add_polygons() {
  ::DTCC::Polygon* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:DTCC.MultiPolygon.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
MultiPolygon::polygons() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPolygon.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Grid2D

// .DTCC.BoundingBox2D boundingBox = 1;
inline bool Grid2D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline bool Grid2D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid2D::clear_boundingbox() {
  if (GetArenaForAllocation() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& Grid2D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox2D* p = boundingbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox2D&>(
      ::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& Grid2D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid2D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox2D* boundingbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid2D.boundingBox)
}
inline ::DTCC::BoundingBox2D* Grid2D::release_boundingbox() {
  
  ::DTCC::BoundingBox2D* temp = boundingbox_;
  boundingbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid2D.boundingBox)
  
  ::DTCC::BoundingBox2D* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::_internal_mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArenaForAllocation());
    boundingbox_ = p;
  }
  return boundingbox_;
}
inline ::DTCC::BoundingBox2D* Grid2D::mutable_boundingbox() {
  ::DTCC::BoundingBox2D* _msg = _internal_mutable_boundingbox();
  // @@protoc_insertion_point(field_mutable:DTCC.Grid2D.boundingBox)
  return _msg;
}
inline void Grid2D::set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::BoundingBox2D>::GetOwningArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid2D.boundingBox)
}

// int32 xSize = 2;
inline void Grid2D::clear_xsize() {
  xsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::_internal_xsize() const {
  return xsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xSize)
  return _internal_xsize();
}
inline void Grid2D::_internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xsize_ = value;
}
inline void Grid2D::set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xSize)
}

// int32 ySize = 3;
inline void Grid2D::clear_ysize() {
  ysize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::_internal_ysize() const {
  return ysize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.ySize)
  return _internal_ysize();
}
inline void Grid2D::_internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ysize_ = value;
}
inline void Grid2D::set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.ySize)
}

// float xStep = 4;
inline void Grid2D::clear_xstep() {
  xstep_ = 0;
}
inline float Grid2D::_internal_xstep() const {
  return xstep_;
}
inline float Grid2D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xStep)
  return _internal_xstep();
}
inline void Grid2D::_internal_set_xstep(float value) {
  
  xstep_ = value;
}
inline void Grid2D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xStep)
}

// float yStep = 5;
inline void Grid2D::clear_ystep() {
  ystep_ = 0;
}
inline float Grid2D::_internal_ystep() const {
  return ystep_;
}
inline float Grid2D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.yStep)
  return _internal_ystep();
}
inline void Grid2D::_internal_set_ystep(float value) {
  
  ystep_ = value;
}
inline void Grid2D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.yStep)
}

// -------------------------------------------------------------------

// Grid3D

// .DTCC.BoundingBox3D boundingBox = 1;
inline bool Grid3D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline bool Grid3D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid3D::clear_boundingbox() {
  if (GetArenaForAllocation() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox3D& Grid3D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox3D* p = boundingbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox3D&>(
      ::DTCC::_BoundingBox3D_default_instance_);
}
inline const ::DTCC::BoundingBox3D& Grid3D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid3D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox3D* boundingbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid3D.boundingBox)
}
inline ::DTCC::BoundingBox3D* Grid3D::release_boundingbox() {
  
  ::DTCC::BoundingBox3D* temp = boundingbox_;
  boundingbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid3D.boundingBox)
  
  ::DTCC::BoundingBox3D* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::_internal_mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox3D>(GetArenaForAllocation());
    boundingbox_ = p;
  }
  return boundingbox_;
}
inline ::DTCC::BoundingBox3D* Grid3D::mutable_boundingbox() {
  ::DTCC::BoundingBox3D* _msg = _internal_mutable_boundingbox();
  // @@protoc_insertion_point(field_mutable:DTCC.Grid3D.boundingBox)
  return _msg;
}
inline void Grid3D::set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::BoundingBox3D>::GetOwningArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid3D.boundingBox)
}

// int32 xSize = 2;
inline void Grid3D::clear_xsize() {
  xsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_xsize() const {
  return xsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xSize)
  return _internal_xsize();
}
inline void Grid3D::_internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xsize_ = value;
}
inline void Grid3D::set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xSize)
}

// int32 ySize = 3;
inline void Grid3D::clear_ysize() {
  ysize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_ysize() const {
  return ysize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.ySize)
  return _internal_ysize();
}
inline void Grid3D::_internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ysize_ = value;
}
inline void Grid3D::set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.ySize)
}

// int32 zSize = 4;
inline void Grid3D::clear_zsize() {
  zsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_zsize() const {
  return zsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::zsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zSize)
  return _internal_zsize();
}
inline void Grid3D::_internal_set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zsize_ = value;
}
inline void Grid3D::set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zSize)
}

// float xStep = 5;
inline void Grid3D::clear_xstep() {
  xstep_ = 0;
}
inline float Grid3D::_internal_xstep() const {
  return xstep_;
}
inline float Grid3D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xStep)
  return _internal_xstep();
}
inline void Grid3D::_internal_set_xstep(float value) {
  
  xstep_ = value;
}
inline void Grid3D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xStep)
}

// float yStep = 6;
inline void Grid3D::clear_ystep() {
  ystep_ = 0;
}
inline float Grid3D::_internal_ystep() const {
  return ystep_;
}
inline float Grid3D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.yStep)
  return _internal_ystep();
}
inline void Grid3D::_internal_set_ystep(float value) {
  
  ystep_ = value;
}
inline void Grid3D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.yStep)
}

// float zStep = 7;
inline void Grid3D::clear_zstep() {
  zstep_ = 0;
}
inline float Grid3D::_internal_zstep() const {
  return zstep_;
}
inline float Grid3D::zstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zStep)
  return _internal_zstep();
}
inline void Grid3D::_internal_set_zstep(float value) {
  
  zstep_ = value;
}
inline void Grid3D::set_zstep(float value) {
  _internal_set_zstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zStep)
}

// -------------------------------------------------------------------

// Mesh

// repeated .DTCC.Vector3D vertices = 1;
inline int Mesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& Mesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* Mesh::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* Mesh::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.Mesh.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.vertices)
  return vertices_;
}

// repeated .DTCC.Vector3D normals = 2;
inline int Mesh::_internal_normals_size() const {
  return normals_.size();
}
inline int Mesh::normals_size() const {
  return _internal_normals_size();
}
inline void Mesh::clear_normals() {
  normals_.Clear();
}
inline ::DTCC::Vector3D* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.normals)
  return &normals_;
}
inline const ::DTCC::Vector3D& Mesh::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline const ::DTCC::Vector3D& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.normals)
  return _internal_normals(index);
}
inline ::DTCC::Vector3D* Mesh::_internal_add_normals() {
  return normals_.Add();
}
inline ::DTCC::Vector3D* Mesh::add_normals() {
  ::DTCC::Vector3D* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:DTCC.Mesh.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.normals)
  return normals_;
}

// repeated .DTCC.Triangle faces = 3;
inline int Mesh::_internal_faces_size() const {
  return faces_.size();
}
inline int Mesh::faces_size() const {
  return _internal_faces_size();
}
inline void Mesh::clear_faces() {
  faces_.Clear();
}
inline ::DTCC::Triangle* Mesh::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh.faces)
  return faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Triangle >*
Mesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.faces)
  return &faces_;
}
inline const ::DTCC::Triangle& Mesh::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline const ::DTCC::Triangle& Mesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.faces)
  return _internal_faces(index);
}
inline ::DTCC::Triangle* Mesh::_internal_add_faces() {
  return faces_.Add();
}
inline ::DTCC::Triangle* Mesh::add_faces() {
  ::DTCC::Triangle* _add = _internal_add_faces();
  // @@protoc_insertion_point(field_add:DTCC.Mesh.faces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Triangle >&
Mesh::faces() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.faces)
  return faces_;
}

// -------------------------------------------------------------------

// VolumeMesh

// repeated .DTCC.Vector3D vertices = 1;
inline int VolumeMesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int VolumeMesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void VolumeMesh::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* VolumeMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeMesh.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
VolumeMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMesh.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& VolumeMesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& VolumeMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMesh.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* VolumeMesh::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* VolumeMesh::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.VolumeMesh.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
VolumeMesh::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMesh.vertices)
  return vertices_;
}

// repeated .DTCC.Tetrahedron cells = 2;
inline int VolumeMesh::_internal_cells_size() const {
  return cells_.size();
}
inline int VolumeMesh::cells_size() const {
  return _internal_cells_size();
}
inline void VolumeMesh::clear_cells() {
  cells_.Clear();
}
inline ::DTCC::Tetrahedron* VolumeMesh::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeMesh.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Tetrahedron >*
VolumeMesh::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMesh.cells)
  return &cells_;
}
inline const ::DTCC::Tetrahedron& VolumeMesh::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::DTCC::Tetrahedron& VolumeMesh::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMesh.cells)
  return _internal_cells(index);
}
inline ::DTCC::Tetrahedron* VolumeMesh::_internal_add_cells() {
  return cells_.Add();
}
inline ::DTCC::Tetrahedron* VolumeMesh::add_cells() {
  ::DTCC::Tetrahedron* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:DTCC.VolumeMesh.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Tetrahedron >&
VolumeMesh::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMesh.cells)
  return cells_;
}

// repeated int32 markers = 3;
inline int VolumeMesh::_internal_markers_size() const {
  return markers_.size();
}
inline int VolumeMesh::markers_size() const {
  return _internal_markers_size();
}
inline void VolumeMesh::clear_markers() {
  markers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeMesh::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeMesh::markers(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMesh.markers)
  return _internal_markers(index);
}
inline void VolumeMesh::set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMesh.markers)
}
inline void VolumeMesh::_internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Add(value);
}
inline void VolumeMesh::add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_markers(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMesh.markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VolumeMesh::_internal_markers() const {
  return markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VolumeMesh::markers() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMesh.markers)
  return _internal_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VolumeMesh::_internal_mutable_markers() {
  return &markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VolumeMesh::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMesh.markers)
  return _internal_mutable_markers();
}

// -------------------------------------------------------------------

// GridField2D

// .DTCC.Grid2D grid = 1;
inline bool GridField2D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField2D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid2D&>(
      ::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.grid)
  return _internal_grid();
}
inline void GridField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField2D.grid)
}
inline ::DTCC::Grid2D* GridField2D::release_grid() {
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField2D.grid)
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid2D* GridField2D::mutable_grid() {
  ::DTCC::Grid2D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridField2D.grid)
  return _msg;
}
inline void GridField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid2D>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField2D.grid)
}

// repeated float values = 2;
inline int GridField2D::_internal_values_size() const {
  return values_.size();
}
inline int GridField2D::values_size() const {
  return _internal_values_size();
}
inline void GridField2D::clear_values() {
  values_.Clear();
}
inline float GridField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.values)
  return _internal_values(index);
}
inline void GridField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField2D.values)
}
inline void GridField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridField3D

// .DTCC.Grid3D grid = 1;
inline bool GridField3D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField3D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid3D&>(
      ::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.grid)
  return _internal_grid();
}
inline void GridField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField3D.grid)
}
inline ::DTCC::Grid3D* GridField3D::release_grid() {
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField3D.grid)
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid3D* GridField3D::mutable_grid() {
  ::DTCC::Grid3D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridField3D.grid)
  return _msg;
}
inline void GridField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid3D>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField3D.grid)
}

// repeated float values = 2;
inline int GridField3D::_internal_values_size() const {
  return values_.size();
}
inline int GridField3D::values_size() const {
  return _internal_values_size();
}
inline void GridField3D::clear_values() {
  values_.Clear();
}
inline float GridField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.values)
  return _internal_values(index);
}
inline void GridField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField3D.values)
}
inline void GridField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField2D

// .DTCC.Grid2D grid = 1;
inline bool GridVectorField2D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridVectorField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField2D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridVectorField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid2D&>(
      ::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridVectorField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.grid)
  return _internal_grid();
}
inline void GridVectorField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField2D.grid)
}
inline ::DTCC::Grid2D* GridVectorField2D::release_grid() {
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField2D.grid)
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid2D* GridVectorField2D::mutable_grid() {
  ::DTCC::Grid2D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField2D.grid)
  return _msg;
}
inline void GridVectorField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid2D>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField2D.grid)
}

// repeated float values = 2;
inline int GridVectorField2D::_internal_values_size() const {
  return values_.size();
}
inline int GridVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField2D::clear_values() {
  values_.Clear();
}
inline float GridVectorField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.values)
  return _internal_values(index);
}
inline void GridVectorField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField2D.values)
}
inline void GridVectorField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField3D

// .DTCC.Grid3D grid = 1;
inline bool GridVectorField3D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridVectorField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField3D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridVectorField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid3D&>(
      ::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridVectorField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.grid)
  return _internal_grid();
}
inline void GridVectorField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField3D.grid)
}
inline ::DTCC::Grid3D* GridVectorField3D::release_grid() {
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField3D.grid)
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid3D* GridVectorField3D::mutable_grid() {
  ::DTCC::Grid3D* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField3D.grid)
  return _msg;
}
inline void GridVectorField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid3D>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField3D.grid)
}

// repeated float values = 2;
inline int GridVectorField3D::_internal_values_size() const {
  return values_.size();
}
inline int GridVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField3D::clear_values() {
  values_.Clear();
}
inline float GridVectorField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.values)
  return _internal_values(index);
}
inline void GridVectorField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField3D.values)
}
inline void GridVectorField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField

// .DTCC.Mesh mesh = 1;
inline bool MeshField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshField::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh& MeshField::_internal_mesh() const {
  const ::DTCC::Mesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh&>(
      ::DTCC::_Mesh_default_instance_);
}
inline const ::DTCC::Mesh& MeshField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField.mesh)
  return _internal_mesh();
}
inline void MeshField::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField.mesh)
}
inline ::DTCC::Mesh* MeshField::release_mesh() {
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh* MeshField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField.mesh)
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh* MeshField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh* MeshField::mutable_mesh() {
  ::DTCC::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField.mesh)
  return _msg;
}
inline void MeshField::set_allocated_mesh(::DTCC::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Mesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField.mesh)
}

// repeated float values = 2;
inline int MeshField::_internal_values_size() const {
  return values_.size();
}
inline int MeshField::values_size() const {
  return _internal_values_size();
}
inline void MeshField::clear_values() {
  values_.Clear();
}
inline float MeshField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField.values)
  return _internal_values(index);
}
inline void MeshField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField.values)
}
inline void MeshField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField

// .DTCC.Mesh mesh = 1;
inline bool MeshVectorField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshVectorField::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh& MeshVectorField::_internal_mesh() const {
  const ::DTCC::Mesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh&>(
      ::DTCC::_Mesh_default_instance_);
}
inline const ::DTCC::Mesh& MeshVectorField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField.mesh)
  return _internal_mesh();
}
inline void MeshVectorField::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField.mesh)
}
inline ::DTCC::Mesh* MeshVectorField::release_mesh() {
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh* MeshVectorField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField.mesh)
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh* MeshVectorField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh* MeshVectorField::mutable_mesh() {
  ::DTCC::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField.mesh)
  return _msg;
}
inline void MeshVectorField::set_allocated_mesh(::DTCC::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Mesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField.mesh)
}

// repeated float values = 2;
inline int MeshVectorField::_internal_values_size() const {
  return values_.size();
}
inline int MeshVectorField::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField::clear_values() {
  values_.Clear();
}
inline float MeshVectorField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshVectorField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField.values)
  return _internal_values(index);
}
inline void MeshVectorField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField.values)
}
inline void MeshVectorField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshVectorField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VolumeMeshField

// .DTCC.VolumeMesh mesh = 1;
inline bool VolumeMeshField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool VolumeMeshField::has_mesh() const {
  return _internal_has_mesh();
}
inline void VolumeMeshField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::VolumeMesh& VolumeMeshField::_internal_mesh() const {
  const ::DTCC::VolumeMesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::VolumeMesh&>(
      ::DTCC::_VolumeMesh_default_instance_);
}
inline const ::DTCC::VolumeMesh& VolumeMeshField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshField.mesh)
  return _internal_mesh();
}
inline void VolumeMeshField::unsafe_arena_set_allocated_mesh(
    ::DTCC::VolumeMesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.VolumeMeshField.mesh)
}
inline ::DTCC::VolumeMesh* VolumeMeshField::release_mesh() {
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.VolumeMeshField.mesh)
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::VolumeMesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::mutable_mesh() {
  ::DTCC::VolumeMesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeMeshField.mesh)
  return _msg;
}
inline void VolumeMeshField::set_allocated_mesh(::DTCC::VolumeMesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::VolumeMesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.VolumeMeshField.mesh)
}

// repeated float values = 2;
inline int VolumeMeshField::_internal_values_size() const {
  return values_.size();
}
inline int VolumeMeshField::values_size() const {
  return _internal_values_size();
}
inline void VolumeMeshField::clear_values() {
  values_.Clear();
}
inline float VolumeMeshField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float VolumeMeshField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshField.values)
  return _internal_values(index);
}
inline void VolumeMeshField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMeshField.values)
}
inline void VolumeMeshField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void VolumeMeshField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMeshField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMeshField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMeshField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VolumeVectorField

// .DTCC.VolumeMesh mesh = 1;
inline bool VolumeVectorField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool VolumeVectorField::has_mesh() const {
  return _internal_has_mesh();
}
inline void VolumeVectorField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::VolumeMesh& VolumeVectorField::_internal_mesh() const {
  const ::DTCC::VolumeMesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::VolumeMesh&>(
      ::DTCC::_VolumeMesh_default_instance_);
}
inline const ::DTCC::VolumeMesh& VolumeVectorField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeVectorField.mesh)
  return _internal_mesh();
}
inline void VolumeVectorField::unsafe_arena_set_allocated_mesh(
    ::DTCC::VolumeMesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.VolumeVectorField.mesh)
}
inline ::DTCC::VolumeMesh* VolumeVectorField::release_mesh() {
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeVectorField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.VolumeVectorField.mesh)
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeVectorField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::VolumeMesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::VolumeMesh* VolumeVectorField::mutable_mesh() {
  ::DTCC::VolumeMesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeVectorField.mesh)
  return _msg;
}
inline void VolumeVectorField::set_allocated_mesh(::DTCC::VolumeMesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::VolumeMesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.VolumeVectorField.mesh)
}

// repeated float values = 2;
inline int VolumeVectorField::_internal_values_size() const {
  return values_.size();
}
inline int VolumeVectorField::values_size() const {
  return _internal_values_size();
}
inline void VolumeVectorField::clear_values() {
  values_.Clear();
}
inline float VolumeVectorField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float VolumeVectorField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeVectorField.values)
  return _internal_values(index);
}
inline void VolumeVectorField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeVectorField.values)
}
inline void VolumeVectorField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void VolumeVectorField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeVectorField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeVectorField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeVectorField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeVectorField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeVectorField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeVectorField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeVectorField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PointCloud

// repeated .DTCC.Vector3D points = 1;
inline int PointCloud::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline ::DTCC::Vector3D* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.points)
  return &points_;
}
inline const ::DTCC::Vector3D& PointCloud::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::DTCC::Vector3D& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.points)
  return _internal_points(index);
}
inline ::DTCC::Vector3D* PointCloud::_internal_add_points() {
  return points_.Add();
}
inline ::DTCC::Vector3D* PointCloud::add_points() {
  ::DTCC::Vector3D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.points)
  return points_;
}

// .DTCC.BoundingBox2D bounds = 2;
inline bool PointCloud::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool PointCloud::has_bounds() const {
  return _internal_has_bounds();
}
inline void PointCloud::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& PointCloud::_internal_bounds() const {
  const ::DTCC::BoundingBox2D* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox2D&>(
      ::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& PointCloud::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.bounds)
  return _internal_bounds();
}
inline void PointCloud::unsafe_arena_set_allocated_bounds(
    ::DTCC::BoundingBox2D* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.bounds)
}
inline ::DTCC::BoundingBox2D* PointCloud::release_bounds() {
  
  ::DTCC::BoundingBox2D* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox2D* PointCloud::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.bounds)
  
  ::DTCC::BoundingBox2D* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* PointCloud::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::DTCC::BoundingBox2D* PointCloud::mutable_bounds() {
  ::DTCC::BoundingBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.bounds)
  return _msg;
}
inline void PointCloud::set_allocated_bounds(::DTCC::BoundingBox2D* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::BoundingBox2D>::GetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.bounds)
}

// repeated uint32 classification = 3;
inline int PointCloud::_internal_classification_size() const {
  return classification_.size();
}
inline int PointCloud::classification_size() const {
  return _internal_classification_size();
}
inline void PointCloud::clear_classification() {
  classification_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_classification(int index) const {
  return classification_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::classification(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.classification)
  return _internal_classification(index);
}
inline void PointCloud::set_classification(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classification_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.classification)
}
inline void PointCloud::_internal_add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classification_.Add(value);
}
inline void PointCloud::add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_classification(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.classification)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_classification() const {
  return classification_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::classification() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.classification)
  return _internal_classification();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_classification() {
  return &classification_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_classification() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.classification)
  return _internal_mutable_classification();
}

// repeated uint32 intensity = 4;
inline int PointCloud::_internal_intensity_size() const {
  return intensity_.size();
}
inline int PointCloud::intensity_size() const {
  return _internal_intensity_size();
}
inline void PointCloud::clear_intensity() {
  intensity_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_intensity(int index) const {
  return intensity_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::intensity(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.intensity)
  return _internal_intensity(index);
}
inline void PointCloud::set_intensity(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.intensity)
}
inline void PointCloud::_internal_add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensity_.Add(value);
}
inline void PointCloud::add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_intensity(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.intensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_intensity() const {
  return intensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::intensity() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.intensity)
  return _internal_intensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_intensity() {
  return &intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.intensity)
  return _internal_mutable_intensity();
}

// repeated uint32 returnNumber = 5;
inline int PointCloud::_internal_returnnumber_size() const {
  return returnnumber_.size();
}
inline int PointCloud::returnnumber_size() const {
  return _internal_returnnumber_size();
}
inline void PointCloud::clear_returnnumber() {
  returnnumber_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_returnnumber(int index) const {
  return returnnumber_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::returnnumber(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.returnNumber)
  return _internal_returnnumber(index);
}
inline void PointCloud::set_returnnumber(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  returnnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.returnNumber)
}
inline void PointCloud::_internal_add_returnnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  returnnumber_.Add(value);
}
inline void PointCloud::add_returnnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_returnnumber(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.returnNumber)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_returnnumber() const {
  return returnnumber_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::returnnumber() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.returnNumber)
  return _internal_returnnumber();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_returnnumber() {
  return &returnnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_returnnumber() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.returnNumber)
  return _internal_mutable_returnnumber();
}

// repeated uint32 numReturns = 6;
inline int PointCloud::_internal_numreturns_size() const {
  return numreturns_.size();
}
inline int PointCloud::numreturns_size() const {
  return _internal_numreturns_size();
}
inline void PointCloud::clear_numreturns() {
  numreturns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_numreturns(int index) const {
  return numreturns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::numreturns(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.numReturns)
  return _internal_numreturns(index);
}
inline void PointCloud::set_numreturns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numreturns_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.numReturns)
}
inline void PointCloud::_internal_add_numreturns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numreturns_.Add(value);
}
inline void PointCloud::add_numreturns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_numreturns(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.numReturns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_numreturns() const {
  return numreturns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::numreturns() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.numReturns)
  return _internal_numreturns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_numreturns() {
  return &numreturns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_numreturns() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.numReturns)
  return _internal_mutable_numreturns();
}

// repeated uint32 usedClassifications = 7;
inline int PointCloud::_internal_usedclassifications_size() const {
  return usedclassifications_.size();
}
inline int PointCloud::usedclassifications_size() const {
  return _internal_usedclassifications_size();
}
inline void PointCloud::clear_usedclassifications() {
  usedclassifications_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_usedclassifications(int index) const {
  return usedclassifications_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::usedclassifications(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.usedClassifications)
  return _internal_usedclassifications(index);
}
inline void PointCloud::set_usedclassifications(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  usedclassifications_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.usedClassifications)
}
inline void PointCloud::_internal_add_usedclassifications(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  usedclassifications_.Add(value);
}
inline void PointCloud::add_usedclassifications(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_usedclassifications(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.usedClassifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_usedclassifications() const {
  return usedclassifications_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::usedclassifications() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.usedClassifications)
  return _internal_usedclassifications();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_usedclassifications() {
  return &usedclassifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_usedclassifications() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.usedClassifications)
  return _internal_mutable_usedclassifications();
}

// .DTCC.Georeference georeference = 8;
inline bool PointCloud::_internal_has_georeference() const {
  return this != internal_default_instance() && georeference_ != nullptr;
}
inline bool PointCloud::has_georeference() const {
  return _internal_has_georeference();
}
inline void PointCloud::clear_georeference() {
  if (GetArenaForAllocation() == nullptr && georeference_ != nullptr) {
    delete georeference_;
  }
  georeference_ = nullptr;
}
inline const ::DTCC::Georeference& PointCloud::_internal_georeference() const {
  const ::DTCC::Georeference* p = georeference_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georeference&>(
      ::DTCC::_Georeference_default_instance_);
}
inline const ::DTCC::Georeference& PointCloud::georeference() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.georeference)
  return _internal_georeference();
}
inline void PointCloud::unsafe_arena_set_allocated_georeference(
    ::DTCC::Georeference* georeference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(georeference_);
  }
  georeference_ = georeference;
  if (georeference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.georeference)
}
inline ::DTCC::Georeference* PointCloud::release_georeference() {
  
  ::DTCC::Georeference* temp = georeference_;
  georeference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georeference* PointCloud::unsafe_arena_release_georeference() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.georeference)
  
  ::DTCC::Georeference* temp = georeference_;
  georeference_ = nullptr;
  return temp;
}
inline ::DTCC::Georeference* PointCloud::_internal_mutable_georeference() {
  
  if (georeference_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georeference>(GetArenaForAllocation());
    georeference_ = p;
  }
  return georeference_;
}
inline ::DTCC::Georeference* PointCloud::mutable_georeference() {
  ::DTCC::Georeference* _msg = _internal_mutable_georeference();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.georeference)
  return _msg;
}
inline void PointCloud::set_allocated_georeference(::DTCC::Georeference* georeference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete georeference_;
  }
  if (georeference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Georeference>::GetOwningArena(georeference);
    if (message_arena != submessage_arena) {
      georeference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georeference, submessage_arena);
    }
    
  } else {
    
  }
  georeference_ = georeference;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.georeference)
}

// -------------------------------------------------------------------

// Building

// string uuid = 1;
inline void Building::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Building::uuid() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Building::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Building.uuid)
}
inline std::string* Building::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.uuid)
  return _s;
}
inline const std::string& Building::_internal_uuid() const {
  return uuid_.Get();
}
inline void Building::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Building::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Building::release_uuid() {
  // @@protoc_insertion_point(field_release:DTCC.Building.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Building::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.uuid)
}

// .DTCC.Polygon footPrint = 2;
inline bool Building::_internal_has_footprint() const {
  return this != internal_default_instance() && footprint_ != nullptr;
}
inline bool Building::has_footprint() const {
  return _internal_has_footprint();
}
inline void Building::clear_footprint() {
  if (GetArenaForAllocation() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
}
inline const ::DTCC::Polygon& Building::_internal_footprint() const {
  const ::DTCC::Polygon* p = footprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Polygon&>(
      ::DTCC::_Polygon_default_instance_);
}
inline const ::DTCC::Polygon& Building::footprint() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.footPrint)
  return _internal_footprint();
}
inline void Building::unsafe_arena_set_allocated_footprint(
    ::DTCC::Polygon* footprint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footprint_);
  }
  footprint_ = footprint;
  if (footprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.footPrint)
}
inline ::DTCC::Polygon* Building::release_footprint() {
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Polygon* Building::unsafe_arena_release_footprint() {
  // @@protoc_insertion_point(field_release:DTCC.Building.footPrint)
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
  return temp;
}
inline ::DTCC::Polygon* Building::_internal_mutable_footprint() {
  
  if (footprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Polygon>(GetArenaForAllocation());
    footprint_ = p;
  }
  return footprint_;
}
inline ::DTCC::Polygon* Building::mutable_footprint() {
  ::DTCC::Polygon* _msg = _internal_mutable_footprint();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.footPrint)
  return _msg;
}
inline void Building::set_allocated_footprint(::DTCC::Polygon* footprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete footprint_;
  }
  if (footprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Polygon>::GetOwningArena(footprint);
    if (message_arena != submessage_arena) {
      footprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footprint, submessage_arena);
    }
    
  } else {
    
  }
  footprint_ = footprint;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.footPrint)
}

// double height = 3;
inline void Building::clear_height() {
  height_ = 0;
}
inline double Building::_internal_height() const {
  return height_;
}
inline double Building::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.height)
  return _internal_height();
}
inline void Building::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Building::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.height)
}

// double groundHeight = 4;
inline void Building::clear_groundheight() {
  groundheight_ = 0;
}
inline double Building::_internal_groundheight() const {
  return groundheight_;
}
inline double Building::groundheight() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.groundHeight)
  return _internal_groundheight();
}
inline void Building::_internal_set_groundheight(double value) {
  
  groundheight_ = value;
}
inline void Building::set_groundheight(double value) {
  _internal_set_groundheight(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.groundHeight)
}

// .DTCC.PointCloud roofpoints = 5;
inline bool Building::_internal_has_roofpoints() const {
  return this != internal_default_instance() && roofpoints_ != nullptr;
}
inline bool Building::has_roofpoints() const {
  return _internal_has_roofpoints();
}
inline void Building::clear_roofpoints() {
  if (GetArenaForAllocation() == nullptr && roofpoints_ != nullptr) {
    delete roofpoints_;
  }
  roofpoints_ = nullptr;
}
inline const ::DTCC::PointCloud& Building::_internal_roofpoints() const {
  const ::DTCC::PointCloud* p = roofpoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::PointCloud&>(
      ::DTCC::_PointCloud_default_instance_);
}
inline const ::DTCC::PointCloud& Building::roofpoints() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.roofpoints)
  return _internal_roofpoints();
}
inline void Building::unsafe_arena_set_allocated_roofpoints(
    ::DTCC::PointCloud* roofpoints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roofpoints_);
  }
  roofpoints_ = roofpoints;
  if (roofpoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.roofpoints)
}
inline ::DTCC::PointCloud* Building::release_roofpoints() {
  
  ::DTCC::PointCloud* temp = roofpoints_;
  roofpoints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::PointCloud* Building::unsafe_arena_release_roofpoints() {
  // @@protoc_insertion_point(field_release:DTCC.Building.roofpoints)
  
  ::DTCC::PointCloud* temp = roofpoints_;
  roofpoints_ = nullptr;
  return temp;
}
inline ::DTCC::PointCloud* Building::_internal_mutable_roofpoints() {
  
  if (roofpoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::PointCloud>(GetArenaForAllocation());
    roofpoints_ = p;
  }
  return roofpoints_;
}
inline ::DTCC::PointCloud* Building::mutable_roofpoints() {
  ::DTCC::PointCloud* _msg = _internal_mutable_roofpoints();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.roofpoints)
  return _msg;
}
inline void Building::set_allocated_roofpoints(::DTCC::PointCloud* roofpoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roofpoints_;
  }
  if (roofpoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::PointCloud>::GetOwningArena(roofpoints);
    if (message_arena != submessage_arena) {
      roofpoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roofpoints, submessage_arena);
    }
    
  } else {
    
  }
  roofpoints_ = roofpoints;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.roofpoints)
}

// uint64 error = 6;
inline void Building::clear_error() {
  error_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Building::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Building::error() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.error)
  return _internal_error();
}
inline void Building::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  error_ = value;
}
inline void Building::set_error(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.error)
}

// -------------------------------------------------------------------

// CityModel

// repeated .DTCC.Building buildings = 1;
inline int CityModel::_internal_buildings_size() const {
  return buildings_.size();
}
inline int CityModel::buildings_size() const {
  return _internal_buildings_size();
}
inline void CityModel::clear_buildings() {
  buildings_.Clear();
}
inline ::DTCC::Building* CityModel::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.buildings)
  return buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
CityModel::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.CityModel.buildings)
  return &buildings_;
}
inline const ::DTCC::Building& CityModel::_internal_buildings(int index) const {
  return buildings_.Get(index);
}
inline const ::DTCC::Building& CityModel::buildings(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.buildings)
  return _internal_buildings(index);
}
inline ::DTCC::Building* CityModel::_internal_add_buildings() {
  return buildings_.Add();
}
inline ::DTCC::Building* CityModel::add_buildings() {
  ::DTCC::Building* _add = _internal_add_buildings();
  // @@protoc_insertion_point(field_add:DTCC.CityModel.buildings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
CityModel::buildings() const {
  // @@protoc_insertion_point(field_list:DTCC.CityModel.buildings)
  return buildings_;
}

// .DTCC.BoundingBox2D bounds = 2;
inline bool CityModel::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool CityModel::has_bounds() const {
  return _internal_has_bounds();
}
inline void CityModel::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& CityModel::_internal_bounds() const {
  const ::DTCC::BoundingBox2D* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::BoundingBox2D&>(
      ::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& CityModel::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.bounds)
  return _internal_bounds();
}
inline void CityModel::unsafe_arena_set_allocated_bounds(
    ::DTCC::BoundingBox2D* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.CityModel.bounds)
}
inline ::DTCC::BoundingBox2D* CityModel::release_bounds() {
  
  ::DTCC::BoundingBox2D* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::BoundingBox2D* CityModel::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.CityModel.bounds)
  
  ::DTCC::BoundingBox2D* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* CityModel::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::DTCC::BoundingBox2D* CityModel::mutable_bounds() {
  ::DTCC::BoundingBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.bounds)
  return _msg;
}
inline void CityModel::set_allocated_bounds(::DTCC::BoundingBox2D* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::BoundingBox2D>::GetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.CityModel.bounds)
}

// .DTCC.Georeference georeference = 3;
inline bool CityModel::_internal_has_georeference() const {
  return this != internal_default_instance() && georeference_ != nullptr;
}
inline bool CityModel::has_georeference() const {
  return _internal_has_georeference();
}
inline void CityModel::clear_georeference() {
  if (GetArenaForAllocation() == nullptr && georeference_ != nullptr) {
    delete georeference_;
  }
  georeference_ = nullptr;
}
inline const ::DTCC::Georeference& CityModel::_internal_georeference() const {
  const ::DTCC::Georeference* p = georeference_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georeference&>(
      ::DTCC::_Georeference_default_instance_);
}
inline const ::DTCC::Georeference& CityModel::georeference() const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.georeference)
  return _internal_georeference();
}
inline void CityModel::unsafe_arena_set_allocated_georeference(
    ::DTCC::Georeference* georeference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(georeference_);
  }
  georeference_ = georeference;
  if (georeference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.CityModel.georeference)
}
inline ::DTCC::Georeference* CityModel::release_georeference() {
  
  ::DTCC::Georeference* temp = georeference_;
  georeference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georeference* CityModel::unsafe_arena_release_georeference() {
  // @@protoc_insertion_point(field_release:DTCC.CityModel.georeference)
  
  ::DTCC::Georeference* temp = georeference_;
  georeference_ = nullptr;
  return temp;
}
inline ::DTCC::Georeference* CityModel::_internal_mutable_georeference() {
  
  if (georeference_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georeference>(GetArenaForAllocation());
    georeference_ = p;
  }
  return georeference_;
}
inline ::DTCC::Georeference* CityModel::mutable_georeference() {
  ::DTCC::Georeference* _msg = _internal_mutable_georeference();
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.georeference)
  return _msg;
}
inline void CityModel::set_allocated_georeference(::DTCC::Georeference* georeference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete georeference_;
  }
  if (georeference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Georeference>::GetOwningArena(georeference);
    if (message_arena != submessage_arena) {
      georeference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georeference, submessage_arena);
    }
    
  } else {
    
  }
  georeference_ = georeference;
  // @@protoc_insertion_point(field_set_allocated:DTCC.CityModel.georeference)
}

// .DTCC.GridField2D terrain = 4;
inline bool CityModel::_internal_has_terrain() const {
  return this != internal_default_instance() && terrain_ != nullptr;
}
inline bool CityModel::has_terrain() const {
  return _internal_has_terrain();
}
inline void CityModel::clear_terrain() {
  if (GetArenaForAllocation() == nullptr && terrain_ != nullptr) {
    delete terrain_;
  }
  terrain_ = nullptr;
}
inline const ::DTCC::GridField2D& CityModel::_internal_terrain() const {
  const ::DTCC::GridField2D* p = terrain_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::GridField2D&>(
      ::DTCC::_GridField2D_default_instance_);
}
inline const ::DTCC::GridField2D& CityModel::terrain() const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.terrain)
  return _internal_terrain();
}
inline void CityModel::unsafe_arena_set_allocated_terrain(
    ::DTCC::GridField2D* terrain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terrain_);
  }
  terrain_ = terrain;
  if (terrain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.CityModel.terrain)
}
inline ::DTCC::GridField2D* CityModel::release_terrain() {
  
  ::DTCC::GridField2D* temp = terrain_;
  terrain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::GridField2D* CityModel::unsafe_arena_release_terrain() {
  // @@protoc_insertion_point(field_release:DTCC.CityModel.terrain)
  
  ::DTCC::GridField2D* temp = terrain_;
  terrain_ = nullptr;
  return temp;
}
inline ::DTCC::GridField2D* CityModel::_internal_mutable_terrain() {
  
  if (terrain_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::GridField2D>(GetArenaForAllocation());
    terrain_ = p;
  }
  return terrain_;
}
inline ::DTCC::GridField2D* CityModel::mutable_terrain() {
  ::DTCC::GridField2D* _msg = _internal_mutable_terrain();
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.terrain)
  return _msg;
}
inline void CityModel::set_allocated_terrain(::DTCC::GridField2D* terrain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete terrain_;
  }
  if (terrain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::GridField2D>::GetOwningArena(terrain);
    if (message_arena != submessage_arena) {
      terrain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terrain, submessage_arena);
    }
    
  } else {
    
  }
  terrain_ = terrain;
  // @@protoc_insertion_point(field_set_allocated:DTCC.CityModel.terrain)
}

// -------------------------------------------------------------------

// Georeference

// string crs = 1;
inline void Georeference::clear_crs() {
  crs_.ClearToEmpty();
}
inline const std::string& Georeference::crs() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.crs)
  return _internal_crs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Georeference::set_crs(ArgT0&& arg0, ArgT... args) {
 
 crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Georeference.crs)
}
inline std::string* Georeference::mutable_crs() {
  std::string* _s = _internal_mutable_crs();
  // @@protoc_insertion_point(field_mutable:DTCC.Georeference.crs)
  return _s;
}
inline const std::string& Georeference::_internal_crs() const {
  return crs_.Get();
}
inline void Georeference::_internal_set_crs(const std::string& value) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Georeference::_internal_mutable_crs() {
  
  return crs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Georeference::release_crs() {
  // @@protoc_insertion_point(field_release:DTCC.Georeference.crs)
  return crs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Georeference::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  crs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Georeference.crs)
}

// int32 epsg = 2;
inline void Georeference::clear_epsg() {
  epsg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Georeference::_internal_epsg() const {
  return epsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Georeference::epsg() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.epsg)
  return _internal_epsg();
}
inline void Georeference::_internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epsg_ = value;
}
inline void Georeference::set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.epsg)
}

// double x0 = 3;
inline void Georeference::clear_x0() {
  x0_ = 0;
}
inline double Georeference::_internal_x0() const {
  return x0_;
}
inline double Georeference::x0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.x0)
  return _internal_x0();
}
inline void Georeference::_internal_set_x0(double value) {
  
  x0_ = value;
}
inline void Georeference::set_x0(double value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.x0)
}

// double y0 = 4;
inline void Georeference::clear_y0() {
  y0_ = 0;
}
inline double Georeference::_internal_y0() const {
  return y0_;
}
inline double Georeference::y0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georeference.y0)
  return _internal_y0();
}
inline void Georeference::_internal_set_y0(double value) {
  
  y0_ = value;
}
inline void Georeference::set_y0(double value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georeference.y0)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTCC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
