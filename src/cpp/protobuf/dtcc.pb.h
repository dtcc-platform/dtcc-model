// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtcc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace DTCC {
class AffineTransform;
struct AffineTransformDefaultTypeInternal;
extern AffineTransformDefaultTypeInternal _AffineTransform_default_instance_;
class Bounds;
struct BoundsDefaultTypeInternal;
extern BoundsDefaultTypeInternal _Bounds_default_instance_;
class Building;
struct BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
class City;
struct CityDefaultTypeInternal;
extern CityDefaultTypeInternal _City_default_instance_;
class Georef;
struct GeorefDefaultTypeInternal;
extern GeorefDefaultTypeInternal _Georef_default_instance_;
class Grid;
struct GridDefaultTypeInternal;
extern GridDefaultTypeInternal _Grid_default_instance_;
class GridField;
struct GridFieldDefaultTypeInternal;
extern GridFieldDefaultTypeInternal _GridField_default_instance_;
class GridVectorField;
struct GridVectorFieldDefaultTypeInternal;
extern GridVectorFieldDefaultTypeInternal _GridVectorField_default_instance_;
class LandUse;
struct LandUseDefaultTypeInternal;
extern LandUseDefaultTypeInternal _LandUse_default_instance_;
class LineString;
struct LineStringDefaultTypeInternal;
extern LineStringDefaultTypeInternal _LineString_default_instance_;
class LineString3D;
struct LineString3DDefaultTypeInternal;
extern LineString3DDefaultTypeInternal _LineString3D_default_instance_;
class LinearRing;
struct LinearRingDefaultTypeInternal;
extern LinearRingDefaultTypeInternal _LinearRing_default_instance_;
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class MeshField;
struct MeshFieldDefaultTypeInternal;
extern MeshFieldDefaultTypeInternal _MeshField_default_instance_;
class MeshVectorField;
struct MeshVectorFieldDefaultTypeInternal;
extern MeshVectorFieldDefaultTypeInternal _MeshVectorField_default_instance_;
class MultiPoint;
struct MultiPointDefaultTypeInternal;
extern MultiPointDefaultTypeInternal _MultiPoint_default_instance_;
class MultiPoint3D;
struct MultiPoint3DDefaultTypeInternal;
extern MultiPoint3DDefaultTypeInternal _MultiPoint3D_default_instance_;
class MultiPolygon;
struct MultiPolygonDefaultTypeInternal;
extern MultiPolygonDefaultTypeInternal _MultiPolygon_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Raster;
struct RasterDefaultTypeInternal;
extern RasterDefaultTypeInternal _Raster_default_instance_;
class Road;
struct RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
class RoadNetwork;
struct RoadNetworkDefaultTypeInternal;
extern RoadNetworkDefaultTypeInternal _RoadNetwork_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector2D;
struct Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
class VolumeMesh;
struct VolumeMeshDefaultTypeInternal;
extern VolumeMeshDefaultTypeInternal _VolumeMesh_default_instance_;
class VolumeMeshField;
struct VolumeMeshFieldDefaultTypeInternal;
extern VolumeMeshFieldDefaultTypeInternal _VolumeMeshField_default_instance_;
class VolumeMeshVectorField;
struct VolumeMeshVectorFieldDefaultTypeInternal;
extern VolumeMeshVectorFieldDefaultTypeInternal _VolumeMeshVectorField_default_instance_;
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> ::DTCC::AffineTransform* Arena::CreateMaybeMessage<::DTCC::AffineTransform>(Arena*);
template<> ::DTCC::Bounds* Arena::CreateMaybeMessage<::DTCC::Bounds>(Arena*);
template<> ::DTCC::Building* Arena::CreateMaybeMessage<::DTCC::Building>(Arena*);
template<> ::DTCC::City* Arena::CreateMaybeMessage<::DTCC::City>(Arena*);
template<> ::DTCC::Georef* Arena::CreateMaybeMessage<::DTCC::Georef>(Arena*);
template<> ::DTCC::Grid* Arena::CreateMaybeMessage<::DTCC::Grid>(Arena*);
template<> ::DTCC::GridField* Arena::CreateMaybeMessage<::DTCC::GridField>(Arena*);
template<> ::DTCC::GridVectorField* Arena::CreateMaybeMessage<::DTCC::GridVectorField>(Arena*);
template<> ::DTCC::LandUse* Arena::CreateMaybeMessage<::DTCC::LandUse>(Arena*);
template<> ::DTCC::LineString* Arena::CreateMaybeMessage<::DTCC::LineString>(Arena*);
template<> ::DTCC::LineString3D* Arena::CreateMaybeMessage<::DTCC::LineString3D>(Arena*);
template<> ::DTCC::LinearRing* Arena::CreateMaybeMessage<::DTCC::LinearRing>(Arena*);
template<> ::DTCC::Mesh* Arena::CreateMaybeMessage<::DTCC::Mesh>(Arena*);
template<> ::DTCC::MeshField* Arena::CreateMaybeMessage<::DTCC::MeshField>(Arena*);
template<> ::DTCC::MeshVectorField* Arena::CreateMaybeMessage<::DTCC::MeshVectorField>(Arena*);
template<> ::DTCC::MultiPoint* Arena::CreateMaybeMessage<::DTCC::MultiPoint>(Arena*);
template<> ::DTCC::MultiPoint3D* Arena::CreateMaybeMessage<::DTCC::MultiPoint3D>(Arena*);
template<> ::DTCC::MultiPolygon* Arena::CreateMaybeMessage<::DTCC::MultiPolygon>(Arena*);
template<> ::DTCC::PointCloud* Arena::CreateMaybeMessage<::DTCC::PointCloud>(Arena*);
template<> ::DTCC::Polygon* Arena::CreateMaybeMessage<::DTCC::Polygon>(Arena*);
template<> ::DTCC::Raster* Arena::CreateMaybeMessage<::DTCC::Raster>(Arena*);
template<> ::DTCC::Road* Arena::CreateMaybeMessage<::DTCC::Road>(Arena*);
template<> ::DTCC::RoadNetwork* Arena::CreateMaybeMessage<::DTCC::RoadNetwork>(Arena*);
template<> ::DTCC::Transform* Arena::CreateMaybeMessage<::DTCC::Transform>(Arena*);
template<> ::DTCC::Vector2D* Arena::CreateMaybeMessage<::DTCC::Vector2D>(Arena*);
template<> ::DTCC::Vector3D* Arena::CreateMaybeMessage<::DTCC::Vector3D>(Arena*);
template<> ::DTCC::VolumeMesh* Arena::CreateMaybeMessage<::DTCC::VolumeMesh>(Arena*);
template<> ::DTCC::VolumeMeshField* Arena::CreateMaybeMessage<::DTCC::VolumeMeshField>(Arena*);
template<> ::DTCC::VolumeMeshVectorField* Arena::CreateMaybeMessage<::DTCC::VolumeMeshVectorField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DTCC {

// ===================================================================

class Vector2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {}
  ~Vector2D() override;
  explicit constexpr Vector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return new Vector2D();
  }

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Vector3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  explicit constexpr Vector3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return new Vector3D();
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector3D";
  }
  protected:
  explicit Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint) */ {
 public:
  inline MultiPoint() : MultiPoint(nullptr) {}
  ~MultiPoint() override;
  explicit constexpr MultiPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint(const MultiPoint& from);
  MultiPoint(MultiPoint&& from) noexcept
    : MultiPoint() {
    *this = ::std::move(from);
  }

  inline MultiPoint& operator=(const MultiPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint& operator=(MultiPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint* internal_default_instance() {
    return reinterpret_cast<const MultiPoint*>(
               &_MultiPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiPoint& a, MultiPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPoint* New() const final {
    return new MultiPoint();
  }

  MultiPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint& from);
  void MergeFrom(const MultiPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint";
  }
  protected:
  explicit MultiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_points();
  private:
  const ::DTCC::Vector2D& _internal_points(int index) const;
  ::DTCC::Vector2D* _internal_add_points();
  public:
  const ::DTCC::Vector2D& points(int index) const;
  ::DTCC::Vector2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPoint3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPoint3D) */ {
 public:
  inline MultiPoint3D() : MultiPoint3D(nullptr) {}
  ~MultiPoint3D() override;
  explicit constexpr MultiPoint3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPoint3D(const MultiPoint3D& from);
  MultiPoint3D(MultiPoint3D&& from) noexcept
    : MultiPoint3D() {
    *this = ::std::move(from);
  }

  inline MultiPoint3D& operator=(const MultiPoint3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPoint3D& operator=(MultiPoint3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPoint3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPoint3D* internal_default_instance() {
    return reinterpret_cast<const MultiPoint3D*>(
               &_MultiPoint3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiPoint3D& a, MultiPoint3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPoint3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPoint3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPoint3D* New() const final {
    return new MultiPoint3D();
  }

  MultiPoint3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPoint3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPoint3D& from);
  void MergeFrom(const MultiPoint3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPoint3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPoint3D";
  }
  protected:
  explicit MultiPoint3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::DTCC::Vector3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_points();
  private:
  const ::DTCC::Vector3D& _internal_points(int index) const;
  ::DTCC::Vector3D* _internal_add_points();
  public:
  const ::DTCC::Vector3D& points(int index) const;
  ::DTCC::Vector3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      points() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPoint3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString) */ {
 public:
  inline LineString() : LineString(nullptr) {}
  ~LineString() override;
  explicit constexpr LineString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString(const LineString& from);
  LineString(LineString&& from) noexcept
    : LineString() {
    *this = ::std::move(from);
  }

  inline LineString& operator=(const LineString& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString& operator=(LineString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString* internal_default_instance() {
    return reinterpret_cast<const LineString*>(
               &_LineString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LineString& a, LineString& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineString* New() const final {
    return new LineString();
  }

  LineString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString& from);
  void MergeFrom(const LineString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString";
  }
  protected:
  explicit LineString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LineString3D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LineString3D) */ {
 public:
  inline LineString3D() : LineString3D(nullptr) {}
  ~LineString3D() override;
  explicit constexpr LineString3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineString3D(const LineString3D& from);
  LineString3D(LineString3D&& from) noexcept
    : LineString3D() {
    *this = ::std::move(from);
  }

  inline LineString3D& operator=(const LineString3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineString3D& operator=(LineString3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineString3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineString3D* internal_default_instance() {
    return reinterpret_cast<const LineString3D*>(
               &_LineString3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LineString3D& a, LineString3D& b) {
    a.Swap(&b);
  }
  inline void Swap(LineString3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineString3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineString3D* New() const final {
    return new LineString3D();
  }

  LineString3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineString3D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LineString3D& from);
  void MergeFrom(const LineString3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LineString3D";
  }
  protected:
  explicit LineString3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LineString3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LinearRing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LinearRing) */ {
 public:
  inline LinearRing() : LinearRing(nullptr) {}
  ~LinearRing() override;
  explicit constexpr LinearRing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinearRing(const LinearRing& from);
  LinearRing(LinearRing&& from) noexcept
    : LinearRing() {
    *this = ::std::move(from);
  }

  inline LinearRing& operator=(const LinearRing& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearRing& operator=(LinearRing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinearRing& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearRing* internal_default_instance() {
    return reinterpret_cast<const LinearRing*>(
               &_LinearRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LinearRing& a, LinearRing& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearRing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearRing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearRing* New() const final {
    return new LinearRing();
  }

  LinearRing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearRing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinearRing& from);
  void MergeFrom(const LinearRing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinearRing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LinearRing";
  }
  protected:
  explicit LinearRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.LinearRing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return new Polygon();
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolesFieldNumber = 2,
    kShellFieldNumber = 1,
  };
  // repeated .DTCC.LinearRing holes = 2;
  int holes_size() const;
  private:
  int _internal_holes_size() const;
  public:
  void clear_holes();
  ::DTCC::LinearRing* mutable_holes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
      mutable_holes();
  private:
  const ::DTCC::LinearRing& _internal_holes(int index) const;
  ::DTCC::LinearRing* _internal_add_holes();
  public:
  const ::DTCC::LinearRing& holes(int index) const;
  ::DTCC::LinearRing* add_holes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
      holes() const;

  // .DTCC.LinearRing shell = 1;
  bool has_shell() const;
  private:
  bool _internal_has_shell() const;
  public:
  void clear_shell();
  const ::DTCC::LinearRing& shell() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::LinearRing* release_shell();
  ::DTCC::LinearRing* mutable_shell();
  void set_allocated_shell(::DTCC::LinearRing* shell);
  private:
  const ::DTCC::LinearRing& _internal_shell() const;
  ::DTCC::LinearRing* _internal_mutable_shell();
  public:
  void unsafe_arena_set_allocated_shell(
      ::DTCC::LinearRing* shell);
  ::DTCC::LinearRing* unsafe_arena_release_shell();

  // @@protoc_insertion_point(class_scope:DTCC.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing > holes_;
  ::DTCC::LinearRing* shell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MultiPolygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MultiPolygon) */ {
 public:
  inline MultiPolygon() : MultiPolygon(nullptr) {}
  ~MultiPolygon() override;
  explicit constexpr MultiPolygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPolygon(const MultiPolygon& from);
  MultiPolygon(MultiPolygon&& from) noexcept
    : MultiPolygon() {
    *this = ::std::move(from);
  }

  inline MultiPolygon& operator=(const MultiPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPolygon& operator=(MultiPolygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MultiPolygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPolygon* internal_default_instance() {
    return reinterpret_cast<const MultiPolygon*>(
               &_MultiPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MultiPolygon& a, MultiPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPolygon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPolygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPolygon* New() const final {
    return new MultiPolygon();
  }

  MultiPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPolygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiPolygon& from);
  void MergeFrom(const MultiPolygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPolygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MultiPolygon";
  }
  protected:
  explicit MultiPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
  };
  // repeated .DTCC.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::DTCC::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
      mutable_polygons();
  private:
  const ::DTCC::Polygon& _internal_polygons(int index) const;
  ::DTCC::Polygon* _internal_add_polygons();
  public:
  const ::DTCC::Polygon& polygons(int index) const;
  ::DTCC::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:DTCC.MultiPolygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon > polygons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Bounds final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Bounds) */ {
 public:
  inline Bounds() : Bounds(nullptr) {}
  ~Bounds() override;
  explicit constexpr Bounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bounds(const Bounds& from);
  Bounds(Bounds&& from) noexcept
    : Bounds() {
    *this = ::std::move(from);
  }

  inline Bounds& operator=(const Bounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bounds& operator=(Bounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Bounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bounds* internal_default_instance() {
    return reinterpret_cast<const Bounds*>(
               &_Bounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Bounds& a, Bounds& b) {
    a.Swap(&b);
  }
  inline void Swap(Bounds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bounds* New() const final {
    return new Bounds();
  }

  Bounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bounds>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Bounds& from);
  void MergeFrom(const Bounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Bounds";
  }
  protected:
  explicit Bounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kXmaxFieldNumber = 2,
    kYminFieldNumber = 3,
    kYmaxFieldNumber = 4,
  };
  // float xmin = 1;
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // float xmax = 2;
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // float ymin = 3;
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // float ymax = 4;
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Bounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float xmin_;
  float xmax_;
  float ymin_;
  float ymax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Georef final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Georef) */ {
 public:
  inline Georef() : Georef(nullptr) {}
  ~Georef() override;
  explicit constexpr Georef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Georef(const Georef& from);
  Georef(Georef&& from) noexcept
    : Georef() {
    *this = ::std::move(from);
  }

  inline Georef& operator=(const Georef& from) {
    CopyFrom(from);
    return *this;
  }
  inline Georef& operator=(Georef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Georef& default_instance() {
    return *internal_default_instance();
  }
  static inline const Georef* internal_default_instance() {
    return reinterpret_cast<const Georef*>(
               &_Georef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Georef& a, Georef& b) {
    a.Swap(&b);
  }
  inline void Swap(Georef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Georef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Georef* New() const final {
    return new Georef();
  }

  Georef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Georef>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Georef& from);
  void MergeFrom(const Georef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Georef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Georef";
  }
  protected:
  explicit Georef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrsFieldNumber = 1,
    kEpsgFieldNumber = 2,
    kX0FieldNumber = 3,
    kY0FieldNumber = 4,
  };
  // string crs = 1;
  void clear_crs();
  const std::string& crs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crs();
  PROTOBUF_MUST_USE_RESULT std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // int32 epsg = 2;
  void clear_epsg();
  ::PROTOBUF_NAMESPACE_ID::int32 epsg() const;
  void set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsg() const;
  void _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x0 = 3;
  void clear_x0();
  float x0() const;
  void set_x0(float value);
  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);
  public:

  // float y0 = 4;
  void clear_y0();
  float y0() const;
  void set_y0(float value);
  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Georef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsg_;
  float x0_;
  float y0_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return new Transform();
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffineFieldNumber = 2,
    kSrsFieldNumber = 1,
  };
  // repeated float affine = 2;
  int affine_size() const;
  private:
  int _internal_affine_size() const;
  public:
  void clear_affine();
  private:
  float _internal_affine(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_affine() const;
  void _internal_add_affine(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_affine();
  public:
  float affine(int index) const;
  void set_affine(int index, float value);
  void add_affine(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      affine() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_affine();

  // string srs = 1;
  void clear_srs();
  const std::string& srs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srs();
  PROTOBUF_MUST_USE_RESULT std::string* release_srs();
  void set_allocated_srs(std::string* srs);
  private:
  const std::string& _internal_srs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srs(const std::string& value);
  std::string* _internal_mutable_srs();
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > affine_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit constexpr PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return new PointCloud();
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kClassificationFieldNumber = 4,
    kIntensityFieldNumber = 5,
    kReturnNumberFieldNumber = 6,
    kNumReturnsFieldNumber = 7,
    kBoundsFieldNumber = 1,
    kGeorefFieldNumber = 2,
  };
  // repeated float points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // repeated uint32 classification = 4;
  int classification_size() const;
  private:
  int _internal_classification_size() const;
  public:
  void clear_classification();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classification(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_classification() const;
  void _internal_add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_classification();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 classification(int index) const;
  void set_classification(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      classification() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_classification();

  // repeated uint32 intensity = 5;
  int intensity_size() const;
  private:
  int _internal_intensity_size() const;
  public:
  void clear_intensity();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_intensity() const;
  void _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_intensity();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity(int index) const;
  void set_intensity(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      intensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_intensity();

  // repeated uint32 return_number = 6;
  int return_number_size() const;
  private:
  int _internal_return_number_size() const;
  public:
  void clear_return_number();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_return_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_return_number() const;
  void _internal_add_return_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_return_number();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 return_number(int index) const;
  void set_return_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_return_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      return_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_return_number();

  // repeated uint32 num_returns = 7;
  int num_returns_size() const;
  private:
  int _internal_num_returns_size() const;
  public:
  void clear_num_returns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_returns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_num_returns() const;
  void _internal_add_num_returns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_num_returns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 num_returns(int index) const;
  void set_num_returns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_num_returns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      num_returns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_num_returns();

  // .DTCC.Bounds bounds = 1;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::Bounds& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Bounds* release_bounds();
  ::DTCC::Bounds* mutable_bounds();
  void set_allocated_bounds(::DTCC::Bounds* bounds);
  private:
  const ::DTCC::Bounds& _internal_bounds() const;
  ::DTCC::Bounds* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::Bounds* bounds);
  ::DTCC::Bounds* unsafe_arena_release_bounds();

  // .DTCC.Georef georef = 2;
  bool has_georef() const;
  private:
  bool _internal_has_georef() const;
  public:
  void clear_georef();
  const ::DTCC::Georef& georef() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Georef* release_georef();
  ::DTCC::Georef* mutable_georef();
  void set_allocated_georef(::DTCC::Georef* georef);
  private:
  const ::DTCC::Georef& _internal_georef() const;
  ::DTCC::Georef* _internal_mutable_georef();
  public:
  void unsafe_arena_set_allocated_georef(
      ::DTCC::Georef* georef);
  ::DTCC::Georef* unsafe_arena_release_georef();

  // @@protoc_insertion_point(class_scope:DTCC.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > classification_;
  mutable std::atomic<int> _classification_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > intensity_;
  mutable std::atomic<int> _intensity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > return_number_;
  mutable std::atomic<int> _return_number_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > num_returns_;
  mutable std::atomic<int> _num_returns_cached_byte_size_;
  ::DTCC::Bounds* bounds_;
  ::DTCC::Georef* georef_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Grid) */ {
 public:
  inline Grid() : Grid(nullptr) {}
  ~Grid() override;
  explicit constexpr Grid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid(const Grid& from);
  Grid(Grid&& from) noexcept
    : Grid() {
    *this = ::std::move(from);
  }

  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid& operator=(Grid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Grid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid* internal_default_instance() {
    return reinterpret_cast<const Grid*>(
               &_Grid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Grid& a, Grid& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grid* New() const final {
    return new Grid();
  }

  Grid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grid>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid";
  }
  protected:
  explicit Grid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundsFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kXstepFieldNumber = 4,
    kYstepFieldNumber = 5,
  };
  // .DTCC.Bounds bounds = 1;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::Bounds& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Bounds* release_bounds();
  ::DTCC::Bounds* mutable_bounds();
  void set_allocated_bounds(::DTCC::Bounds* bounds);
  private:
  const ::DTCC::Bounds& _internal_bounds() const;
  ::DTCC::Bounds* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::Bounds* bounds);
  ::DTCC::Bounds* unsafe_arena_release_bounds();

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xstep = 4;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float ystep = 5;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::Bounds* bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float xstep_;
  float ystep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() override;
  explicit constexpr Mesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return new Mesh();
  }

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh";
  }
  protected:
  explicit Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kFacesFieldNumber = 3,
  };
  // repeated float vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  private:
  float _internal_vertices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertices() const;
  void _internal_add_vertices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertices();
  public:
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertices();

  // repeated float normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  private:
  float _internal_normals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_normals() const;
  void _internal_add_normals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_normals();
  public:
  float normals(int index) const;
  void set_normals(int index, float value);
  void add_normals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      normals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_normals();

  // repeated int32 faces = 3;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_faces(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_faces() const;
  void _internal_add_faces(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_faces();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 faces(int index) const;
  void set_faces(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_faces(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      faces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_faces();

  // @@protoc_insertion_point(class_scope:DTCC.Mesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > normals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > faces_;
  mutable std::atomic<int> _faces_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeMesh final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeMesh) */ {
 public:
  inline VolumeMesh() : VolumeMesh(nullptr) {}
  ~VolumeMesh() override;
  explicit constexpr VolumeMesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeMesh(const VolumeMesh& from);
  VolumeMesh(VolumeMesh&& from) noexcept
    : VolumeMesh() {
    *this = ::std::move(from);
  }

  inline VolumeMesh& operator=(const VolumeMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeMesh& operator=(VolumeMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeMesh* internal_default_instance() {
    return reinterpret_cast<const VolumeMesh*>(
               &_VolumeMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VolumeMesh& a, VolumeMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeMesh* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeMesh* New() const final {
    return new VolumeMesh();
  }

  VolumeMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeMesh>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeMesh& from);
  void MergeFrom(const VolumeMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeMesh";
  }
  protected:
  explicit VolumeMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
  };
  // repeated float vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  private:
  float _internal_vertices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertices() const;
  void _internal_add_vertices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertices();
  public:
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertices();

  // repeated float cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  private:
  float _internal_cells(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cells() const;
  void _internal_add_cells(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cells();
  public:
  float cells(int index) const;
  void set_cells(int index, float value);
  void add_cells(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cells() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cells();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridField) */ {
 public:
  inline GridField() : GridField(nullptr) {}
  ~GridField() override;
  explicit constexpr GridField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridField(const GridField& from);
  GridField(GridField&& from) noexcept
    : GridField() {
    *this = ::std::move(from);
  }

  inline GridField& operator=(const GridField& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField& operator=(GridField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridField& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridField* internal_default_instance() {
    return reinterpret_cast<const GridField*>(
               &_GridField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GridField& a, GridField& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridField* New() const final {
    return new GridField();
  }

  GridField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridField& from);
  void MergeFrom(const GridField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField";
  }
  protected:
  explicit GridField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid* release_grid();
  ::DTCC::Grid* mutable_grid();
  void set_allocated_grid(::DTCC::Grid* grid);
  private:
  const ::DTCC::Grid& _internal_grid() const;
  ::DTCC::Grid* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid* grid);
  ::DTCC::Grid* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField) */ {
 public:
  inline GridVectorField() : GridVectorField(nullptr) {}
  ~GridVectorField() override;
  explicit constexpr GridVectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridVectorField(const GridVectorField& from);
  GridVectorField(GridVectorField&& from) noexcept
    : GridVectorField() {
    *this = ::std::move(from);
  }

  inline GridVectorField& operator=(const GridVectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField& operator=(GridVectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GridVectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridVectorField* internal_default_instance() {
    return reinterpret_cast<const GridVectorField*>(
               &_GridVectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GridVectorField& a, GridVectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridVectorField* New() const final {
    return new GridVectorField();
  }

  GridVectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridVectorField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridVectorField& from);
  void MergeFrom(const GridVectorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVectorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField";
  }
  protected:
  explicit GridVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid& grid() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Grid* release_grid();
  ::DTCC::Grid* mutable_grid();
  void set_allocated_grid(::DTCC::Grid* grid);
  private:
  const ::DTCC::Grid& _internal_grid() const;
  ::DTCC::Grid* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid* grid);
  ::DTCC::Grid* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Grid* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshField) */ {
 public:
  inline MeshField() : MeshField(nullptr) {}
  ~MeshField() override;
  explicit constexpr MeshField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshField(const MeshField& from);
  MeshField(MeshField&& from) noexcept
    : MeshField() {
    *this = ::std::move(from);
  }

  inline MeshField& operator=(const MeshField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField& operator=(MeshField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshField* internal_default_instance() {
    return reinterpret_cast<const MeshField*>(
               &_MeshField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MeshField& a, MeshField& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshField* New() const final {
    return new MeshField();
  }

  MeshField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshField& from);
  void MergeFrom(const MeshField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField";
  }
  protected:
  explicit MeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Mesh* release_mesh();
  ::DTCC::Mesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh* mesh);
  private:
  const ::DTCC::Mesh& _internal_mesh() const;
  ::DTCC::Mesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh* mesh);
  ::DTCC::Mesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Mesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField) */ {
 public:
  inline MeshVectorField() : MeshVectorField(nullptr) {}
  ~MeshVectorField() override;
  explicit constexpr MeshVectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshVectorField(const MeshVectorField& from);
  MeshVectorField(MeshVectorField&& from) noexcept
    : MeshVectorField() {
    *this = ::std::move(from);
  }

  inline MeshVectorField& operator=(const MeshVectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField& operator=(MeshVectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeshVectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshVectorField* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField*>(
               &_MeshVectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MeshVectorField& a, MeshVectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshVectorField* New() const final {
    return new MeshVectorField();
  }

  MeshVectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshVectorField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MeshVectorField& from);
  void MergeFrom(const MeshVectorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeshVectorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField";
  }
  protected:
  explicit MeshVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Mesh* release_mesh();
  ::DTCC::Mesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh* mesh);
  private:
  const ::DTCC::Mesh& _internal_mesh() const;
  ::DTCC::Mesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh* mesh);
  ::DTCC::Mesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::Mesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeMeshField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeMeshField) */ {
 public:
  inline VolumeMeshField() : VolumeMeshField(nullptr) {}
  ~VolumeMeshField() override;
  explicit constexpr VolumeMeshField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeMeshField(const VolumeMeshField& from);
  VolumeMeshField(VolumeMeshField&& from) noexcept
    : VolumeMeshField() {
    *this = ::std::move(from);
  }

  inline VolumeMeshField& operator=(const VolumeMeshField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeMeshField& operator=(VolumeMeshField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeMeshField& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeMeshField* internal_default_instance() {
    return reinterpret_cast<const VolumeMeshField*>(
               &_VolumeMeshField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VolumeMeshField& a, VolumeMeshField& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeMeshField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeMeshField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeMeshField* New() const final {
    return new VolumeMeshField();
  }

  VolumeMeshField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeMeshField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeMeshField& from);
  void MergeFrom(const VolumeMeshField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeMeshField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeMeshField";
  }
  protected:
  explicit VolumeMeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.VolumeMesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::VolumeMesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::VolumeMesh* release_mesh();
  ::DTCC::VolumeMesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::VolumeMesh* mesh);
  private:
  const ::DTCC::VolumeMesh& _internal_mesh() const;
  ::DTCC::VolumeMesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::VolumeMesh* mesh);
  ::DTCC::VolumeMesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeMeshField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::VolumeMesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class VolumeMeshVectorField final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.VolumeMeshVectorField) */ {
 public:
  inline VolumeMeshVectorField() : VolumeMeshVectorField(nullptr) {}
  ~VolumeMeshVectorField() override;
  explicit constexpr VolumeMeshVectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeMeshVectorField(const VolumeMeshVectorField& from);
  VolumeMeshVectorField(VolumeMeshVectorField&& from) noexcept
    : VolumeMeshVectorField() {
    *this = ::std::move(from);
  }

  inline VolumeMeshVectorField& operator=(const VolumeMeshVectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeMeshVectorField& operator=(VolumeMeshVectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VolumeMeshVectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeMeshVectorField* internal_default_instance() {
    return reinterpret_cast<const VolumeMeshVectorField*>(
               &_VolumeMeshVectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VolumeMeshVectorField& a, VolumeMeshVectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeMeshVectorField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeMeshVectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeMeshVectorField* New() const final {
    return new VolumeMeshVectorField();
  }

  VolumeMeshVectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeMeshVectorField>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VolumeMeshVectorField& from);
  void MergeFrom(const VolumeMeshVectorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolumeMeshVectorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.VolumeMeshVectorField";
  }
  protected:
  explicit VolumeMeshVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.VolumeMesh mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::VolumeMesh& mesh() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::VolumeMesh* release_mesh();
  ::DTCC::VolumeMesh* mutable_mesh();
  void set_allocated_mesh(::DTCC::VolumeMesh* mesh);
  private:
  const ::DTCC::VolumeMesh& _internal_mesh() const;
  ::DTCC::VolumeMesh* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::VolumeMesh* mesh);
  ::DTCC::VolumeMesh* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.VolumeMeshVectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::DTCC::VolumeMesh* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Building final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Building) */ {
 public:
  inline Building() : Building(nullptr) {}
  ~Building() override;
  explicit constexpr Building(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Building(const Building& from);
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Building& operator=(Building&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Building& default_instance() {
    return *internal_default_instance();
  }
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Building* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Building* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Building* New() const final {
    return new Building();
  }

  Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Building";
  }
  protected:
  explicit Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFootprintFieldNumber = 2,
    kRoofpointsFieldNumber = 5,
    kHeightFieldNumber = 3,
    kGroundHeightFieldNumber = 4,
    kErrorFieldNumber = 6,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .DTCC.Polygon footprint = 2;
  bool has_footprint() const;
  private:
  bool _internal_has_footprint() const;
  public:
  void clear_footprint();
  const ::DTCC::Polygon& footprint() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Polygon* release_footprint();
  ::DTCC::Polygon* mutable_footprint();
  void set_allocated_footprint(::DTCC::Polygon* footprint);
  private:
  const ::DTCC::Polygon& _internal_footprint() const;
  ::DTCC::Polygon* _internal_mutable_footprint();
  public:
  void unsafe_arena_set_allocated_footprint(
      ::DTCC::Polygon* footprint);
  ::DTCC::Polygon* unsafe_arena_release_footprint();

  // .DTCC.PointCloud roofpoints = 5;
  bool has_roofpoints() const;
  private:
  bool _internal_has_roofpoints() const;
  public:
  void clear_roofpoints();
  const ::DTCC::PointCloud& roofpoints() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::PointCloud* release_roofpoints();
  ::DTCC::PointCloud* mutable_roofpoints();
  void set_allocated_roofpoints(::DTCC::PointCloud* roofpoints);
  private:
  const ::DTCC::PointCloud& _internal_roofpoints() const;
  ::DTCC::PointCloud* _internal_mutable_roofpoints();
  public:
  void unsafe_arena_set_allocated_roofpoints(
      ::DTCC::PointCloud* roofpoints);
  ::DTCC::PointCloud* unsafe_arena_release_roofpoints();

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float groundHeight = 4;
  void clear_groundheight();
  float groundheight() const;
  void set_groundheight(float value);
  private:
  float _internal_groundheight() const;
  void _internal_set_groundheight(float value);
  public:

  // uint64 error = 6;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint64 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Building)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::DTCC::Polygon* footprint_;
  ::DTCC::PointCloud* roofpoints_;
  float height_;
  float groundheight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class City final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.City) */ {
 public:
  inline City() : City(nullptr) {}
  ~City() override;
  explicit constexpr City(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  City(const City& from);
  City(City&& from) noexcept
    : City() {
    *this = ::std::move(from);
  }

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }
  inline City& operator=(City&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const City& default_instance() {
    return *internal_default_instance();
  }
  static inline const City* internal_default_instance() {
    return reinterpret_cast<const City*>(
               &_City_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(City& a, City& b) {
    a.Swap(&b);
  }
  inline void Swap(City* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(City* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline City* New() const final {
    return new City();
  }

  City* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<City>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(City* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.City";
  }
  protected:
  explicit City(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildingsFieldNumber = 4,
    kLanduseFieldNumber = 5,
    kNameFieldNumber = 6,
    kBoundsFieldNumber = 1,
    kGeorefFieldNumber = 2,
    kTerrainFieldNumber = 3,
  };
  // repeated .DTCC.Building buildings = 4;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::DTCC::Building* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
      mutable_buildings();
  private:
  const ::DTCC::Building& _internal_buildings(int index) const;
  ::DTCC::Building* _internal_add_buildings();
  public:
  const ::DTCC::Building& buildings(int index) const;
  ::DTCC::Building* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
      buildings() const;

  // repeated .DTCC.LandUse landuse = 5;
  int landuse_size() const;
  private:
  int _internal_landuse_size() const;
  public:
  void clear_landuse();
  ::DTCC::LandUse* mutable_landuse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LandUse >*
      mutable_landuse();
  private:
  const ::DTCC::LandUse& _internal_landuse(int index) const;
  ::DTCC::LandUse* _internal_add_landuse();
  public:
  const ::DTCC::LandUse& landuse(int index) const;
  ::DTCC::LandUse* add_landuse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LandUse >&
      landuse() const;

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .DTCC.Bounds bounds = 1;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::DTCC::Bounds& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Bounds* release_bounds();
  ::DTCC::Bounds* mutable_bounds();
  void set_allocated_bounds(::DTCC::Bounds* bounds);
  private:
  const ::DTCC::Bounds& _internal_bounds() const;
  ::DTCC::Bounds* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::DTCC::Bounds* bounds);
  ::DTCC::Bounds* unsafe_arena_release_bounds();

  // .DTCC.Georef georef = 2;
  bool has_georef() const;
  private:
  bool _internal_has_georef() const;
  public:
  void clear_georef();
  const ::DTCC::Georef& georef() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Georef* release_georef();
  ::DTCC::Georef* mutable_georef();
  void set_allocated_georef(::DTCC::Georef* georef);
  private:
  const ::DTCC::Georef& _internal_georef() const;
  ::DTCC::Georef* _internal_mutable_georef();
  public:
  void unsafe_arena_set_allocated_georef(
      ::DTCC::Georef* georef);
  ::DTCC::Georef* unsafe_arena_release_georef();

  // .DTCC.Raster terrain = 3;
  bool has_terrain() const;
  private:
  bool _internal_has_terrain() const;
  public:
  void clear_terrain();
  const ::DTCC::Raster& terrain() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Raster* release_terrain();
  ::DTCC::Raster* mutable_terrain();
  void set_allocated_terrain(::DTCC::Raster* terrain);
  private:
  const ::DTCC::Raster& _internal_terrain() const;
  ::DTCC::Raster* _internal_mutable_terrain();
  public:
  void unsafe_arena_set_allocated_terrain(
      ::DTCC::Raster* terrain);
  ::DTCC::Raster* unsafe_arena_release_terrain();

  // @@protoc_insertion_point(class_scope:DTCC.City)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building > buildings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LandUse > landuse_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::DTCC::Bounds* bounds_;
  ::DTCC::Georef* georef_;
  ::DTCC::Raster* terrain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class LandUse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.LandUse) */ {
 public:
  inline LandUse() : LandUse(nullptr) {}
  ~LandUse() override;
  explicit constexpr LandUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandUse(const LandUse& from);
  LandUse(LandUse&& from) noexcept
    : LandUse() {
    *this = ::std::move(from);
  }

  inline LandUse& operator=(const LandUse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandUse& operator=(LandUse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LandUse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandUse* internal_default_instance() {
    return reinterpret_cast<const LandUse*>(
               &_LandUse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LandUse& a, LandUse& b) {
    a.Swap(&b);
  }
  inline void Swap(LandUse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandUse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandUse* New() const final {
    return new LandUse();
  }

  LandUse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandUse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LandUse& from);
  void MergeFrom(const LandUse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LandUse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.LandUse";
  }
  protected:
  explicit LandUse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kFootprintFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .DTCC.Polygon footprint = 1;
  bool has_footprint() const;
  private:
  bool _internal_has_footprint() const;
  public:
  void clear_footprint();
  const ::DTCC::Polygon& footprint() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Polygon* release_footprint();
  ::DTCC::Polygon* mutable_footprint();
  void set_allocated_footprint(::DTCC::Polygon* footprint);
  private:
  const ::DTCC::Polygon& _internal_footprint() const;
  ::DTCC::Polygon* _internal_mutable_footprint();
  public:
  void unsafe_arena_set_allocated_footprint(
      ::DTCC::Polygon* footprint);
  ::DTCC::Polygon* unsafe_arena_release_footprint();

  // @@protoc_insertion_point(class_scope:DTCC.LandUse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::DTCC::Polygon* footprint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Road final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Road) */ {
 public:
  inline Road() : Road(nullptr) {}
  ~Road() override;
  explicit constexpr Road(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Road(const Road& from);
  Road(Road&& from) noexcept
    : Road() {
    *this = ::std::move(from);
  }

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }
  inline Road& operator=(Road&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Road& default_instance() {
    return *internal_default_instance();
  }
  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Road& a, Road& b) {
    a.Swap(&b);
  }
  inline void Swap(Road* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Road* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Road* New() const final {
    return new Road();
  }

  Road* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Road>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Road& from);
  void MergeFrom(const Road& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Road* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Road";
  }
  protected:
  explicit Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNameFieldNumber = 3,
    kIdFieldNumber = 7,
    kTypeFieldNumber = 2,
    kWidthFieldNumber = 4,
    kLanesFieldNumber = 5,
    kSpeedLimitFieldNumber = 6,
  };
  // repeated int32 vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_vertices() const;
  void _internal_add_vertices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_vertices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 vertices(int index) const;
  void set_vertices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_vertices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_vertices();

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float width = 4;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // int32 lanes = 5;
  void clear_lanes();
  ::PROTOBUF_NAMESPACE_ID::int32 lanes() const;
  void set_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lanes() const;
  void _internal_set_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 speed_limit = 6;
  void clear_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit() const;
  void set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_limit() const;
  void _internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Road)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > vertices_;
  mutable std::atomic<int> _vertices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float width_;
  ::PROTOBUF_NAMESPACE_ID::int32 lanes_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class RoadNetwork final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.RoadNetwork) */ {
 public:
  inline RoadNetwork() : RoadNetwork(nullptr) {}
  ~RoadNetwork() override;
  explicit constexpr RoadNetwork(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadNetwork(const RoadNetwork& from);
  RoadNetwork(RoadNetwork&& from) noexcept
    : RoadNetwork() {
    *this = ::std::move(from);
  }

  inline RoadNetwork& operator=(const RoadNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadNetwork& operator=(RoadNetwork&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RoadNetwork& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadNetwork* internal_default_instance() {
    return reinterpret_cast<const RoadNetwork*>(
               &_RoadNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RoadNetwork& a, RoadNetwork& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadNetwork* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadNetwork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadNetwork* New() const final {
    return new RoadNetwork();
  }

  RoadNetwork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadNetwork>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RoadNetwork& from);
  void MergeFrom(const RoadNetwork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadNetwork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.RoadNetwork";
  }
  protected:
  explicit RoadNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexFieldNumber = 1,
    kRoadsFieldNumber = 2,
    kGeorefFieldNumber = 3,
  };
  // repeated float vertex = 1;
  int vertex_size() const;
  private:
  int _internal_vertex_size() const;
  public:
  void clear_vertex();
  private:
  float _internal_vertex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertex() const;
  void _internal_add_vertex(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertex();
  public:
  float vertex(int index) const;
  void set_vertex(int index, float value);
  void add_vertex(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertex();

  // repeated .DTCC.Road roads = 2;
  int roads_size() const;
  private:
  int _internal_roads_size() const;
  public:
  void clear_roads();
  ::DTCC::Road* mutable_roads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Road >*
      mutable_roads();
  private:
  const ::DTCC::Road& _internal_roads(int index) const;
  ::DTCC::Road* _internal_add_roads();
  public:
  const ::DTCC::Road& roads(int index) const;
  ::DTCC::Road* add_roads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Road >&
      roads() const;

  // .DTCC.Georef georef = 3;
  bool has_georef() const;
  private:
  bool _internal_has_georef() const;
  public:
  void clear_georef();
  const ::DTCC::Georef& georef() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::Georef* release_georef();
  ::DTCC::Georef* mutable_georef();
  void set_allocated_georef(::DTCC::Georef* georef);
  private:
  const ::DTCC::Georef& _internal_georef() const;
  ::DTCC::Georef* _internal_mutable_georef();
  public:
  void unsafe_arena_set_allocated_georef(
      ::DTCC::Georef* georef);
  ::DTCC::Georef* unsafe_arena_release_georef();

  // @@protoc_insertion_point(class_scope:DTCC.RoadNetwork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertex_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Road > roads_;
  ::DTCC::Georef* georef_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Raster final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.Raster) */ {
 public:
  inline Raster() : Raster(nullptr) {}
  ~Raster() override;
  explicit constexpr Raster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Raster(const Raster& from);
  Raster(Raster&& from) noexcept
    : Raster() {
    *this = ::std::move(from);
  }

  inline Raster& operator=(const Raster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Raster& operator=(Raster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Raster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Raster* internal_default_instance() {
    return reinterpret_cast<const Raster*>(
               &_Raster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Raster& a, Raster& b) {
    a.Swap(&b);
  }
  inline void Swap(Raster* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Raster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Raster* New() const final {
    return new Raster();
  }

  Raster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Raster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Raster& from);
  void MergeFrom(const Raster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Raster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Raster";
  }
  protected:
  explicit Raster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kDtypeFieldNumber = 6,
    kTransformFieldNumber = 7,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kNodataFieldNumber = 5,
  };
  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string dtype = 6;
  void clear_dtype();
  const std::string& dtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dtype();
  PROTOBUF_MUST_USE_RESULT std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // .DTCC.AffineTransform transform = 7;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::DTCC::AffineTransform& transform() const;
  PROTOBUF_MUST_USE_RESULT ::DTCC::AffineTransform* release_transform();
  ::DTCC::AffineTransform* mutable_transform();
  void set_allocated_transform(::DTCC::AffineTransform* transform);
  private:
  const ::DTCC::AffineTransform& _internal_transform() const;
  ::DTCC::AffineTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::DTCC::AffineTransform* transform);
  ::DTCC::AffineTransform* unsafe_arena_release_transform();

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channels = 3;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float nodata = 5;
  void clear_nodata();
  float nodata() const;
  void set_nodata(float value);
  private:
  float _internal_nodata() const;
  void _internal_set_nodata(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Raster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  ::DTCC::AffineTransform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  float nodata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class AffineTransform final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DTCC.AffineTransform) */ {
 public:
  inline AffineTransform() : AffineTransform(nullptr) {}
  ~AffineTransform() override;
  explicit constexpr AffineTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AffineTransform(const AffineTransform& from);
  AffineTransform(AffineTransform&& from) noexcept
    : AffineTransform() {
    *this = ::std::move(from);
  }

  inline AffineTransform& operator=(const AffineTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffineTransform& operator=(AffineTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AffineTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const AffineTransform* internal_default_instance() {
    return reinterpret_cast<const AffineTransform*>(
               &_AffineTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AffineTransform& a, AffineTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(AffineTransform* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AffineTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AffineTransform* New() const final {
    return new AffineTransform();
  }

  AffineTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AffineTransform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AffineTransform& from);
  void MergeFrom(const AffineTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AffineTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.AffineTransform";
  }
  protected:
  explicit AffineTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kEFieldNumber = 5,
    kFFieldNumber = 6,
  };
  // float a = 1;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // float b = 2;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float c = 3;
  void clear_c();
  float c() const;
  void set_c(float value);
  private:
  float _internal_c() const;
  void _internal_set_c(float value);
  public:

  // float d = 4;
  void clear_d();
  float d() const;
  void set_d(float value);
  private:
  float _internal_d() const;
  void _internal_set_d(float value);
  public:

  // float e = 5;
  void clear_e();
  float e() const;
  void set_e(float value);
  private:
  float _internal_e() const;
  void _internal_set_e(float value);
  public:

  // float f = 6;
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.AffineTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float a_;
  float b_;
  float c_;
  float d_;
  float e_;
  float f_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.y)
}

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::_internal_x() const {
  return x_;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::_internal_y() const {
  return y_;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::_internal_z() const {
  return z_;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.z)
}

// -------------------------------------------------------------------

// MultiPoint

// repeated .DTCC.Vector2D points = 1;
inline int MultiPoint::_internal_points_size() const {
  return points_.size();
}
inline int MultiPoint::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint::clear_points() {
  points_.Clear();
}
inline ::DTCC::Vector2D* MultiPoint::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
MultiPoint::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint.points)
  return &points_;
}
inline const ::DTCC::Vector2D& MultiPoint::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::DTCC::Vector2D& MultiPoint::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint.points)
  return _internal_points(index);
}
inline ::DTCC::Vector2D* MultiPoint::_internal_add_points() {
  return points_.Add();
}
inline ::DTCC::Vector2D* MultiPoint::add_points() {
  ::DTCC::Vector2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
MultiPoint::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint.points)
  return points_;
}

// -------------------------------------------------------------------

// MultiPoint3D

// repeated .DTCC.Vector3D points = 1;
inline int MultiPoint3D::_internal_points_size() const {
  return points_.size();
}
inline int MultiPoint3D::points_size() const {
  return _internal_points_size();
}
inline void MultiPoint3D::clear_points() {
  points_.Clear();
}
inline ::DTCC::Vector3D* MultiPoint3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPoint3D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
MultiPoint3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPoint3D.points)
  return &points_;
}
inline const ::DTCC::Vector3D& MultiPoint3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::DTCC::Vector3D& MultiPoint3D::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPoint3D.points)
  return _internal_points(index);
}
inline ::DTCC::Vector3D* MultiPoint3D::_internal_add_points() {
  return points_.Add();
}
inline ::DTCC::Vector3D* MultiPoint3D::add_points() {
  ::DTCC::Vector3D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:DTCC.MultiPoint3D.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
MultiPoint3D::points() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPoint3D.points)
  return points_;
}

// -------------------------------------------------------------------

// LineString

// repeated .DTCC.Vector2D vertices = 1;
inline int LineString::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LineString::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* LineString::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LineString::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& LineString::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LineString::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LineString::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* LineString::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LineString::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// LineString3D

// repeated .DTCC.Vector3D vertices = 1;
inline int LineString3D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LineString3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void LineString3D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* LineString3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LineString3D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
LineString3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LineString3D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& LineString3D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& LineString3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LineString3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* LineString3D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* LineString3D::add_vertices() {
  ::DTCC::Vector3D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LineString3D.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
LineString3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LineString3D.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// LinearRing

// repeated .DTCC.Vector2D vertices = 1;
inline int LinearRing::_internal_vertices_size() const {
  return vertices_.size();
}
inline int LinearRing::vertices_size() const {
  return _internal_vertices_size();
}
inline void LinearRing::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* LinearRing::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.LinearRing.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
LinearRing::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.LinearRing.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& LinearRing::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& LinearRing::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.LinearRing.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* LinearRing::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* LinearRing::add_vertices() {
  ::DTCC::Vector2D* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:DTCC.LinearRing.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
LinearRing::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.LinearRing.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// Polygon

// .DTCC.LinearRing shell = 1;
inline bool Polygon::_internal_has_shell() const {
  return this != internal_default_instance() && shell_ != nullptr;
}
inline bool Polygon::has_shell() const {
  return _internal_has_shell();
}
inline void Polygon::clear_shell() {
  if (GetArenaForAllocation() == nullptr && shell_ != nullptr) {
    delete shell_;
  }
  shell_ = nullptr;
}
inline const ::DTCC::LinearRing& Polygon::_internal_shell() const {
  const ::DTCC::LinearRing* p = shell_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::LinearRing&>(
      ::DTCC::_LinearRing_default_instance_);
}
inline const ::DTCC::LinearRing& Polygon::shell() const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.shell)
  return _internal_shell();
}
inline void Polygon::unsafe_arena_set_allocated_shell(
    ::DTCC::LinearRing* shell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shell_);
  }
  shell_ = shell;
  if (shell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Polygon.shell)
}
inline ::DTCC::LinearRing* Polygon::release_shell() {
  
  ::DTCC::LinearRing* temp = shell_;
  shell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::LinearRing* Polygon::unsafe_arena_release_shell() {
  // @@protoc_insertion_point(field_release:DTCC.Polygon.shell)
  
  ::DTCC::LinearRing* temp = shell_;
  shell_ = nullptr;
  return temp;
}
inline ::DTCC::LinearRing* Polygon::_internal_mutable_shell() {
  
  if (shell_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::LinearRing>(GetArenaForAllocation());
    shell_ = p;
  }
  return shell_;
}
inline ::DTCC::LinearRing* Polygon::mutable_shell() {
  ::DTCC::LinearRing* _msg = _internal_mutable_shell();
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.shell)
  return _msg;
}
inline void Polygon::set_allocated_shell(::DTCC::LinearRing* shell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shell_;
  }
  if (shell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::LinearRing>::GetOwningArena(shell);
    if (message_arena != submessage_arena) {
      shell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell, submessage_arena);
    }
    
  } else {
    
  }
  shell_ = shell;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Polygon.shell)
}

// repeated .DTCC.LinearRing holes = 2;
inline int Polygon::_internal_holes_size() const {
  return holes_.size();
}
inline int Polygon::holes_size() const {
  return _internal_holes_size();
}
inline void Polygon::clear_holes() {
  holes_.Clear();
}
inline ::DTCC::LinearRing* Polygon::mutable_holes(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.holes)
  return holes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >*
Polygon::mutable_holes() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Polygon.holes)
  return &holes_;
}
inline const ::DTCC::LinearRing& Polygon::_internal_holes(int index) const {
  return holes_.Get(index);
}
inline const ::DTCC::LinearRing& Polygon::holes(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.holes)
  return _internal_holes(index);
}
inline ::DTCC::LinearRing* Polygon::_internal_add_holes() {
  return holes_.Add();
}
inline ::DTCC::LinearRing* Polygon::add_holes() {
  ::DTCC::LinearRing* _add = _internal_add_holes();
  // @@protoc_insertion_point(field_add:DTCC.Polygon.holes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LinearRing >&
Polygon::holes() const {
  // @@protoc_insertion_point(field_list:DTCC.Polygon.holes)
  return holes_;
}

// -------------------------------------------------------------------

// MultiPolygon

// repeated .DTCC.Polygon polygons = 1;
inline int MultiPolygon::_internal_polygons_size() const {
  return polygons_.size();
}
inline int MultiPolygon::polygons_size() const {
  return _internal_polygons_size();
}
inline void MultiPolygon::clear_polygons() {
  polygons_.Clear();
}
inline ::DTCC::Polygon* MultiPolygon::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.MultiPolygon.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >*
MultiPolygon::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MultiPolygon.polygons)
  return &polygons_;
}
inline const ::DTCC::Polygon& MultiPolygon::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::DTCC::Polygon& MultiPolygon::polygons(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MultiPolygon.polygons)
  return _internal_polygons(index);
}
inline ::DTCC::Polygon* MultiPolygon::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::DTCC::Polygon* MultiPolygon::add_polygons() {
  ::DTCC::Polygon* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:DTCC.MultiPolygon.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Polygon >&
MultiPolygon::polygons() const {
  // @@protoc_insertion_point(field_list:DTCC.MultiPolygon.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Bounds

// float xmin = 1;
inline void Bounds::clear_xmin() {
  xmin_ = 0;
}
inline float Bounds::_internal_xmin() const {
  return xmin_;
}
inline float Bounds::xmin() const {
  // @@protoc_insertion_point(field_get:DTCC.Bounds.xmin)
  return _internal_xmin();
}
inline void Bounds::_internal_set_xmin(float value) {
  
  xmin_ = value;
}
inline void Bounds::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:DTCC.Bounds.xmin)
}

// float xmax = 2;
inline void Bounds::clear_xmax() {
  xmax_ = 0;
}
inline float Bounds::_internal_xmax() const {
  return xmax_;
}
inline float Bounds::xmax() const {
  // @@protoc_insertion_point(field_get:DTCC.Bounds.xmax)
  return _internal_xmax();
}
inline void Bounds::_internal_set_xmax(float value) {
  
  xmax_ = value;
}
inline void Bounds::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:DTCC.Bounds.xmax)
}

// float ymin = 3;
inline void Bounds::clear_ymin() {
  ymin_ = 0;
}
inline float Bounds::_internal_ymin() const {
  return ymin_;
}
inline float Bounds::ymin() const {
  // @@protoc_insertion_point(field_get:DTCC.Bounds.ymin)
  return _internal_ymin();
}
inline void Bounds::_internal_set_ymin(float value) {
  
  ymin_ = value;
}
inline void Bounds::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:DTCC.Bounds.ymin)
}

// float ymax = 4;
inline void Bounds::clear_ymax() {
  ymax_ = 0;
}
inline float Bounds::_internal_ymax() const {
  return ymax_;
}
inline float Bounds::ymax() const {
  // @@protoc_insertion_point(field_get:DTCC.Bounds.ymax)
  return _internal_ymax();
}
inline void Bounds::_internal_set_ymax(float value) {
  
  ymax_ = value;
}
inline void Bounds::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:DTCC.Bounds.ymax)
}

// -------------------------------------------------------------------

// Georef

// string crs = 1;
inline void Georef::clear_crs() {
  crs_.ClearToEmpty();
}
inline const std::string& Georef::crs() const {
  // @@protoc_insertion_point(field_get:DTCC.Georef.crs)
  return _internal_crs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Georef::set_crs(ArgT0&& arg0, ArgT... args) {
 
 crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Georef.crs)
}
inline std::string* Georef::mutable_crs() {
  std::string* _s = _internal_mutable_crs();
  // @@protoc_insertion_point(field_mutable:DTCC.Georef.crs)
  return _s;
}
inline const std::string& Georef::_internal_crs() const {
  return crs_.Get();
}
inline void Georef::_internal_set_crs(const std::string& value) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Georef::_internal_mutable_crs() {
  
  return crs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Georef::release_crs() {
  // @@protoc_insertion_point(field_release:DTCC.Georef.crs)
  return crs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Georef::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  crs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Georef.crs)
}

// int32 epsg = 2;
inline void Georef::clear_epsg() {
  epsg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Georef::_internal_epsg() const {
  return epsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Georef::epsg() const {
  // @@protoc_insertion_point(field_get:DTCC.Georef.epsg)
  return _internal_epsg();
}
inline void Georef::_internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epsg_ = value;
}
inline void Georef::set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:DTCC.Georef.epsg)
}

// float x0 = 3;
inline void Georef::clear_x0() {
  x0_ = 0;
}
inline float Georef::_internal_x0() const {
  return x0_;
}
inline float Georef::x0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georef.x0)
  return _internal_x0();
}
inline void Georef::_internal_set_x0(float value) {
  
  x0_ = value;
}
inline void Georef::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georef.x0)
}

// float y0 = 4;
inline void Georef::clear_y0() {
  y0_ = 0;
}
inline float Georef::_internal_y0() const {
  return y0_;
}
inline float Georef::y0() const {
  // @@protoc_insertion_point(field_get:DTCC.Georef.y0)
  return _internal_y0();
}
inline void Georef::_internal_set_y0(float value) {
  
  y0_ = value;
}
inline void Georef::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:DTCC.Georef.y0)
}

// -------------------------------------------------------------------

// Transform

// string srs = 1;
inline void Transform::clear_srs() {
  srs_.ClearToEmpty();
}
inline const std::string& Transform::srs() const {
  // @@protoc_insertion_point(field_get:DTCC.Transform.srs)
  return _internal_srs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transform::set_srs(ArgT0&& arg0, ArgT... args) {
 
 srs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Transform.srs)
}
inline std::string* Transform::mutable_srs() {
  std::string* _s = _internal_mutable_srs();
  // @@protoc_insertion_point(field_mutable:DTCC.Transform.srs)
  return _s;
}
inline const std::string& Transform::_internal_srs() const {
  return srs_.Get();
}
inline void Transform::_internal_set_srs(const std::string& value) {
  
  srs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transform::_internal_mutable_srs() {
  
  return srs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transform::release_srs() {
  // @@protoc_insertion_point(field_release:DTCC.Transform.srs)
  return srs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transform::set_allocated_srs(std::string* srs) {
  if (srs != nullptr) {
    
  } else {
    
  }
  srs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Transform.srs)
}

// repeated float affine = 2;
inline int Transform::_internal_affine_size() const {
  return affine_.size();
}
inline int Transform::affine_size() const {
  return _internal_affine_size();
}
inline void Transform::clear_affine() {
  affine_.Clear();
}
inline float Transform::_internal_affine(int index) const {
  return affine_.Get(index);
}
inline float Transform::affine(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Transform.affine)
  return _internal_affine(index);
}
inline void Transform::set_affine(int index, float value) {
  affine_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Transform.affine)
}
inline void Transform::_internal_add_affine(float value) {
  affine_.Add(value);
}
inline void Transform::add_affine(float value) {
  _internal_add_affine(value);
  // @@protoc_insertion_point(field_add:DTCC.Transform.affine)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Transform::_internal_affine() const {
  return affine_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Transform::affine() const {
  // @@protoc_insertion_point(field_list:DTCC.Transform.affine)
  return _internal_affine();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Transform::_internal_mutable_affine() {
  return &affine_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Transform::mutable_affine() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Transform.affine)
  return _internal_mutable_affine();
}

// -------------------------------------------------------------------

// PointCloud

// .DTCC.Bounds bounds = 1;
inline bool PointCloud::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool PointCloud::has_bounds() const {
  return _internal_has_bounds();
}
inline void PointCloud::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::DTCC::Bounds& PointCloud::_internal_bounds() const {
  const ::DTCC::Bounds* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Bounds&>(
      ::DTCC::_Bounds_default_instance_);
}
inline const ::DTCC::Bounds& PointCloud::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.bounds)
  return _internal_bounds();
}
inline void PointCloud::unsafe_arena_set_allocated_bounds(
    ::DTCC::Bounds* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.bounds)
}
inline ::DTCC::Bounds* PointCloud::release_bounds() {
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Bounds* PointCloud::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.bounds)
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::DTCC::Bounds* PointCloud::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Bounds>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::DTCC::Bounds* PointCloud::mutable_bounds() {
  ::DTCC::Bounds* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.bounds)
  return _msg;
}
inline void PointCloud::set_allocated_bounds(::DTCC::Bounds* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Bounds>::GetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.bounds)
}

// .DTCC.Georef georef = 2;
inline bool PointCloud::_internal_has_georef() const {
  return this != internal_default_instance() && georef_ != nullptr;
}
inline bool PointCloud::has_georef() const {
  return _internal_has_georef();
}
inline void PointCloud::clear_georef() {
  if (GetArenaForAllocation() == nullptr && georef_ != nullptr) {
    delete georef_;
  }
  georef_ = nullptr;
}
inline const ::DTCC::Georef& PointCloud::_internal_georef() const {
  const ::DTCC::Georef* p = georef_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georef&>(
      ::DTCC::_Georef_default_instance_);
}
inline const ::DTCC::Georef& PointCloud::georef() const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.georef)
  return _internal_georef();
}
inline void PointCloud::unsafe_arena_set_allocated_georef(
    ::DTCC::Georef* georef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(georef_);
  }
  georef_ = georef;
  if (georef) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.PointCloud.georef)
}
inline ::DTCC::Georef* PointCloud::release_georef() {
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georef* PointCloud::unsafe_arena_release_georef() {
  // @@protoc_insertion_point(field_release:DTCC.PointCloud.georef)
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
  return temp;
}
inline ::DTCC::Georef* PointCloud::_internal_mutable_georef() {
  
  if (georef_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georef>(GetArenaForAllocation());
    georef_ = p;
  }
  return georef_;
}
inline ::DTCC::Georef* PointCloud::mutable_georef() {
  ::DTCC::Georef* _msg = _internal_mutable_georef();
  // @@protoc_insertion_point(field_mutable:DTCC.PointCloud.georef)
  return _msg;
}
inline void PointCloud::set_allocated_georef(::DTCC::Georef* georef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete georef_;
  }
  if (georef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Georef>::GetOwningArena(georef);
    if (message_arena != submessage_arena) {
      georef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georef, submessage_arena);
    }
    
  } else {
    
  }
  georef_ = georef;
  // @@protoc_insertion_point(field_set_allocated:DTCC.PointCloud.georef)
}

// repeated float points = 3;
inline int PointCloud::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline float PointCloud::_internal_points(int index) const {
  return points_.Get(index);
}
inline float PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.points)
  return _internal_points(index);
}
inline void PointCloud::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.points)
}
inline void PointCloud::_internal_add_points(float value) {
  points_.Add(value);
}
inline void PointCloud::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PointCloud::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PointCloud::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.points)
  return _internal_mutable_points();
}

// repeated uint32 classification = 4;
inline int PointCloud::_internal_classification_size() const {
  return classification_.size();
}
inline int PointCloud::classification_size() const {
  return _internal_classification_size();
}
inline void PointCloud::clear_classification() {
  classification_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_classification(int index) const {
  return classification_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::classification(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.classification)
  return _internal_classification(index);
}
inline void PointCloud::set_classification(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classification_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.classification)
}
inline void PointCloud::_internal_add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classification_.Add(value);
}
inline void PointCloud::add_classification(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_classification(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.classification)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_classification() const {
  return classification_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::classification() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.classification)
  return _internal_classification();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_classification() {
  return &classification_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_classification() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.classification)
  return _internal_mutable_classification();
}

// repeated uint32 intensity = 5;
inline int PointCloud::_internal_intensity_size() const {
  return intensity_.size();
}
inline int PointCloud::intensity_size() const {
  return _internal_intensity_size();
}
inline void PointCloud::clear_intensity() {
  intensity_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_intensity(int index) const {
  return intensity_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::intensity(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.intensity)
  return _internal_intensity(index);
}
inline void PointCloud::set_intensity(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.intensity)
}
inline void PointCloud::_internal_add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensity_.Add(value);
}
inline void PointCloud::add_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_intensity(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.intensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_intensity() const {
  return intensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::intensity() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.intensity)
  return _internal_intensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_intensity() {
  return &intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.intensity)
  return _internal_mutable_intensity();
}

// repeated uint32 return_number = 6;
inline int PointCloud::_internal_return_number_size() const {
  return return_number_.size();
}
inline int PointCloud::return_number_size() const {
  return _internal_return_number_size();
}
inline void PointCloud::clear_return_number() {
  return_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_return_number(int index) const {
  return return_number_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::return_number(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.return_number)
  return _internal_return_number(index);
}
inline void PointCloud::set_return_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  return_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.return_number)
}
inline void PointCloud::_internal_add_return_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  return_number_.Add(value);
}
inline void PointCloud::add_return_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_return_number(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.return_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_return_number() const {
  return return_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::return_number() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.return_number)
  return _internal_return_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_return_number() {
  return &return_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_return_number() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.return_number)
  return _internal_mutable_return_number();
}

// repeated uint32 num_returns = 7;
inline int PointCloud::_internal_num_returns_size() const {
  return num_returns_.size();
}
inline int PointCloud::num_returns_size() const {
  return _internal_num_returns_size();
}
inline void PointCloud::clear_num_returns() {
  num_returns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_num_returns(int index) const {
  return num_returns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::num_returns(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.PointCloud.num_returns)
  return _internal_num_returns(index);
}
inline void PointCloud::set_num_returns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  num_returns_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.PointCloud.num_returns)
}
inline void PointCloud::_internal_add_num_returns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  num_returns_.Add(value);
}
inline void PointCloud::add_num_returns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_num_returns(value);
  // @@protoc_insertion_point(field_add:DTCC.PointCloud.num_returns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::_internal_num_returns() const {
  return num_returns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud::num_returns() const {
  // @@protoc_insertion_point(field_list:DTCC.PointCloud.num_returns)
  return _internal_num_returns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::_internal_mutable_num_returns() {
  return &num_returns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud::mutable_num_returns() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.PointCloud.num_returns)
  return _internal_mutable_num_returns();
}

// -------------------------------------------------------------------

// Grid

// .DTCC.Bounds bounds = 1;
inline bool Grid::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool Grid::has_bounds() const {
  return _internal_has_bounds();
}
inline void Grid::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::DTCC::Bounds& Grid::_internal_bounds() const {
  const ::DTCC::Bounds* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Bounds&>(
      ::DTCC::_Bounds_default_instance_);
}
inline const ::DTCC::Bounds& Grid::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid.bounds)
  return _internal_bounds();
}
inline void Grid::unsafe_arena_set_allocated_bounds(
    ::DTCC::Bounds* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid.bounds)
}
inline ::DTCC::Bounds* Grid::release_bounds() {
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Bounds* Grid::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.Grid.bounds)
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::DTCC::Bounds* Grid::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Bounds>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::DTCC::Bounds* Grid::mutable_bounds() {
  ::DTCC::Bounds* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.Grid.bounds)
  return _msg;
}
inline void Grid::set_allocated_bounds(::DTCC::Bounds* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Bounds>::GetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid.bounds)
}

// int32 width = 2;
inline void Grid::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid::width() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid.width)
  return _internal_width();
}
inline void Grid::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Grid::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid.width)
}

// int32 height = 3;
inline void Grid::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid.height)
  return _internal_height();
}
inline void Grid::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Grid::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid.height)
}

// float xstep = 4;
inline void Grid::clear_xstep() {
  xstep_ = 0;
}
inline float Grid::_internal_xstep() const {
  return xstep_;
}
inline float Grid::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid.xstep)
  return _internal_xstep();
}
inline void Grid::_internal_set_xstep(float value) {
  
  xstep_ = value;
}
inline void Grid::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid.xstep)
}

// float ystep = 5;
inline void Grid::clear_ystep() {
  ystep_ = 0;
}
inline float Grid::_internal_ystep() const {
  return ystep_;
}
inline float Grid::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid.ystep)
  return _internal_ystep();
}
inline void Grid::_internal_set_ystep(float value) {
  
  ystep_ = value;
}
inline void Grid::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid.ystep)
}

// -------------------------------------------------------------------

// Mesh

// repeated float vertices = 1;
inline int Mesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh::clear_vertices() {
  vertices_.Clear();
}
inline float Mesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline float Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.vertices)
  return _internal_vertices(index);
}
inline void Mesh::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh.vertices)
}
inline void Mesh::_internal_add_vertices(float value) {
  vertices_.Add(value);
}
inline void Mesh::add_vertices(float value) {
  _internal_add_vertices(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh.vertices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mesh::_internal_vertices() const {
  return vertices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.vertices)
  return _internal_vertices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mesh::_internal_mutable_vertices() {
  return &vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.vertices)
  return _internal_mutable_vertices();
}

// repeated float normals = 2;
inline int Mesh::_internal_normals_size() const {
  return normals_.size();
}
inline int Mesh::normals_size() const {
  return _internal_normals_size();
}
inline void Mesh::clear_normals() {
  normals_.Clear();
}
inline float Mesh::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline float Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.normals)
  return _internal_normals(index);
}
inline void Mesh::set_normals(int index, float value) {
  normals_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh.normals)
}
inline void Mesh::_internal_add_normals(float value) {
  normals_.Add(value);
}
inline void Mesh::add_normals(float value) {
  _internal_add_normals(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh.normals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mesh::_internal_normals() const {
  return normals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.normals)
  return _internal_normals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mesh::_internal_mutable_normals() {
  return &normals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.normals)
  return _internal_mutable_normals();
}

// repeated int32 faces = 3;
inline int Mesh::_internal_faces_size() const {
  return faces_.size();
}
inline int Mesh::faces_size() const {
  return _internal_faces_size();
}
inline void Mesh::clear_faces() {
  faces_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh.faces)
  return _internal_faces(index);
}
inline void Mesh::set_faces(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  faces_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh.faces)
}
inline void Mesh::_internal_add_faces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  faces_.Add(value);
}
inline void Mesh::add_faces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_faces(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh.faces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh::_internal_faces() const {
  return faces_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh::faces() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh.faces)
  return _internal_faces();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh::_internal_mutable_faces() {
  return &faces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh.faces)
  return _internal_mutable_faces();
}

// -------------------------------------------------------------------

// VolumeMesh

// repeated float vertices = 1;
inline int VolumeMesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int VolumeMesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void VolumeMesh::clear_vertices() {
  vertices_.Clear();
}
inline float VolumeMesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline float VolumeMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMesh.vertices)
  return _internal_vertices(index);
}
inline void VolumeMesh::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMesh.vertices)
}
inline void VolumeMesh::_internal_add_vertices(float value) {
  vertices_.Add(value);
}
inline void VolumeMesh::add_vertices(float value) {
  _internal_add_vertices(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMesh.vertices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMesh::_internal_vertices() const {
  return vertices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMesh::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMesh.vertices)
  return _internal_vertices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMesh::_internal_mutable_vertices() {
  return &vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMesh.vertices)
  return _internal_mutable_vertices();
}

// repeated float cells = 2;
inline int VolumeMesh::_internal_cells_size() const {
  return cells_.size();
}
inline int VolumeMesh::cells_size() const {
  return _internal_cells_size();
}
inline void VolumeMesh::clear_cells() {
  cells_.Clear();
}
inline float VolumeMesh::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline float VolumeMesh::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMesh.cells)
  return _internal_cells(index);
}
inline void VolumeMesh::set_cells(int index, float value) {
  cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMesh.cells)
}
inline void VolumeMesh::_internal_add_cells(float value) {
  cells_.Add(value);
}
inline void VolumeMesh::add_cells(float value) {
  _internal_add_cells(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMesh.cells)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMesh::_internal_cells() const {
  return cells_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMesh::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMesh.cells)
  return _internal_cells();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMesh::_internal_mutable_cells() {
  return &cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMesh::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMesh.cells)
  return _internal_mutable_cells();
}

// -------------------------------------------------------------------

// GridField

// .DTCC.Grid grid = 1;
inline bool GridField::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridField::has_grid() const {
  return _internal_has_grid();
}
inline void GridField::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid& GridField::_internal_grid() const {
  const ::DTCC::Grid* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid&>(
      ::DTCC::_Grid_default_instance_);
}
inline const ::DTCC::Grid& GridField::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField.grid)
  return _internal_grid();
}
inline void GridField::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField.grid)
}
inline ::DTCC::Grid* GridField::release_grid() {
  
  ::DTCC::Grid* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid* GridField::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField.grid)
  
  ::DTCC::Grid* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid* GridField::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid* GridField::mutable_grid() {
  ::DTCC::Grid* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridField.grid)
  return _msg;
}
inline void GridField::set_allocated_grid(::DTCC::Grid* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField.grid)
}

// repeated float values = 2;
inline int GridField::_internal_values_size() const {
  return values_.size();
}
inline int GridField::values_size() const {
  return _internal_values_size();
}
inline void GridField::clear_values() {
  values_.Clear();
}
inline float GridField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField.values)
  return _internal_values(index);
}
inline void GridField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField.values)
}
inline void GridField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField

// .DTCC.Grid grid = 1;
inline bool GridVectorField::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridVectorField::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField::clear_grid() {
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid& GridVectorField::_internal_grid() const {
  const ::DTCC::Grid* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Grid&>(
      ::DTCC::_Grid_default_instance_);
}
inline const ::DTCC::Grid& GridVectorField::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField.grid)
  return _internal_grid();
}
inline void GridVectorField::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField.grid)
}
inline ::DTCC::Grid* GridVectorField::release_grid() {
  
  ::DTCC::Grid* temp = grid_;
  grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Grid* GridVectorField::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField.grid)
  
  ::DTCC::Grid* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid* GridVectorField::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid>(GetArenaForAllocation());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid* GridVectorField::mutable_grid() {
  ::DTCC::Grid* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField.grid)
  return _msg;
}
inline void GridVectorField::set_allocated_grid(::DTCC::Grid* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Grid>::GetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField.grid)
}

// repeated float values = 2;
inline int GridVectorField::_internal_values_size() const {
  return values_.size();
}
inline int GridVectorField::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField::clear_values() {
  values_.Clear();
}
inline float GridVectorField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridVectorField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField.values)
  return _internal_values(index);
}
inline void GridVectorField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField.values)
}
inline void GridVectorField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridVectorField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField

// .DTCC.Mesh mesh = 1;
inline bool MeshField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshField::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh& MeshField::_internal_mesh() const {
  const ::DTCC::Mesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh&>(
      ::DTCC::_Mesh_default_instance_);
}
inline const ::DTCC::Mesh& MeshField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField.mesh)
  return _internal_mesh();
}
inline void MeshField::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField.mesh)
}
inline ::DTCC::Mesh* MeshField::release_mesh() {
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh* MeshField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField.mesh)
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh* MeshField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh* MeshField::mutable_mesh() {
  ::DTCC::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField.mesh)
  return _msg;
}
inline void MeshField::set_allocated_mesh(::DTCC::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Mesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField.mesh)
}

// repeated float values = 2;
inline int MeshField::_internal_values_size() const {
  return values_.size();
}
inline int MeshField::values_size() const {
  return _internal_values_size();
}
inline void MeshField::clear_values() {
  values_.Clear();
}
inline float MeshField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField.values)
  return _internal_values(index);
}
inline void MeshField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField.values)
}
inline void MeshField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField

// .DTCC.Mesh mesh = 1;
inline bool MeshVectorField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshVectorField::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh& MeshVectorField::_internal_mesh() const {
  const ::DTCC::Mesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Mesh&>(
      ::DTCC::_Mesh_default_instance_);
}
inline const ::DTCC::Mesh& MeshVectorField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField.mesh)
  return _internal_mesh();
}
inline void MeshVectorField::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField.mesh)
}
inline ::DTCC::Mesh* MeshVectorField::release_mesh() {
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Mesh* MeshVectorField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField.mesh)
  
  ::DTCC::Mesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh* MeshVectorField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh* MeshVectorField::mutable_mesh() {
  ::DTCC::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField.mesh)
  return _msg;
}
inline void MeshVectorField::set_allocated_mesh(::DTCC::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Mesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField.mesh)
}

// repeated float values = 2;
inline int MeshVectorField::_internal_values_size() const {
  return values_.size();
}
inline int MeshVectorField::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField::clear_values() {
  values_.Clear();
}
inline float MeshVectorField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshVectorField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField.values)
  return _internal_values(index);
}
inline void MeshVectorField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField.values)
}
inline void MeshVectorField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshVectorField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VolumeMeshField

// .DTCC.VolumeMesh mesh = 1;
inline bool VolumeMeshField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool VolumeMeshField::has_mesh() const {
  return _internal_has_mesh();
}
inline void VolumeMeshField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::VolumeMesh& VolumeMeshField::_internal_mesh() const {
  const ::DTCC::VolumeMesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::VolumeMesh&>(
      ::DTCC::_VolumeMesh_default_instance_);
}
inline const ::DTCC::VolumeMesh& VolumeMeshField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshField.mesh)
  return _internal_mesh();
}
inline void VolumeMeshField::unsafe_arena_set_allocated_mesh(
    ::DTCC::VolumeMesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.VolumeMeshField.mesh)
}
inline ::DTCC::VolumeMesh* VolumeMeshField::release_mesh() {
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.VolumeMeshField.mesh)
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::VolumeMesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::VolumeMesh* VolumeMeshField::mutable_mesh() {
  ::DTCC::VolumeMesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeMeshField.mesh)
  return _msg;
}
inline void VolumeMeshField::set_allocated_mesh(::DTCC::VolumeMesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::VolumeMesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.VolumeMeshField.mesh)
}

// repeated float values = 2;
inline int VolumeMeshField::_internal_values_size() const {
  return values_.size();
}
inline int VolumeMeshField::values_size() const {
  return _internal_values_size();
}
inline void VolumeMeshField::clear_values() {
  values_.Clear();
}
inline float VolumeMeshField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float VolumeMeshField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshField.values)
  return _internal_values(index);
}
inline void VolumeMeshField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMeshField.values)
}
inline void VolumeMeshField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void VolumeMeshField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMeshField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMeshField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMeshField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VolumeMeshVectorField

// .DTCC.VolumeMesh mesh = 1;
inline bool VolumeMeshVectorField::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool VolumeMeshVectorField::has_mesh() const {
  return _internal_has_mesh();
}
inline void VolumeMeshVectorField::clear_mesh() {
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::VolumeMesh& VolumeMeshVectorField::_internal_mesh() const {
  const ::DTCC::VolumeMesh* p = mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::VolumeMesh&>(
      ::DTCC::_VolumeMesh_default_instance_);
}
inline const ::DTCC::VolumeMesh& VolumeMeshVectorField::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshVectorField.mesh)
  return _internal_mesh();
}
inline void VolumeMeshVectorField::unsafe_arena_set_allocated_mesh(
    ::DTCC::VolumeMesh* mesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.VolumeMeshVectorField.mesh)
}
inline ::DTCC::VolumeMesh* VolumeMeshVectorField::release_mesh() {
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshVectorField::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.VolumeMeshVectorField.mesh)
  
  ::DTCC::VolumeMesh* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::VolumeMesh* VolumeMeshVectorField::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::VolumeMesh>(GetArenaForAllocation());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::VolumeMesh* VolumeMeshVectorField::mutable_mesh() {
  ::DTCC::VolumeMesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:DTCC.VolumeMeshVectorField.mesh)
  return _msg;
}
inline void VolumeMeshVectorField::set_allocated_mesh(::DTCC::VolumeMesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::VolumeMesh>::GetOwningArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.VolumeMeshVectorField.mesh)
}

// repeated float values = 2;
inline int VolumeMeshVectorField::_internal_values_size() const {
  return values_.size();
}
inline int VolumeMeshVectorField::values_size() const {
  return _internal_values_size();
}
inline void VolumeMeshVectorField::clear_values() {
  values_.Clear();
}
inline float VolumeMeshVectorField::_internal_values(int index) const {
  return values_.Get(index);
}
inline float VolumeMeshVectorField::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.VolumeMeshVectorField.values)
  return _internal_values(index);
}
inline void VolumeMeshVectorField::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.VolumeMeshVectorField.values)
}
inline void VolumeMeshVectorField::_internal_add_values(float value) {
  values_.Add(value);
}
inline void VolumeMeshVectorField::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.VolumeMeshVectorField.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshVectorField::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeMeshVectorField::values() const {
  // @@protoc_insertion_point(field_list:DTCC.VolumeMeshVectorField.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshVectorField::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeMeshVectorField::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.VolumeMeshVectorField.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Building

// string uuid = 1;
inline void Building::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Building::uuid() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Building::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Building.uuid)
}
inline std::string* Building::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.uuid)
  return _s;
}
inline const std::string& Building::_internal_uuid() const {
  return uuid_.Get();
}
inline void Building::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Building::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Building::release_uuid() {
  // @@protoc_insertion_point(field_release:DTCC.Building.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Building::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.uuid)
}

// .DTCC.Polygon footprint = 2;
inline bool Building::_internal_has_footprint() const {
  return this != internal_default_instance() && footprint_ != nullptr;
}
inline bool Building::has_footprint() const {
  return _internal_has_footprint();
}
inline void Building::clear_footprint() {
  if (GetArenaForAllocation() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
}
inline const ::DTCC::Polygon& Building::_internal_footprint() const {
  const ::DTCC::Polygon* p = footprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Polygon&>(
      ::DTCC::_Polygon_default_instance_);
}
inline const ::DTCC::Polygon& Building::footprint() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.footprint)
  return _internal_footprint();
}
inline void Building::unsafe_arena_set_allocated_footprint(
    ::DTCC::Polygon* footprint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footprint_);
  }
  footprint_ = footprint;
  if (footprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.footprint)
}
inline ::DTCC::Polygon* Building::release_footprint() {
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Polygon* Building::unsafe_arena_release_footprint() {
  // @@protoc_insertion_point(field_release:DTCC.Building.footprint)
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
  return temp;
}
inline ::DTCC::Polygon* Building::_internal_mutable_footprint() {
  
  if (footprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Polygon>(GetArenaForAllocation());
    footprint_ = p;
  }
  return footprint_;
}
inline ::DTCC::Polygon* Building::mutable_footprint() {
  ::DTCC::Polygon* _msg = _internal_mutable_footprint();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.footprint)
  return _msg;
}
inline void Building::set_allocated_footprint(::DTCC::Polygon* footprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete footprint_;
  }
  if (footprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Polygon>::GetOwningArena(footprint);
    if (message_arena != submessage_arena) {
      footprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footprint, submessage_arena);
    }
    
  } else {
    
  }
  footprint_ = footprint;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.footprint)
}

// float height = 3;
inline void Building::clear_height() {
  height_ = 0;
}
inline float Building::_internal_height() const {
  return height_;
}
inline float Building::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.height)
  return _internal_height();
}
inline void Building::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Building::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.height)
}

// float groundHeight = 4;
inline void Building::clear_groundheight() {
  groundheight_ = 0;
}
inline float Building::_internal_groundheight() const {
  return groundheight_;
}
inline float Building::groundheight() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.groundHeight)
  return _internal_groundheight();
}
inline void Building::_internal_set_groundheight(float value) {
  
  groundheight_ = value;
}
inline void Building::set_groundheight(float value) {
  _internal_set_groundheight(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.groundHeight)
}

// .DTCC.PointCloud roofpoints = 5;
inline bool Building::_internal_has_roofpoints() const {
  return this != internal_default_instance() && roofpoints_ != nullptr;
}
inline bool Building::has_roofpoints() const {
  return _internal_has_roofpoints();
}
inline void Building::clear_roofpoints() {
  if (GetArenaForAllocation() == nullptr && roofpoints_ != nullptr) {
    delete roofpoints_;
  }
  roofpoints_ = nullptr;
}
inline const ::DTCC::PointCloud& Building::_internal_roofpoints() const {
  const ::DTCC::PointCloud* p = roofpoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::PointCloud&>(
      ::DTCC::_PointCloud_default_instance_);
}
inline const ::DTCC::PointCloud& Building::roofpoints() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.roofpoints)
  return _internal_roofpoints();
}
inline void Building::unsafe_arena_set_allocated_roofpoints(
    ::DTCC::PointCloud* roofpoints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roofpoints_);
  }
  roofpoints_ = roofpoints;
  if (roofpoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.roofpoints)
}
inline ::DTCC::PointCloud* Building::release_roofpoints() {
  
  ::DTCC::PointCloud* temp = roofpoints_;
  roofpoints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::PointCloud* Building::unsafe_arena_release_roofpoints() {
  // @@protoc_insertion_point(field_release:DTCC.Building.roofpoints)
  
  ::DTCC::PointCloud* temp = roofpoints_;
  roofpoints_ = nullptr;
  return temp;
}
inline ::DTCC::PointCloud* Building::_internal_mutable_roofpoints() {
  
  if (roofpoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::PointCloud>(GetArenaForAllocation());
    roofpoints_ = p;
  }
  return roofpoints_;
}
inline ::DTCC::PointCloud* Building::mutable_roofpoints() {
  ::DTCC::PointCloud* _msg = _internal_mutable_roofpoints();
  // @@protoc_insertion_point(field_mutable:DTCC.Building.roofpoints)
  return _msg;
}
inline void Building::set_allocated_roofpoints(::DTCC::PointCloud* roofpoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roofpoints_;
  }
  if (roofpoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::PointCloud>::GetOwningArena(roofpoints);
    if (message_arena != submessage_arena) {
      roofpoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roofpoints, submessage_arena);
    }
    
  } else {
    
  }
  roofpoints_ = roofpoints;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.roofpoints)
}

// uint64 error = 6;
inline void Building::clear_error() {
  error_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Building::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Building::error() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.error)
  return _internal_error();
}
inline void Building::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  error_ = value;
}
inline void Building::set_error(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.error)
}

// -------------------------------------------------------------------

// City

// .DTCC.Bounds bounds = 1;
inline bool City::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool City::has_bounds() const {
  return _internal_has_bounds();
}
inline void City::clear_bounds() {
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::DTCC::Bounds& City::_internal_bounds() const {
  const ::DTCC::Bounds* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Bounds&>(
      ::DTCC::_Bounds_default_instance_);
}
inline const ::DTCC::Bounds& City::bounds() const {
  // @@protoc_insertion_point(field_get:DTCC.City.bounds)
  return _internal_bounds();
}
inline void City::unsafe_arena_set_allocated_bounds(
    ::DTCC::Bounds* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.City.bounds)
}
inline ::DTCC::Bounds* City::release_bounds() {
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Bounds* City::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:DTCC.City.bounds)
  
  ::DTCC::Bounds* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::DTCC::Bounds* City::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Bounds>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::DTCC::Bounds* City::mutable_bounds() {
  ::DTCC::Bounds* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:DTCC.City.bounds)
  return _msg;
}
inline void City::set_allocated_bounds(::DTCC::Bounds* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Bounds>::GetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:DTCC.City.bounds)
}

// .DTCC.Georef georef = 2;
inline bool City::_internal_has_georef() const {
  return this != internal_default_instance() && georef_ != nullptr;
}
inline bool City::has_georef() const {
  return _internal_has_georef();
}
inline void City::clear_georef() {
  if (GetArenaForAllocation() == nullptr && georef_ != nullptr) {
    delete georef_;
  }
  georef_ = nullptr;
}
inline const ::DTCC::Georef& City::_internal_georef() const {
  const ::DTCC::Georef* p = georef_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georef&>(
      ::DTCC::_Georef_default_instance_);
}
inline const ::DTCC::Georef& City::georef() const {
  // @@protoc_insertion_point(field_get:DTCC.City.georef)
  return _internal_georef();
}
inline void City::unsafe_arena_set_allocated_georef(
    ::DTCC::Georef* georef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(georef_);
  }
  georef_ = georef;
  if (georef) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.City.georef)
}
inline ::DTCC::Georef* City::release_georef() {
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georef* City::unsafe_arena_release_georef() {
  // @@protoc_insertion_point(field_release:DTCC.City.georef)
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
  return temp;
}
inline ::DTCC::Georef* City::_internal_mutable_georef() {
  
  if (georef_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georef>(GetArenaForAllocation());
    georef_ = p;
  }
  return georef_;
}
inline ::DTCC::Georef* City::mutable_georef() {
  ::DTCC::Georef* _msg = _internal_mutable_georef();
  // @@protoc_insertion_point(field_mutable:DTCC.City.georef)
  return _msg;
}
inline void City::set_allocated_georef(::DTCC::Georef* georef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete georef_;
  }
  if (georef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Georef>::GetOwningArena(georef);
    if (message_arena != submessage_arena) {
      georef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georef, submessage_arena);
    }
    
  } else {
    
  }
  georef_ = georef;
  // @@protoc_insertion_point(field_set_allocated:DTCC.City.georef)
}

// .DTCC.Raster terrain = 3;
inline bool City::_internal_has_terrain() const {
  return this != internal_default_instance() && terrain_ != nullptr;
}
inline bool City::has_terrain() const {
  return _internal_has_terrain();
}
inline void City::clear_terrain() {
  if (GetArenaForAllocation() == nullptr && terrain_ != nullptr) {
    delete terrain_;
  }
  terrain_ = nullptr;
}
inline const ::DTCC::Raster& City::_internal_terrain() const {
  const ::DTCC::Raster* p = terrain_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Raster&>(
      ::DTCC::_Raster_default_instance_);
}
inline const ::DTCC::Raster& City::terrain() const {
  // @@protoc_insertion_point(field_get:DTCC.City.terrain)
  return _internal_terrain();
}
inline void City::unsafe_arena_set_allocated_terrain(
    ::DTCC::Raster* terrain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terrain_);
  }
  terrain_ = terrain;
  if (terrain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.City.terrain)
}
inline ::DTCC::Raster* City::release_terrain() {
  
  ::DTCC::Raster* temp = terrain_;
  terrain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Raster* City::unsafe_arena_release_terrain() {
  // @@protoc_insertion_point(field_release:DTCC.City.terrain)
  
  ::DTCC::Raster* temp = terrain_;
  terrain_ = nullptr;
  return temp;
}
inline ::DTCC::Raster* City::_internal_mutable_terrain() {
  
  if (terrain_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Raster>(GetArenaForAllocation());
    terrain_ = p;
  }
  return terrain_;
}
inline ::DTCC::Raster* City::mutable_terrain() {
  ::DTCC::Raster* _msg = _internal_mutable_terrain();
  // @@protoc_insertion_point(field_mutable:DTCC.City.terrain)
  return _msg;
}
inline void City::set_allocated_terrain(::DTCC::Raster* terrain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete terrain_;
  }
  if (terrain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Raster>::GetOwningArena(terrain);
    if (message_arena != submessage_arena) {
      terrain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terrain, submessage_arena);
    }
    
  } else {
    
  }
  terrain_ = terrain;
  // @@protoc_insertion_point(field_set_allocated:DTCC.City.terrain)
}

// repeated .DTCC.Building buildings = 4;
inline int City::_internal_buildings_size() const {
  return buildings_.size();
}
inline int City::buildings_size() const {
  return _internal_buildings_size();
}
inline void City::clear_buildings() {
  buildings_.Clear();
}
inline ::DTCC::Building* City::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.City.buildings)
  return buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
City::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.City.buildings)
  return &buildings_;
}
inline const ::DTCC::Building& City::_internal_buildings(int index) const {
  return buildings_.Get(index);
}
inline const ::DTCC::Building& City::buildings(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.City.buildings)
  return _internal_buildings(index);
}
inline ::DTCC::Building* City::_internal_add_buildings() {
  return buildings_.Add();
}
inline ::DTCC::Building* City::add_buildings() {
  ::DTCC::Building* _add = _internal_add_buildings();
  // @@protoc_insertion_point(field_add:DTCC.City.buildings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
City::buildings() const {
  // @@protoc_insertion_point(field_list:DTCC.City.buildings)
  return buildings_;
}

// repeated .DTCC.LandUse landuse = 5;
inline int City::_internal_landuse_size() const {
  return landuse_.size();
}
inline int City::landuse_size() const {
  return _internal_landuse_size();
}
inline void City::clear_landuse() {
  landuse_.Clear();
}
inline ::DTCC::LandUse* City::mutable_landuse(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.City.landuse)
  return landuse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LandUse >*
City::mutable_landuse() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.City.landuse)
  return &landuse_;
}
inline const ::DTCC::LandUse& City::_internal_landuse(int index) const {
  return landuse_.Get(index);
}
inline const ::DTCC::LandUse& City::landuse(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.City.landuse)
  return _internal_landuse(index);
}
inline ::DTCC::LandUse* City::_internal_add_landuse() {
  return landuse_.Add();
}
inline ::DTCC::LandUse* City::add_landuse() {
  ::DTCC::LandUse* _add = _internal_add_landuse();
  // @@protoc_insertion_point(field_add:DTCC.City.landuse)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::LandUse >&
City::landuse() const {
  // @@protoc_insertion_point(field_list:DTCC.City.landuse)
  return landuse_;
}

// string name = 6;
inline void City::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& City::name() const {
  // @@protoc_insertion_point(field_get:DTCC.City.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void City::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.City.name)
}
inline std::string* City::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DTCC.City.name)
  return _s;
}
inline const std::string& City::_internal_name() const {
  return name_.Get();
}
inline void City::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* City::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* City::release_name() {
  // @@protoc_insertion_point(field_release:DTCC.City.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void City::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.City.name)
}

// -------------------------------------------------------------------

// LandUse

// .DTCC.Polygon footprint = 1;
inline bool LandUse::_internal_has_footprint() const {
  return this != internal_default_instance() && footprint_ != nullptr;
}
inline bool LandUse::has_footprint() const {
  return _internal_has_footprint();
}
inline void LandUse::clear_footprint() {
  if (GetArenaForAllocation() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
}
inline const ::DTCC::Polygon& LandUse::_internal_footprint() const {
  const ::DTCC::Polygon* p = footprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Polygon&>(
      ::DTCC::_Polygon_default_instance_);
}
inline const ::DTCC::Polygon& LandUse::footprint() const {
  // @@protoc_insertion_point(field_get:DTCC.LandUse.footprint)
  return _internal_footprint();
}
inline void LandUse::unsafe_arena_set_allocated_footprint(
    ::DTCC::Polygon* footprint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footprint_);
  }
  footprint_ = footprint;
  if (footprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.LandUse.footprint)
}
inline ::DTCC::Polygon* LandUse::release_footprint() {
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Polygon* LandUse::unsafe_arena_release_footprint() {
  // @@protoc_insertion_point(field_release:DTCC.LandUse.footprint)
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
  return temp;
}
inline ::DTCC::Polygon* LandUse::_internal_mutable_footprint() {
  
  if (footprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Polygon>(GetArenaForAllocation());
    footprint_ = p;
  }
  return footprint_;
}
inline ::DTCC::Polygon* LandUse::mutable_footprint() {
  ::DTCC::Polygon* _msg = _internal_mutable_footprint();
  // @@protoc_insertion_point(field_mutable:DTCC.LandUse.footprint)
  return _msg;
}
inline void LandUse::set_allocated_footprint(::DTCC::Polygon* footprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete footprint_;
  }
  if (footprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Polygon>::GetOwningArena(footprint);
    if (message_arena != submessage_arena) {
      footprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footprint, submessage_arena);
    }
    
  } else {
    
  }
  footprint_ = footprint;
  // @@protoc_insertion_point(field_set_allocated:DTCC.LandUse.footprint)
}

// string type = 2;
inline void LandUse::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& LandUse::type() const {
  // @@protoc_insertion_point(field_get:DTCC.LandUse.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LandUse::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.LandUse.type)
}
inline std::string* LandUse::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:DTCC.LandUse.type)
  return _s;
}
inline const std::string& LandUse::_internal_type() const {
  return type_.Get();
}
inline void LandUse::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LandUse::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LandUse::release_type() {
  // @@protoc_insertion_point(field_release:DTCC.LandUse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LandUse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.LandUse.type)
}

// -------------------------------------------------------------------

// Road

// repeated int32 vertices = 1;
inline int Road::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Road::vertices_size() const {
  return _internal_vertices_size();
}
inline void Road::clear_vertices() {
  vertices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Road.vertices)
  return _internal_vertices(index);
}
inline void Road::set_vertices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Road.vertices)
}
inline void Road::_internal_add_vertices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  vertices_.Add(value);
}
inline void Road::add_vertices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_vertices(value);
  // @@protoc_insertion_point(field_add:DTCC.Road.vertices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Road::_internal_vertices() const {
  return vertices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Road::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Road.vertices)
  return _internal_vertices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Road::_internal_mutable_vertices() {
  return &vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Road::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Road.vertices)
  return _internal_mutable_vertices();
}

// int32 type = 2;
inline void Road::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::type() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.type)
  return _internal_type();
}
inline void Road::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Road::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DTCC.Road.type)
}

// string name = 3;
inline void Road::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Road::name() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Road::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Road.name)
}
inline std::string* Road::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DTCC.Road.name)
  return _s;
}
inline const std::string& Road::_internal_name() const {
  return name_.Get();
}
inline void Road::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Road::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Road::release_name() {
  // @@protoc_insertion_point(field_release:DTCC.Road.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Road::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Road.name)
}

// float width = 4;
inline void Road::clear_width() {
  width_ = 0;
}
inline float Road::_internal_width() const {
  return width_;
}
inline float Road::width() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.width)
  return _internal_width();
}
inline void Road::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Road::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DTCC.Road.width)
}

// int32 lanes = 5;
inline void Road::clear_lanes() {
  lanes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::_internal_lanes() const {
  return lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::lanes() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.lanes)
  return _internal_lanes();
}
inline void Road::_internal_set_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lanes_ = value;
}
inline void Road::set_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lanes(value);
  // @@protoc_insertion_point(field_set:DTCC.Road.lanes)
}

// int32 speed_limit = 6;
inline void Road::clear_speed_limit() {
  speed_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::_internal_speed_limit() const {
  return speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Road::speed_limit() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.speed_limit)
  return _internal_speed_limit();
}
inline void Road::_internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_limit_ = value;
}
inline void Road::set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:DTCC.Road.speed_limit)
}

// string id = 7;
inline void Road::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Road::id() const {
  // @@protoc_insertion_point(field_get:DTCC.Road.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Road::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Road.id)
}
inline std::string* Road::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:DTCC.Road.id)
  return _s;
}
inline const std::string& Road::_internal_id() const {
  return id_.Get();
}
inline void Road::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Road::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Road::release_id() {
  // @@protoc_insertion_point(field_release:DTCC.Road.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Road::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Road.id)
}

// -------------------------------------------------------------------

// RoadNetwork

// repeated float vertex = 1;
inline int RoadNetwork::_internal_vertex_size() const {
  return vertex_.size();
}
inline int RoadNetwork::vertex_size() const {
  return _internal_vertex_size();
}
inline void RoadNetwork::clear_vertex() {
  vertex_.Clear();
}
inline float RoadNetwork::_internal_vertex(int index) const {
  return vertex_.Get(index);
}
inline float RoadNetwork::vertex(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.RoadNetwork.vertex)
  return _internal_vertex(index);
}
inline void RoadNetwork::set_vertex(int index, float value) {
  vertex_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.RoadNetwork.vertex)
}
inline void RoadNetwork::_internal_add_vertex(float value) {
  vertex_.Add(value);
}
inline void RoadNetwork::add_vertex(float value) {
  _internal_add_vertex(value);
  // @@protoc_insertion_point(field_add:DTCC.RoadNetwork.vertex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RoadNetwork::_internal_vertex() const {
  return vertex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RoadNetwork::vertex() const {
  // @@protoc_insertion_point(field_list:DTCC.RoadNetwork.vertex)
  return _internal_vertex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RoadNetwork::_internal_mutable_vertex() {
  return &vertex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RoadNetwork::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.RoadNetwork.vertex)
  return _internal_mutable_vertex();
}

// repeated .DTCC.Road roads = 2;
inline int RoadNetwork::_internal_roads_size() const {
  return roads_.size();
}
inline int RoadNetwork::roads_size() const {
  return _internal_roads_size();
}
inline void RoadNetwork::clear_roads() {
  roads_.Clear();
}
inline ::DTCC::Road* RoadNetwork::mutable_roads(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.RoadNetwork.roads)
  return roads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Road >*
RoadNetwork::mutable_roads() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.RoadNetwork.roads)
  return &roads_;
}
inline const ::DTCC::Road& RoadNetwork::_internal_roads(int index) const {
  return roads_.Get(index);
}
inline const ::DTCC::Road& RoadNetwork::roads(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.RoadNetwork.roads)
  return _internal_roads(index);
}
inline ::DTCC::Road* RoadNetwork::_internal_add_roads() {
  return roads_.Add();
}
inline ::DTCC::Road* RoadNetwork::add_roads() {
  ::DTCC::Road* _add = _internal_add_roads();
  // @@protoc_insertion_point(field_add:DTCC.RoadNetwork.roads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Road >&
RoadNetwork::roads() const {
  // @@protoc_insertion_point(field_list:DTCC.RoadNetwork.roads)
  return roads_;
}

// .DTCC.Georef georef = 3;
inline bool RoadNetwork::_internal_has_georef() const {
  return this != internal_default_instance() && georef_ != nullptr;
}
inline bool RoadNetwork::has_georef() const {
  return _internal_has_georef();
}
inline void RoadNetwork::clear_georef() {
  if (GetArenaForAllocation() == nullptr && georef_ != nullptr) {
    delete georef_;
  }
  georef_ = nullptr;
}
inline const ::DTCC::Georef& RoadNetwork::_internal_georef() const {
  const ::DTCC::Georef* p = georef_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::Georef&>(
      ::DTCC::_Georef_default_instance_);
}
inline const ::DTCC::Georef& RoadNetwork::georef() const {
  // @@protoc_insertion_point(field_get:DTCC.RoadNetwork.georef)
  return _internal_georef();
}
inline void RoadNetwork::unsafe_arena_set_allocated_georef(
    ::DTCC::Georef* georef) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(georef_);
  }
  georef_ = georef;
  if (georef) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.RoadNetwork.georef)
}
inline ::DTCC::Georef* RoadNetwork::release_georef() {
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::Georef* RoadNetwork::unsafe_arena_release_georef() {
  // @@protoc_insertion_point(field_release:DTCC.RoadNetwork.georef)
  
  ::DTCC::Georef* temp = georef_;
  georef_ = nullptr;
  return temp;
}
inline ::DTCC::Georef* RoadNetwork::_internal_mutable_georef() {
  
  if (georef_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Georef>(GetArenaForAllocation());
    georef_ = p;
  }
  return georef_;
}
inline ::DTCC::Georef* RoadNetwork::mutable_georef() {
  ::DTCC::Georef* _msg = _internal_mutable_georef();
  // @@protoc_insertion_point(field_mutable:DTCC.RoadNetwork.georef)
  return _msg;
}
inline void RoadNetwork::set_allocated_georef(::DTCC::Georef* georef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete georef_;
  }
  if (georef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::Georef>::GetOwningArena(georef);
    if (message_arena != submessage_arena) {
      georef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, georef, submessage_arena);
    }
    
  } else {
    
  }
  georef_ = georef;
  // @@protoc_insertion_point(field_set_allocated:DTCC.RoadNetwork.georef)
}

// -------------------------------------------------------------------

// Raster

// int32 width = 1;
inline void Raster::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::width() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.width)
  return _internal_width();
}
inline void Raster::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Raster::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DTCC.Raster.width)
}

// int32 height = 2;
inline void Raster::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.height)
  return _internal_height();
}
inline void Raster::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Raster::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Raster.height)
}

// int32 channels = 3;
inline void Raster::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Raster::channels() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.channels)
  return _internal_channels();
}
inline void Raster::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void Raster::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:DTCC.Raster.channels)
}

// repeated float values = 4;
inline int Raster::_internal_values_size() const {
  return values_.size();
}
inline int Raster::values_size() const {
  return _internal_values_size();
}
inline void Raster::clear_values() {
  values_.Clear();
}
inline float Raster::_internal_values(int index) const {
  return values_.Get(index);
}
inline float Raster::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.values)
  return _internal_values(index);
}
inline void Raster::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Raster.values)
}
inline void Raster::_internal_add_values(float value) {
  values_.Add(value);
}
inline void Raster::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.Raster.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Raster::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Raster::values() const {
  // @@protoc_insertion_point(field_list:DTCC.Raster.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Raster::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Raster::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Raster.values)
  return _internal_mutable_values();
}

// float nodata = 5;
inline void Raster::clear_nodata() {
  nodata_ = 0;
}
inline float Raster::_internal_nodata() const {
  return nodata_;
}
inline float Raster::nodata() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.nodata)
  return _internal_nodata();
}
inline void Raster::_internal_set_nodata(float value) {
  
  nodata_ = value;
}
inline void Raster::set_nodata(float value) {
  _internal_set_nodata(value);
  // @@protoc_insertion_point(field_set:DTCC.Raster.nodata)
}

// string dtype = 6;
inline void Raster::clear_dtype() {
  dtype_.ClearToEmpty();
}
inline const std::string& Raster::dtype() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.dtype)
  return _internal_dtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Raster::set_dtype(ArgT0&& arg0, ArgT... args) {
 
 dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DTCC.Raster.dtype)
}
inline std::string* Raster::mutable_dtype() {
  std::string* _s = _internal_mutable_dtype();
  // @@protoc_insertion_point(field_mutable:DTCC.Raster.dtype)
  return _s;
}
inline const std::string& Raster::_internal_dtype() const {
  return dtype_.Get();
}
inline void Raster::_internal_set_dtype(const std::string& value) {
  
  dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Raster::_internal_mutable_dtype() {
  
  return dtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Raster::release_dtype() {
  // @@protoc_insertion_point(field_release:DTCC.Raster.dtype)
  return dtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Raster::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Raster.dtype)
}

// .DTCC.AffineTransform transform = 7;
inline bool Raster::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool Raster::has_transform() const {
  return _internal_has_transform();
}
inline void Raster::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::DTCC::AffineTransform& Raster::_internal_transform() const {
  const ::DTCC::AffineTransform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::DTCC::AffineTransform&>(
      ::DTCC::_AffineTransform_default_instance_);
}
inline const ::DTCC::AffineTransform& Raster::transform() const {
  // @@protoc_insertion_point(field_get:DTCC.Raster.transform)
  return _internal_transform();
}
inline void Raster::unsafe_arena_set_allocated_transform(
    ::DTCC::AffineTransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Raster.transform)
}
inline ::DTCC::AffineTransform* Raster::release_transform() {
  
  ::DTCC::AffineTransform* temp = transform_;
  transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DTCC::AffineTransform* Raster::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:DTCC.Raster.transform)
  
  ::DTCC::AffineTransform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::DTCC::AffineTransform* Raster::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::AffineTransform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::DTCC::AffineTransform* Raster::mutable_transform() {
  ::DTCC::AffineTransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:DTCC.Raster.transform)
  return _msg;
}
inline void Raster::set_allocated_transform(::DTCC::AffineTransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DTCC::AffineTransform>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Raster.transform)
}

// -------------------------------------------------------------------

// AffineTransform

// float a = 1;
inline void AffineTransform::clear_a() {
  a_ = 0;
}
inline float AffineTransform::_internal_a() const {
  return a_;
}
inline float AffineTransform::a() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.a)
  return _internal_a();
}
inline void AffineTransform::_internal_set_a(float value) {
  
  a_ = value;
}
inline void AffineTransform::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.a)
}

// float b = 2;
inline void AffineTransform::clear_b() {
  b_ = 0;
}
inline float AffineTransform::_internal_b() const {
  return b_;
}
inline float AffineTransform::b() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.b)
  return _internal_b();
}
inline void AffineTransform::_internal_set_b(float value) {
  
  b_ = value;
}
inline void AffineTransform::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.b)
}

// float c = 3;
inline void AffineTransform::clear_c() {
  c_ = 0;
}
inline float AffineTransform::_internal_c() const {
  return c_;
}
inline float AffineTransform::c() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.c)
  return _internal_c();
}
inline void AffineTransform::_internal_set_c(float value) {
  
  c_ = value;
}
inline void AffineTransform::set_c(float value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.c)
}

// float d = 4;
inline void AffineTransform::clear_d() {
  d_ = 0;
}
inline float AffineTransform::_internal_d() const {
  return d_;
}
inline float AffineTransform::d() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.d)
  return _internal_d();
}
inline void AffineTransform::_internal_set_d(float value) {
  
  d_ = value;
}
inline void AffineTransform::set_d(float value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.d)
}

// float e = 5;
inline void AffineTransform::clear_e() {
  e_ = 0;
}
inline float AffineTransform::_internal_e() const {
  return e_;
}
inline float AffineTransform::e() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.e)
  return _internal_e();
}
inline void AffineTransform::_internal_set_e(float value) {
  
  e_ = value;
}
inline void AffineTransform::set_e(float value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.e)
}

// float f = 6;
inline void AffineTransform::clear_f() {
  f_ = 0;
}
inline float AffineTransform::_internal_f() const {
  return f_;
}
inline float AffineTransform::f() const {
  // @@protoc_insertion_point(field_get:DTCC.AffineTransform.f)
  return _internal_f();
}
inline void AffineTransform::_internal_set_f(float value) {
  
  f_ = value;
}
inline void AffineTransform::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:DTCC.AffineTransform.f)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTCC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
