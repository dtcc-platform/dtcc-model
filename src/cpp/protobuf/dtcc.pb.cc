// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#include "dtcc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DTCC {
constexpr Vector2D::Vector2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2DDefaultTypeInternal {
  constexpr Vector2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2DDefaultTypeInternal() {}
  union {
    Vector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2DDefaultTypeInternal _Vector2D_default_instance_;
constexpr Vector3D::Vector3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DDefaultTypeInternal {
  constexpr Vector3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DDefaultTypeInternal _Vector3D_default_instance_;
constexpr Triangle::Triangle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : v0_(0)
  , v1_(0)
  , v2_(0){}
struct TriangleDefaultTypeInternal {
  constexpr TriangleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TriangleDefaultTypeInternal() {}
  union {
    Triangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TriangleDefaultTypeInternal _Triangle_default_instance_;
constexpr Tetrahedron::Tetrahedron(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : v0_(0)
  , v1_(0)
  , v2_(0)
  , v3_(0){}
struct TetrahedronDefaultTypeInternal {
  constexpr TetrahedronDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TetrahedronDefaultTypeInternal() {}
  union {
    Tetrahedron _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TetrahedronDefaultTypeInternal _Tetrahedron_default_instance_;
constexpr BoundingBox2D::BoundingBox2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p_(nullptr)
  , q_(nullptr){}
struct BoundingBox2DDefaultTypeInternal {
  constexpr BoundingBox2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingBox2DDefaultTypeInternal() {}
  union {
    BoundingBox2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
constexpr BoundingBox3D::BoundingBox3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p_(nullptr)
  , q_(nullptr){}
struct BoundingBox3DDefaultTypeInternal {
  constexpr BoundingBox3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingBox3DDefaultTypeInternal() {}
  union {
    BoundingBox3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
constexpr MultiPoint::MultiPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct MultiPointDefaultTypeInternal {
  constexpr MultiPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiPointDefaultTypeInternal() {}
  union {
    MultiPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiPointDefaultTypeInternal _MultiPoint_default_instance_;
constexpr MultiPoint3D::MultiPoint3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct MultiPoint3DDefaultTypeInternal {
  constexpr MultiPoint3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiPoint3DDefaultTypeInternal() {}
  union {
    MultiPoint3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiPoint3DDefaultTypeInternal _MultiPoint3D_default_instance_;
constexpr LineString::LineString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct LineStringDefaultTypeInternal {
  constexpr LineStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineStringDefaultTypeInternal() {}
  union {
    LineString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineStringDefaultTypeInternal _LineString_default_instance_;
constexpr LineString3D::LineString3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct LineString3DDefaultTypeInternal {
  constexpr LineString3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineString3DDefaultTypeInternal() {}
  union {
    LineString3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineString3DDefaultTypeInternal _LineString3D_default_instance_;
constexpr LinearRing::LinearRing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct LinearRingDefaultTypeInternal {
  constexpr LinearRingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinearRingDefaultTypeInternal() {}
  union {
    LinearRing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinearRingDefaultTypeInternal _LinearRing_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : holes_()
  , shell_(nullptr){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr MultiPolygon::MultiPolygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygons_(){}
struct MultiPolygonDefaultTypeInternal {
  constexpr MultiPolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiPolygonDefaultTypeInternal() {}
  union {
    MultiPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiPolygonDefaultTypeInternal _MultiPolygon_default_instance_;
constexpr Grid2D::Grid2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boundingbox_(nullptr)
  , xsize_(0)
  , ysize_(0)
  , xstep_(0)
  , ystep_(0){}
struct Grid2DDefaultTypeInternal {
  constexpr Grid2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Grid2DDefaultTypeInternal() {}
  union {
    Grid2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Grid2DDefaultTypeInternal _Grid2D_default_instance_;
constexpr Grid3D::Grid3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boundingbox_(nullptr)
  , xsize_(0)
  , ysize_(0)
  , zsize_(0)
  , xstep_(0)
  , ystep_(0)
  , zstep_(0){}
struct Grid3DDefaultTypeInternal {
  constexpr Grid3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Grid3DDefaultTypeInternal() {}
  union {
    Grid3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Grid3DDefaultTypeInternal _Grid3D_default_instance_;
constexpr Mesh::Mesh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , normals_()
  , faces_(){}
struct MeshDefaultTypeInternal {
  constexpr MeshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshDefaultTypeInternal _Mesh_default_instance_;
constexpr VolumeMesh::VolumeMesh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , cells_()
  , markers_()
  , _markers_cached_byte_size_(0){}
struct VolumeMeshDefaultTypeInternal {
  constexpr VolumeMeshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeMeshDefaultTypeInternal() {}
  union {
    VolumeMesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeMeshDefaultTypeInternal _VolumeMesh_default_instance_;
constexpr GridField2D::GridField2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , grid_(nullptr){}
struct GridField2DDefaultTypeInternal {
  constexpr GridField2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GridField2DDefaultTypeInternal() {}
  union {
    GridField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GridField2DDefaultTypeInternal _GridField2D_default_instance_;
constexpr GridField3D::GridField3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , grid_(nullptr){}
struct GridField3DDefaultTypeInternal {
  constexpr GridField3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GridField3DDefaultTypeInternal() {}
  union {
    GridField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GridField3DDefaultTypeInternal _GridField3D_default_instance_;
constexpr GridVectorField2D::GridVectorField2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , grid_(nullptr){}
struct GridVectorField2DDefaultTypeInternal {
  constexpr GridVectorField2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GridVectorField2DDefaultTypeInternal() {}
  union {
    GridVectorField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GridVectorField2DDefaultTypeInternal _GridVectorField2D_default_instance_;
constexpr GridVectorField3D::GridVectorField3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , grid_(nullptr){}
struct GridVectorField3DDefaultTypeInternal {
  constexpr GridVectorField3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GridVectorField3DDefaultTypeInternal() {}
  union {
    GridVectorField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GridVectorField3DDefaultTypeInternal _GridVectorField3D_default_instance_;
constexpr MeshField::MeshField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , mesh_(nullptr){}
struct MeshFieldDefaultTypeInternal {
  constexpr MeshFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshFieldDefaultTypeInternal() {}
  union {
    MeshField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshFieldDefaultTypeInternal _MeshField_default_instance_;
constexpr MeshVectorField::MeshVectorField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , mesh_(nullptr){}
struct MeshVectorFieldDefaultTypeInternal {
  constexpr MeshVectorFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshVectorFieldDefaultTypeInternal() {}
  union {
    MeshVectorField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshVectorFieldDefaultTypeInternal _MeshVectorField_default_instance_;
constexpr VolumeMeshField::VolumeMeshField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , mesh_(nullptr){}
struct VolumeMeshFieldDefaultTypeInternal {
  constexpr VolumeMeshFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeMeshFieldDefaultTypeInternal() {}
  union {
    VolumeMeshField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeMeshFieldDefaultTypeInternal _VolumeMeshField_default_instance_;
constexpr VolumeVectorField::VolumeVectorField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , mesh_(nullptr){}
struct VolumeVectorFieldDefaultTypeInternal {
  constexpr VolumeVectorFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeVectorFieldDefaultTypeInternal() {}
  union {
    VolumeVectorField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeVectorFieldDefaultTypeInternal _VolumeVectorField_default_instance_;
constexpr PointCloud::PointCloud(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , classification_()
  , _classification_cached_byte_size_(0)
  , intensity_()
  , _intensity_cached_byte_size_(0)
  , returnnumber_()
  , _returnnumber_cached_byte_size_(0)
  , numreturns_()
  , _numreturns_cached_byte_size_(0)
  , usedclassifications_()
  , _usedclassifications_cached_byte_size_(0)
  , bounds_(nullptr)
  , georeference_(nullptr){}
struct PointCloudDefaultTypeInternal {
  constexpr PointCloudDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointCloudDefaultTypeInternal() {}
  union {
    PointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointCloudDefaultTypeInternal _PointCloud_default_instance_;
constexpr Building::Building(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , footprint_(nullptr)
  , roofpoints_(nullptr)
  , height_(0)
  , groundheight_(0)
  , error_(uint64_t{0u}){}
struct BuildingDefaultTypeInternal {
  constexpr BuildingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildingDefaultTypeInternal() {}
  union {
    Building _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildingDefaultTypeInternal _Building_default_instance_;
constexpr CityModel::CityModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buildings_()
  , bounds_(nullptr)
  , georeference_(nullptr)
  , terrain_(nullptr){}
struct CityModelDefaultTypeInternal {
  constexpr CityModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CityModelDefaultTypeInternal() {}
  union {
    CityModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CityModelDefaultTypeInternal _CityModel_default_instance_;
constexpr Georeference::Georeference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x0_(0)
  , y0_(0)
  , epsg_(0){}
struct GeoreferenceDefaultTypeInternal {
  constexpr GeoreferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeoreferenceDefaultTypeInternal() {}
  union {
    Georeference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeoreferenceDefaultTypeInternal _Georeference_default_instance_;
}  // namespace DTCC
namespace DTCC {

// ===================================================================

class Vector2D::_Internal {
 public:
};

Vector2D::Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector2D)
}
Vector2D::Vector2D(const Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector2D)
}

inline void Vector2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2D::~Vector2D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Vector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2D::ArenaDtor(void* object) {
  Vector2D* _this = reinterpret_cast< Vector2D* >(object);
  (void)_this;
}
void Vector2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<std::string>();
}

const char* Vector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector2D)
  return target;
}

size_t Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Vector2D*>(
      &from));
}

void Vector2D::MergeFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vector2D::CopyFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2D::IsInitialized() const {
  return true;
}

void Vector2D::InternalSwap(Vector2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2D, y_)
      + sizeof(Vector2D::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

std::string Vector2D::GetTypeName() const {
  return "DTCC.Vector2D";
}


// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector3D)
}

inline void Vector3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3D::ArenaDtor(void* object) {
  Vector3D* _this = reinterpret_cast< Vector3D* >(object);
  (void)_this;
}
void Vector3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<std::string>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Vector3D*>(
      &from));
}

void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, z_)
      + sizeof(Vector3D::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

std::string Vector3D::GetTypeName() const {
  return "DTCC.Vector3D";
}


// ===================================================================

class Triangle::_Internal {
 public:
};

Triangle::Triangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Triangle)
}
Triangle::Triangle(const Triangle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v2_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Triangle)
}

inline void Triangle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&v0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v2_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
}

Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:DTCC.Triangle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Triangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Triangle::ArenaDtor(void* object) {
  Triangle* _this = reinterpret_cast< Triangle* >(object);
  (void)_this;
}
void Triangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Triangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Triangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v2_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  _internal_metadata_.Clear<std::string>();
}

const char* Triangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Triangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Triangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Triangle)
  return target;
}

size_t Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Triangle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Triangle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Triangle*>(
      &from));
}

void Triangle::MergeFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v0() != 0) {
    _internal_set_v0(from._internal_v0());
  }
  if (from._internal_v1() != 0) {
    _internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _internal_set_v2(from._internal_v2());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triangle::IsInitialized() const {
  return true;
}

void Triangle::InternalSwap(Triangle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Triangle, v2_)
      + sizeof(Triangle::v2_)
      - PROTOBUF_FIELD_OFFSET(Triangle, v0_)>(
          reinterpret_cast<char*>(&v0_),
          reinterpret_cast<char*>(&other->v0_));
}

std::string Triangle::GetTypeName() const {
  return "DTCC.Triangle";
}


// ===================================================================

class Tetrahedron::_Internal {
 public:
};

Tetrahedron::Tetrahedron(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Tetrahedron)
}
Tetrahedron::Tetrahedron(const Tetrahedron& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v3_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Tetrahedron)
}

inline void Tetrahedron::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&v0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v3_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
}

Tetrahedron::~Tetrahedron() {
  // @@protoc_insertion_point(destructor:DTCC.Tetrahedron)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Tetrahedron::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tetrahedron::ArenaDtor(void* object) {
  Tetrahedron* _this = reinterpret_cast< Tetrahedron* >(object);
  (void)_this;
}
void Tetrahedron::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tetrahedron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tetrahedron::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Tetrahedron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v3_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
  _internal_metadata_.Clear<std::string>();
}

const char* Tetrahedron::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          v3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tetrahedron::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Tetrahedron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  // int32 v3 = 4;
  if (this->_internal_v3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_v3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Tetrahedron)
  return target;
}

size_t Tetrahedron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Tetrahedron)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v2());
  }

  // int32 v3 = 4;
  if (this->_internal_v3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tetrahedron::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Tetrahedron*>(
      &from));
}

void Tetrahedron::MergeFrom(const Tetrahedron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Tetrahedron)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v0() != 0) {
    _internal_set_v0(from._internal_v0());
  }
  if (from._internal_v1() != 0) {
    _internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _internal_set_v2(from._internal_v2());
  }
  if (from._internal_v3() != 0) {
    _internal_set_v3(from._internal_v3());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tetrahedron::CopyFrom(const Tetrahedron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Tetrahedron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tetrahedron::IsInitialized() const {
  return true;
}

void Tetrahedron::InternalSwap(Tetrahedron* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tetrahedron, v3_)
      + sizeof(Tetrahedron::v3_)
      - PROTOBUF_FIELD_OFFSET(Tetrahedron, v0_)>(
          reinterpret_cast<char*>(&v0_),
          reinterpret_cast<char*>(&other->v0_));
}

std::string Tetrahedron::GetTypeName() const {
  return "DTCC.Tetrahedron";
}


// ===================================================================

class BoundingBox2D::_Internal {
 public:
  static const ::DTCC::Vector2D& p(const BoundingBox2D* msg);
  static const ::DTCC::Vector2D& q(const BoundingBox2D* msg);
};

const ::DTCC::Vector2D&
BoundingBox2D::_Internal::p(const BoundingBox2D* msg) {
  return *msg->p_;
}
const ::DTCC::Vector2D&
BoundingBox2D::_Internal::q(const BoundingBox2D* msg) {
  return *msg->q_;
}
BoundingBox2D::BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox2D)
}
BoundingBox2D::BoundingBox2D(const BoundingBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_p()) {
    p_ = new ::DTCC::Vector2D(*from.p_);
  } else {
    p_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::DTCC::Vector2D(*from.q_);
  } else {
    q_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox2D)
}

inline void BoundingBox2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&q_) -
    reinterpret_cast<char*>(&p_)) + sizeof(q_));
}

BoundingBox2D::~BoundingBox2D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void BoundingBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete p_;
  if (this != internal_default_instance()) delete q_;
}

void BoundingBox2D::ArenaDtor(void* object) {
  BoundingBox2D* _this = reinterpret_cast< BoundingBox2D* >(object);
  (void)_this;
}
void BoundingBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Vector2D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Vector2D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->_internal_has_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::p(this), target, stream);
  }

  // .DTCC.Vector2D q = 2;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox2D)
  return target;
}

size_t BoundingBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_);
  }

  // .DTCC.Vector2D q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoundingBox2D*>(
      &from));
}

void BoundingBox2D::MergeFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _internal_mutable_p()->::DTCC::Vector2D::MergeFrom(from._internal_p());
  }
  if (from._internal_has_q()) {
    _internal_mutable_q()->::DTCC::Vector2D::MergeFrom(from._internal_q());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoundingBox2D::CopyFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2D::IsInitialized() const {
  return true;
}

void BoundingBox2D::InternalSwap(BoundingBox2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox2D, q_)
      + sizeof(BoundingBox2D::q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox2D, p_)>(
          reinterpret_cast<char*>(&p_),
          reinterpret_cast<char*>(&other->p_));
}

std::string BoundingBox2D::GetTypeName() const {
  return "DTCC.BoundingBox2D";
}


// ===================================================================

class BoundingBox3D::_Internal {
 public:
  static const ::DTCC::Vector3D& p(const BoundingBox3D* msg);
  static const ::DTCC::Vector3D& q(const BoundingBox3D* msg);
};

const ::DTCC::Vector3D&
BoundingBox3D::_Internal::p(const BoundingBox3D* msg) {
  return *msg->p_;
}
const ::DTCC::Vector3D&
BoundingBox3D::_Internal::q(const BoundingBox3D* msg) {
  return *msg->q_;
}
BoundingBox3D::BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox3D)
}
BoundingBox3D::BoundingBox3D(const BoundingBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_p()) {
    p_ = new ::DTCC::Vector3D(*from.p_);
  } else {
    p_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::DTCC::Vector3D(*from.q_);
  } else {
    q_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox3D)
}

inline void BoundingBox3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&q_) -
    reinterpret_cast<char*>(&p_)) + sizeof(q_));
}

BoundingBox3D::~BoundingBox3D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void BoundingBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete p_;
  if (this != internal_default_instance()) delete q_;
}

void BoundingBox3D::ArenaDtor(void* object) {
  BoundingBox3D* _this = reinterpret_cast< BoundingBox3D* >(object);
  (void)_this;
}
void BoundingBox3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingBox3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Vector3D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Vector3D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->_internal_has_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::p(this), target, stream);
  }

  // .DTCC.Vector3D q = 2;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox3D)
  return target;
}

size_t BoundingBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_);
  }

  // .DTCC.Vector3D q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoundingBox3D*>(
      &from));
}

void BoundingBox3D::MergeFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _internal_mutable_p()->::DTCC::Vector3D::MergeFrom(from._internal_p());
  }
  if (from._internal_has_q()) {
    _internal_mutable_q()->::DTCC::Vector3D::MergeFrom(from._internal_q());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoundingBox3D::CopyFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3D::IsInitialized() const {
  return true;
}

void BoundingBox3D::InternalSwap(BoundingBox3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox3D, q_)
      + sizeof(BoundingBox3D::q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox3D, p_)>(
          reinterpret_cast<char*>(&p_),
          reinterpret_cast<char*>(&other->p_));
}

std::string BoundingBox3D::GetTypeName() const {
  return "DTCC.BoundingBox3D";
}


// ===================================================================

class MultiPoint::_Internal {
 public:
};

MultiPoint::MultiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPoint)
}
MultiPoint::MultiPoint(const MultiPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPoint)
}

inline void MultiPoint::SharedCtor() {
}

MultiPoint::~MultiPoint() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void MultiPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiPoint::ArenaDtor(void* object) {
  MultiPoint* _this = reinterpret_cast< MultiPoint* >(object);
  (void)_this;
}
void MultiPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPoint)
  return target;
}

size_t MultiPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MultiPoint*>(
      &from));
}

void MultiPoint::MergeFrom(const MultiPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPoint::CopyFrom(const MultiPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPoint::IsInitialized() const {
  return true;
}

void MultiPoint::InternalSwap(MultiPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

std::string MultiPoint::GetTypeName() const {
  return "DTCC.MultiPoint";
}


// ===================================================================

class MultiPoint3D::_Internal {
 public:
};

MultiPoint3D::MultiPoint3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPoint3D)
}
MultiPoint3D::MultiPoint3D(const MultiPoint3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPoint3D)
}

inline void MultiPoint3D::SharedCtor() {
}

MultiPoint3D::~MultiPoint3D() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPoint3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void MultiPoint3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiPoint3D::ArenaDtor(void* object) {
  MultiPoint3D* _this = reinterpret_cast< MultiPoint3D* >(object);
  (void)_this;
}
void MultiPoint3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiPoint3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiPoint3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPoint3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPoint3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiPoint3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPoint3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPoint3D)
  return target;
}

size_t MultiPoint3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPoint3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPoint3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MultiPoint3D*>(
      &from));
}

void MultiPoint3D::MergeFrom(const MultiPoint3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPoint3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPoint3D::CopyFrom(const MultiPoint3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPoint3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPoint3D::IsInitialized() const {
  return true;
}

void MultiPoint3D::InternalSwap(MultiPoint3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

std::string MultiPoint3D::GetTypeName() const {
  return "DTCC.MultiPoint3D";
}


// ===================================================================

class LineString::_Internal {
 public:
};

LineString::LineString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.LineString)
}
LineString::LineString(const LineString& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LineString)
}

inline void LineString::SharedCtor() {
}

LineString::~LineString() {
  // @@protoc_insertion_point(destructor:DTCC.LineString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void LineString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LineString::ArenaDtor(void* object) {
  LineString* _this = reinterpret_cast< LineString* >(object);
  (void)_this;
}
void LineString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineString::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LineString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LineString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LineString)
  return target;
}

size_t LineString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LineString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineString::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LineString*>(
      &from));
}

void LineString::MergeFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LineString)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineString::CopyFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString::IsInitialized() const {
  return true;
}

void LineString::InternalSwap(LineString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

std::string LineString::GetTypeName() const {
  return "DTCC.LineString";
}


// ===================================================================

class LineString3D::_Internal {
 public:
};

LineString3D::LineString3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.LineString3D)
}
LineString3D::LineString3D(const LineString3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LineString3D)
}

inline void LineString3D::SharedCtor() {
}

LineString3D::~LineString3D() {
  // @@protoc_insertion_point(destructor:DTCC.LineString3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void LineString3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LineString3D::ArenaDtor(void* object) {
  LineString3D* _this = reinterpret_cast< LineString3D* >(object);
  (void)_this;
}
void LineString3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineString3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineString3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LineString3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineString3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineString3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LineString3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LineString3D)
  return target;
}

size_t LineString3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LineString3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineString3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LineString3D*>(
      &from));
}

void LineString3D::MergeFrom(const LineString3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LineString3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineString3D::CopyFrom(const LineString3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LineString3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString3D::IsInitialized() const {
  return true;
}

void LineString3D::InternalSwap(LineString3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

std::string LineString3D::GetTypeName() const {
  return "DTCC.LineString3D";
}


// ===================================================================

class LinearRing::_Internal {
 public:
};

LinearRing::LinearRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.LinearRing)
}
LinearRing::LinearRing(const LinearRing& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LinearRing)
}

inline void LinearRing::SharedCtor() {
}

LinearRing::~LinearRing() {
  // @@protoc_insertion_point(destructor:DTCC.LinearRing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void LinearRing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinearRing::ArenaDtor(void* object) {
  LinearRing* _this = reinterpret_cast< LinearRing* >(object);
  (void)_this;
}
void LinearRing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearRing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinearRing::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LinearRing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinearRing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearRing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LinearRing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LinearRing)
  return target;
}

size_t LinearRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LinearRing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearRing::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LinearRing*>(
      &from));
}

void LinearRing::MergeFrom(const LinearRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LinearRing)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinearRing::CopyFrom(const LinearRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LinearRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearRing::IsInitialized() const {
  return true;
}

void LinearRing::InternalSwap(LinearRing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

std::string LinearRing::GetTypeName() const {
  return "DTCC.LinearRing";
}


// ===================================================================

class Polygon::_Internal {
 public:
  static const ::DTCC::LinearRing& shell(const Polygon* msg);
};

const ::DTCC::LinearRing&
Polygon::_Internal::shell(const Polygon* msg) {
  return *msg->shell_;
}
Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  holes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      holes_(from.holes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_shell()) {
    shell_ = new ::DTCC::LinearRing(*from.shell_);
  } else {
    shell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.Polygon)
}

inline void Polygon::SharedCtor() {
shell_ = nullptr;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:DTCC.Polygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shell_;
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  holes_.Clear();
  if (GetArenaForAllocation() == nullptr && shell_ != nullptr) {
    delete shell_;
  }
  shell_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.LinearRing shell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.LinearRing holes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.LinearRing shell = 1;
  if (this->_internal_has_shell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shell(this), target, stream);
  }

  // repeated .DTCC.LinearRing holes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_holes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_holes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.LinearRing holes = 2;
  total_size += 1UL * this->_internal_holes_size();
  for (const auto& msg : this->holes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DTCC.LinearRing shell = 1;
  if (this->_internal_has_shell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Polygon*>(
      &from));
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  holes_.MergeFrom(from.holes_);
  if (from._internal_has_shell()) {
    _internal_mutable_shell()->::DTCC::LinearRing::MergeFrom(from._internal_shell());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  holes_.InternalSwap(&other->holes_);
  swap(shell_, other->shell_);
}

std::string Polygon::GetTypeName() const {
  return "DTCC.Polygon";
}


// ===================================================================

class MultiPolygon::_Internal {
 public:
};

MultiPolygon::MultiPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  polygons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPolygon)
}
MultiPolygon::MultiPolygon(const MultiPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPolygon)
}

inline void MultiPolygon::SharedCtor() {
}

MultiPolygon::~MultiPolygon() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPolygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void MultiPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiPolygon::ArenaDtor(void* object) {
  MultiPolygon* _this = reinterpret_cast< MultiPolygon* >(object);
  (void)_this;
}
void MultiPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Polygon polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Polygon polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPolygon)
  return target;
}

size_t MultiPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Polygon polygons = 1;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPolygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MultiPolygon*>(
      &from));
}

void MultiPolygon::MergeFrom(const MultiPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPolygon::CopyFrom(const MultiPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPolygon::IsInitialized() const {
  return true;
}

void MultiPolygon::InternalSwap(MultiPolygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
}

std::string MultiPolygon::GetTypeName() const {
  return "DTCC.MultiPolygon";
}


// ===================================================================

class Grid2D::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& boundingbox(const Grid2D* msg);
};

const ::DTCC::BoundingBox2D&
Grid2D::_Internal::boundingbox(const Grid2D* msg) {
  return *msg->boundingbox_;
}
Grid2D::Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid2D)
}
Grid2D::Grid2D(const Grid2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    boundingbox_ = new ::DTCC::BoundingBox2D(*from.boundingbox_);
  } else {
    boundingbox_ = nullptr;
  }
  ::memcpy(&xsize_, &from.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&ystep_) -
    reinterpret_cast<char*>(&xsize_)) + sizeof(ystep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid2D)
}

inline void Grid2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&boundingbox_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ystep_) -
    reinterpret_cast<char*>(&boundingbox_)) + sizeof(ystep_));
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Grid2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete boundingbox_;
}

void Grid2D::ArenaDtor(void* object) {
  Grid2D* _this = reinterpret_cast< Grid2D* >(object);
  (void)_this;
}
void Grid2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Grid2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
  ::memset(&xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ystep_) -
      reinterpret_cast<char*>(&xsize_)) + sizeof(ystep_));
  _internal_metadata_.Clear<std::string>();
}

const char* Grid2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.BoundingBox2D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float xStep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Grid2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boundingbox(this), target, stream);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // float xStep = 4;
  if (!(this->_internal_xstep() <= 0 && this->_internal_xstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_xstep(), target);
  }

  // float yStep = 5;
  if (!(this->_internal_ystep() <= 0 && this->_internal_ystep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ystep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid2D)
  return target;
}

size_t Grid2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ysize());
  }

  // float xStep = 4;
  if (!(this->_internal_xstep() <= 0 && this->_internal_xstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float yStep = 5;
  if (!(this->_internal_ystep() <= 0 && this->_internal_ystep() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Grid2D*>(
      &from));
}

void Grid2D::MergeFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_boundingbox()) {
    _internal_mutable_boundingbox()->::DTCC::BoundingBox2D::MergeFrom(from._internal_boundingbox());
  }
  if (from._internal_xsize() != 0) {
    _internal_set_xsize(from._internal_xsize());
  }
  if (from._internal_ysize() != 0) {
    _internal_set_ysize(from._internal_ysize());
  }
  if (!(from._internal_xstep() <= 0 && from._internal_xstep() >= 0)) {
    _internal_set_xstep(from._internal_xstep());
  }
  if (!(from._internal_ystep() <= 0 && from._internal_ystep() >= 0)) {
    _internal_set_ystep(from._internal_ystep());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {
  return true;
}

void Grid2D::InternalSwap(Grid2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid2D, ystep_)
      + sizeof(Grid2D::ystep_)
      - PROTOBUF_FIELD_OFFSET(Grid2D, boundingbox_)>(
          reinterpret_cast<char*>(&boundingbox_),
          reinterpret_cast<char*>(&other->boundingbox_));
}

std::string Grid2D::GetTypeName() const {
  return "DTCC.Grid2D";
}


// ===================================================================

class Grid3D::_Internal {
 public:
  static const ::DTCC::BoundingBox3D& boundingbox(const Grid3D* msg);
};

const ::DTCC::BoundingBox3D&
Grid3D::_Internal::boundingbox(const Grid3D* msg) {
  return *msg->boundingbox_;
}
Grid3D::Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid3D)
}
Grid3D::Grid3D(const Grid3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    boundingbox_ = new ::DTCC::BoundingBox3D(*from.boundingbox_);
  } else {
    boundingbox_ = nullptr;
  }
  ::memcpy(&xsize_, &from.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&zstep_) -
    reinterpret_cast<char*>(&xsize_)) + sizeof(zstep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid3D)
}

inline void Grid3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&boundingbox_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zstep_) -
    reinterpret_cast<char*>(&boundingbox_)) + sizeof(zstep_));
}

Grid3D::~Grid3D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Grid3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete boundingbox_;
}

void Grid3D::ArenaDtor(void* object) {
  Grid3D* _this = reinterpret_cast< Grid3D* >(object);
  (void)_this;
}
void Grid3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Grid3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Grid3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
  ::memset(&xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zstep_) -
      reinterpret_cast<char*>(&xsize_)) + sizeof(zstep_));
  _internal_metadata_.Clear<std::string>();
}

const char* Grid3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.BoundingBox3D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          zsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float xStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yStep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zStep = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          zstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Grid3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boundingbox(this), target, stream);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // int32 zSize = 4;
  if (this->_internal_zsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_zsize(), target);
  }

  // float xStep = 5;
  if (!(this->_internal_xstep() <= 0 && this->_internal_xstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_xstep(), target);
  }

  // float yStep = 6;
  if (!(this->_internal_ystep() <= 0 && this->_internal_ystep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ystep(), target);
  }

  // float zStep = 7;
  if (!(this->_internal_zstep() <= 0 && this->_internal_zstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_zstep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid3D)
  return target;
}

size_t Grid3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ysize());
  }

  // int32 zSize = 4;
  if (this->_internal_zsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zsize());
  }

  // float xStep = 5;
  if (!(this->_internal_xstep() <= 0 && this->_internal_xstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float yStep = 6;
  if (!(this->_internal_ystep() <= 0 && this->_internal_ystep() >= 0)) {
    total_size += 1 + 4;
  }

  // float zStep = 7;
  if (!(this->_internal_zstep() <= 0 && this->_internal_zstep() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Grid3D*>(
      &from));
}

void Grid3D::MergeFrom(const Grid3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_boundingbox()) {
    _internal_mutable_boundingbox()->::DTCC::BoundingBox3D::MergeFrom(from._internal_boundingbox());
  }
  if (from._internal_xsize() != 0) {
    _internal_set_xsize(from._internal_xsize());
  }
  if (from._internal_ysize() != 0) {
    _internal_set_ysize(from._internal_ysize());
  }
  if (from._internal_zsize() != 0) {
    _internal_set_zsize(from._internal_zsize());
  }
  if (!(from._internal_xstep() <= 0 && from._internal_xstep() >= 0)) {
    _internal_set_xstep(from._internal_xstep());
  }
  if (!(from._internal_ystep() <= 0 && from._internal_ystep() >= 0)) {
    _internal_set_ystep(from._internal_ystep());
  }
  if (!(from._internal_zstep() <= 0 && from._internal_zstep() >= 0)) {
    _internal_set_zstep(from._internal_zstep());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Grid3D::CopyFrom(const Grid3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid3D::IsInitialized() const {
  return true;
}

void Grid3D::InternalSwap(Grid3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid3D, zstep_)
      + sizeof(Grid3D::zstep_)
      - PROTOBUF_FIELD_OFFSET(Grid3D, boundingbox_)>(
          reinterpret_cast<char*>(&boundingbox_),
          reinterpret_cast<char*>(&other->boundingbox_));
}

std::string Grid3D::GetTypeName() const {
  return "DTCC.Grid3D";
}


// ===================================================================

class Mesh::_Internal {
 public:
};

Mesh::Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vertices_(arena),
  normals_(arena),
  faces_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      vertices_(from.vertices_),
      normals_(from.normals_),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh)
}

inline void Mesh::SharedCtor() {
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Mesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mesh::ArenaDtor(void* object) {
  Mesh* _this = reinterpret_cast< Mesh* >(object);
  (void)_this;
}
void Mesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  normals_.Clear();
  faces_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Mesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Vector3D normals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Triangle faces = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Vector3D normals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_normals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_normals(i), target, stream);
  }

  // repeated .DTCC.Triangle faces = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Vector3D normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Triangle faces = 3;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Mesh*>(
      &from));
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  normals_.MergeFrom(from.normals_);
  faces_.MergeFrom(from.faces_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  normals_.InternalSwap(&other->normals_);
  faces_.InternalSwap(&other->faces_);
}

std::string Mesh::GetTypeName() const {
  return "DTCC.Mesh";
}


// ===================================================================

class VolumeMesh::_Internal {
 public:
};

VolumeMesh::VolumeMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vertices_(arena),
  cells_(arena),
  markers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.VolumeMesh)
}
VolumeMesh::VolumeMesh(const VolumeMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      vertices_(from.vertices_),
      cells_(from.cells_),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.VolumeMesh)
}

inline void VolumeMesh::SharedCtor() {
}

VolumeMesh::~VolumeMesh() {
  // @@protoc_insertion_point(destructor:DTCC.VolumeMesh)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void VolumeMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VolumeMesh::ArenaDtor(void* object) {
  VolumeMesh* _this = reinterpret_cast< VolumeMesh* >(object);
  (void)_this;
}
void VolumeMesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.VolumeMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  cells_.Clear();
  markers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VolumeMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Tetrahedron cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_markers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_markers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.VolumeMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Tetrahedron cells = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cells(i), target, stream);
  }

  // repeated int32 markers = 3;
  {
    int byte_size = _markers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_markers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.VolumeMesh)
  return target;
}

size_t VolumeMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.VolumeMesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Tetrahedron cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 markers = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->markers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _markers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeMesh::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VolumeMesh*>(
      &from));
}

void VolumeMesh::MergeFrom(const VolumeMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.VolumeMesh)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  cells_.MergeFrom(from.cells_);
  markers_.MergeFrom(from.markers_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VolumeMesh::CopyFrom(const VolumeMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.VolumeMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeMesh::IsInitialized() const {
  return true;
}

void VolumeMesh::InternalSwap(VolumeMesh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  cells_.InternalSwap(&other->cells_);
  markers_.InternalSwap(&other->markers_);
}

std::string VolumeMesh::GetTypeName() const {
  return "DTCC.VolumeMesh";
}


// ===================================================================

class GridField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridField2D* msg);
};

const ::DTCC::Grid2D&
GridField2D::_Internal::grid(const GridField2D* msg) {
  return *msg->grid_;
}
GridField2D::GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField2D)
}
GridField2D::GridField2D(const GridField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid2D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField2D)
}

inline void GridField2D::SharedCtor() {
grid_ = nullptr;
}

GridField2D::~GridField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GridField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridField2D::ArenaDtor(void* object) {
  GridField2D* _this = reinterpret_cast< GridField2D* >(object);
  (void)_this;
}
void GridField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GridField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField2D)
  return target;
}

size_t GridField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GridField2D*>(
      &from));
}

void GridField2D::MergeFrom(const GridField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(from._internal_grid());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridField2D::CopyFrom(const GridField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField2D::IsInitialized() const {
  return true;
}

void GridField2D::InternalSwap(GridField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

std::string GridField2D::GetTypeName() const {
  return "DTCC.GridField2D";
}


// ===================================================================

class GridField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridField3D* msg);
};

const ::DTCC::Grid3D&
GridField3D::_Internal::grid(const GridField3D* msg) {
  return *msg->grid_;
}
GridField3D::GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField3D)
}
GridField3D::GridField3D(const GridField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid3D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField3D)
}

inline void GridField3D::SharedCtor() {
grid_ = nullptr;
}

GridField3D::~GridField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GridField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridField3D::ArenaDtor(void* object) {
  GridField3D* _this = reinterpret_cast< GridField3D* >(object);
  (void)_this;
}
void GridField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GridField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField3D)
  return target;
}

size_t GridField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GridField3D*>(
      &from));
}

void GridField3D::MergeFrom(const GridField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(from._internal_grid());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridField3D::CopyFrom(const GridField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField3D::IsInitialized() const {
  return true;
}

void GridField3D::InternalSwap(GridField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

std::string GridField3D::GetTypeName() const {
  return "DTCC.GridField3D";
}


// ===================================================================

class GridVectorField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridVectorField2D* msg);
};

const ::DTCC::Grid2D&
GridVectorField2D::_Internal::grid(const GridVectorField2D* msg) {
  return *msg->grid_;
}
GridVectorField2D::GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField2D)
}
GridVectorField2D::GridVectorField2D(const GridVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid2D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField2D)
}

inline void GridVectorField2D::SharedCtor() {
grid_ = nullptr;
}

GridVectorField2D::~GridVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GridVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridVectorField2D::ArenaDtor(void* object) {
  GridVectorField2D* _this = reinterpret_cast< GridVectorField2D* >(object);
  (void)_this;
}
void GridVectorField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridVectorField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GridVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridVectorField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridVectorField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField2D)
  return target;
}

size_t GridVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GridVectorField2D*>(
      &from));
}

void GridVectorField2D::MergeFrom(const GridVectorField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(from._internal_grid());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridVectorField2D::CopyFrom(const GridVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField2D::IsInitialized() const {
  return true;
}

void GridVectorField2D::InternalSwap(GridVectorField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

std::string GridVectorField2D::GetTypeName() const {
  return "DTCC.GridVectorField2D";
}


// ===================================================================

class GridVectorField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridVectorField3D* msg);
};

const ::DTCC::Grid3D&
GridVectorField3D::_Internal::grid(const GridVectorField3D* msg) {
  return *msg->grid_;
}
GridVectorField3D::GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField3D)
}
GridVectorField3D::GridVectorField3D(const GridVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid3D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField3D)
}

inline void GridVectorField3D::SharedCtor() {
grid_ = nullptr;
}

GridVectorField3D::~GridVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void GridVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridVectorField3D::ArenaDtor(void* object) {
  GridVectorField3D* _this = reinterpret_cast< GridVectorField3D* >(object);
  (void)_this;
}
void GridVectorField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridVectorField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GridVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridVectorField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridVectorField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField3D)
  return target;
}

size_t GridVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GridVectorField3D*>(
      &from));
}

void GridVectorField3D::MergeFrom(const GridVectorField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(from._internal_grid());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridVectorField3D::CopyFrom(const GridVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField3D::IsInitialized() const {
  return true;
}

void GridVectorField3D::InternalSwap(GridVectorField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

std::string GridVectorField3D::GetTypeName() const {
  return "DTCC.GridVectorField3D";
}


// ===================================================================

class MeshField::_Internal {
 public:
  static const ::DTCC::Mesh& mesh(const MeshField* msg);
};

const ::DTCC::Mesh&
MeshField::_Internal::mesh(const MeshField* msg) {
  return *msg->mesh_;
}
MeshField::MeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshField)
}
MeshField::MeshField(const MeshField& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshField)
}

inline void MeshField::SharedCtor() {
mesh_ = nullptr;
}

MeshField::~MeshField() {
  // @@protoc_insertion_point(destructor:DTCC.MeshField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void MeshField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshField::ArenaDtor(void* object) {
  MeshField* _this = reinterpret_cast< MeshField* >(object);
  (void)_this;
}
void MeshField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeshField::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh mesh = 1;
  if (this->_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshField)
  return target;
}

size_t MeshField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshField::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MeshField*>(
      &from));
}

void MeshField::MergeFrom(const MeshField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh::MergeFrom(from._internal_mesh());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshField::CopyFrom(const MeshField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshField::IsInitialized() const {
  return true;
}

void MeshField::InternalSwap(MeshField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

std::string MeshField::GetTypeName() const {
  return "DTCC.MeshField";
}


// ===================================================================

class MeshVectorField::_Internal {
 public:
  static const ::DTCC::Mesh& mesh(const MeshVectorField* msg);
};

const ::DTCC::Mesh&
MeshVectorField::_Internal::mesh(const MeshVectorField* msg) {
  return *msg->mesh_;
}
MeshVectorField::MeshVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshVectorField)
}
MeshVectorField::MeshVectorField(const MeshVectorField& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshVectorField)
}

inline void MeshVectorField::SharedCtor() {
mesh_ = nullptr;
}

MeshVectorField::~MeshVectorField() {
  // @@protoc_insertion_point(destructor:DTCC.MeshVectorField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void MeshVectorField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshVectorField::ArenaDtor(void* object) {
  MeshVectorField* _this = reinterpret_cast< MeshVectorField* >(object);
  (void)_this;
}
void MeshVectorField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshVectorField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeshVectorField::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshVectorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshVectorField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshVectorField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshVectorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh mesh = 1;
  if (this->_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshVectorField)
  return target;
}

size_t MeshVectorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshVectorField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshVectorField::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MeshVectorField*>(
      &from));
}

void MeshVectorField::MergeFrom(const MeshVectorField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshVectorField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh::MergeFrom(from._internal_mesh());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshVectorField::CopyFrom(const MeshVectorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshVectorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshVectorField::IsInitialized() const {
  return true;
}

void MeshVectorField::InternalSwap(MeshVectorField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

std::string MeshVectorField::GetTypeName() const {
  return "DTCC.MeshVectorField";
}


// ===================================================================

class VolumeMeshField::_Internal {
 public:
  static const ::DTCC::VolumeMesh& mesh(const VolumeMeshField* msg);
};

const ::DTCC::VolumeMesh&
VolumeMeshField::_Internal::mesh(const VolumeMeshField* msg) {
  return *msg->mesh_;
}
VolumeMeshField::VolumeMeshField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.VolumeMeshField)
}
VolumeMeshField::VolumeMeshField(const VolumeMeshField& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::VolumeMesh(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.VolumeMeshField)
}

inline void VolumeMeshField::SharedCtor() {
mesh_ = nullptr;
}

VolumeMeshField::~VolumeMeshField() {
  // @@protoc_insertion_point(destructor:DTCC.VolumeMeshField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void VolumeMeshField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void VolumeMeshField::ArenaDtor(void* object) {
  VolumeMeshField* _this = reinterpret_cast< VolumeMeshField* >(object);
  (void)_this;
}
void VolumeMeshField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeMeshField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeMeshField::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.VolumeMeshField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* VolumeMeshField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.VolumeMesh mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeMeshField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.VolumeMeshField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.VolumeMesh mesh = 1;
  if (this->_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.VolumeMeshField)
  return target;
}

size_t VolumeMeshField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.VolumeMeshField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.VolumeMesh mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeMeshField::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VolumeMeshField*>(
      &from));
}

void VolumeMeshField::MergeFrom(const VolumeMeshField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.VolumeMeshField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_mesh()) {
    _internal_mutable_mesh()->::DTCC::VolumeMesh::MergeFrom(from._internal_mesh());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VolumeMeshField::CopyFrom(const VolumeMeshField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.VolumeMeshField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeMeshField::IsInitialized() const {
  return true;
}

void VolumeMeshField::InternalSwap(VolumeMeshField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

std::string VolumeMeshField::GetTypeName() const {
  return "DTCC.VolumeMeshField";
}


// ===================================================================

class VolumeVectorField::_Internal {
 public:
  static const ::DTCC::VolumeMesh& mesh(const VolumeVectorField* msg);
};

const ::DTCC::VolumeMesh&
VolumeVectorField::_Internal::mesh(const VolumeVectorField* msg) {
  return *msg->mesh_;
}
VolumeVectorField::VolumeVectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.VolumeVectorField)
}
VolumeVectorField::VolumeVectorField(const VolumeVectorField& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::VolumeMesh(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.VolumeVectorField)
}

inline void VolumeVectorField::SharedCtor() {
mesh_ = nullptr;
}

VolumeVectorField::~VolumeVectorField() {
  // @@protoc_insertion_point(destructor:DTCC.VolumeVectorField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void VolumeVectorField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void VolumeVectorField::ArenaDtor(void* object) {
  VolumeVectorField* _this = reinterpret_cast< VolumeVectorField* >(object);
  (void)_this;
}
void VolumeVectorField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeVectorField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeVectorField::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.VolumeVectorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* VolumeVectorField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.VolumeMesh mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeVectorField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.VolumeVectorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.VolumeMesh mesh = 1;
  if (this->_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.VolumeVectorField)
  return target;
}

size_t VolumeVectorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.VolumeVectorField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.VolumeMesh mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeVectorField::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VolumeVectorField*>(
      &from));
}

void VolumeVectorField::MergeFrom(const VolumeVectorField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.VolumeVectorField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_mesh()) {
    _internal_mutable_mesh()->::DTCC::VolumeMesh::MergeFrom(from._internal_mesh());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VolumeVectorField::CopyFrom(const VolumeVectorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.VolumeVectorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeVectorField::IsInitialized() const {
  return true;
}

void VolumeVectorField::InternalSwap(VolumeVectorField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

std::string VolumeVectorField::GetTypeName() const {
  return "DTCC.VolumeVectorField";
}


// ===================================================================

class PointCloud::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& bounds(const PointCloud* msg);
  static const ::DTCC::Georeference& georeference(const PointCloud* msg);
};

const ::DTCC::BoundingBox2D&
PointCloud::_Internal::bounds(const PointCloud* msg) {
  return *msg->bounds_;
}
const ::DTCC::Georeference&
PointCloud::_Internal::georeference(const PointCloud* msg) {
  return *msg->georeference_;
}
PointCloud::PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  points_(arena),
  classification_(arena),
  intensity_(arena),
  returnnumber_(arena),
  numreturns_(arena),
  usedclassifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      points_(from.points_),
      classification_(from.classification_),
      intensity_(from.intensity_),
      returnnumber_(from.returnnumber_),
      numreturns_(from.numreturns_),
      usedclassifications_(from.usedclassifications_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    bounds_ = new ::DTCC::BoundingBox2D(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  if (from._internal_has_georeference()) {
    georeference_ = new ::DTCC::Georeference(*from.georeference_);
  } else {
    georeference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.PointCloud)
}

inline void PointCloud::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bounds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&georeference_) -
    reinterpret_cast<char*>(&bounds_)) + sizeof(georeference_));
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:DTCC.PointCloud)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bounds_;
  if (this != internal_default_instance()) delete georeference_;
}

void PointCloud::ArenaDtor(void* object) {
  PointCloud* _this = reinterpret_cast< PointCloud* >(object);
  (void)_this;
}
void PointCloud::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  classification_.Clear();
  intensity_.Clear();
  returnnumber_.Clear();
  numreturns_.Clear();
  usedclassifications_.Clear();
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && georeference_ != nullptr) {
    delete georeference_;
  }
  georeference_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .DTCC.BoundingBox2D bounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_classification(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_classification(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 returnNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_returnnumber(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_returnnumber(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 numReturns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_numreturns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_numreturns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 usedClassifications = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_usedclassifications(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_usedclassifications(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Georeference georeference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_georeference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bounds(this), target, stream);
  }

  // repeated uint32 classification = 3;
  {
    int byte_size = _classification_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_classification(), byte_size, target);
    }
  }

  // repeated uint32 intensity = 4;
  {
    int byte_size = _intensity_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_intensity(), byte_size, target);
    }
  }

  // repeated uint32 returnNumber = 5;
  {
    int byte_size = _returnnumber_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_returnnumber(), byte_size, target);
    }
  }

  // repeated uint32 numReturns = 6;
  {
    int byte_size = _numreturns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_numreturns(), byte_size, target);
    }
  }

  // repeated uint32 usedClassifications = 7;
  {
    int byte_size = _usedclassifications_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_usedclassifications(), byte_size, target);
    }
  }

  // .DTCC.Georeference georeference = 8;
  if (this->_internal_has_georeference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::georeference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.PointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 classification = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->classification_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _classification_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 intensity = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->intensity_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 returnNumber = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->returnnumber_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _returnnumber_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 numReturns = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->numreturns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numreturns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 usedClassifications = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->usedclassifications_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _usedclassifications_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // .DTCC.Georeference georeference = 8;
  if (this->_internal_has_georeference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *georeference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PointCloud*>(
      &from));
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  classification_.MergeFrom(from.classification_);
  intensity_.MergeFrom(from.intensity_);
  returnnumber_.MergeFrom(from.returnnumber_);
  numreturns_.MergeFrom(from.numreturns_);
  usedclassifications_.MergeFrom(from.usedclassifications_);
  if (from._internal_has_bounds()) {
    _internal_mutable_bounds()->::DTCC::BoundingBox2D::MergeFrom(from._internal_bounds());
  }
  if (from._internal_has_georeference()) {
    _internal_mutable_georeference()->::DTCC::Georeference::MergeFrom(from._internal_georeference());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  classification_.InternalSwap(&other->classification_);
  intensity_.InternalSwap(&other->intensity_);
  returnnumber_.InternalSwap(&other->returnnumber_);
  numreturns_.InternalSwap(&other->numreturns_);
  usedclassifications_.InternalSwap(&other->usedclassifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointCloud, georeference_)
      + sizeof(PointCloud::georeference_)
      - PROTOBUF_FIELD_OFFSET(PointCloud, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

std::string PointCloud::GetTypeName() const {
  return "DTCC.PointCloud";
}


// ===================================================================

class Building::_Internal {
 public:
  static const ::DTCC::Polygon& footprint(const Building* msg);
  static const ::DTCC::PointCloud& roofpoints(const Building* msg);
};

const ::DTCC::Polygon&
Building::_Internal::footprint(const Building* msg) {
  return *msg->footprint_;
}
const ::DTCC::PointCloud&
Building::_Internal::roofpoints(const Building* msg) {
  return *msg->roofpoints_;
}
Building::Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Building)
}
Building::Building(const Building& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_footprint()) {
    footprint_ = new ::DTCC::Polygon(*from.footprint_);
  } else {
    footprint_ = nullptr;
  }
  if (from._internal_has_roofpoints()) {
    roofpoints_ = new ::DTCC::PointCloud(*from.roofpoints_);
  } else {
    roofpoints_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&height_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Building)
}

inline void Building::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&footprint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&footprint_)) + sizeof(error_));
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:DTCC.Building)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Building::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete footprint_;
  if (this != internal_default_instance()) delete roofpoints_;
}

void Building::ArenaDtor(void* object) {
  Building* _this = reinterpret_cast< Building* >(object);
  (void)_this;
}
void Building::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && roofpoints_ != nullptr) {
    delete roofpoints_;
  }
  roofpoints_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&height_)) + sizeof(error_));
  _internal_metadata_.Clear<std::string>();
}

const char* Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Polygon footPrint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_footprint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double groundHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          groundheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .DTCC.PointCloud roofpoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_roofpoints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DTCC.Building.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->_internal_has_footprint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::footprint(this), target, stream);
  }

  // double height = 3;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // double groundHeight = 4;
  if (!(this->_internal_groundheight() <= 0 && this->_internal_groundheight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_groundheight(), target);
  }

  // .DTCC.PointCloud roofpoints = 5;
  if (this->_internal_has_roofpoints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::roofpoints(this), target, stream);
  }

  // uint64 error = 6;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Building)
  return target;
}

size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->_internal_has_footprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footprint_);
  }

  // .DTCC.PointCloud roofpoints = 5;
  if (this->_internal_has_roofpoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roofpoints_);
  }

  // double height = 3;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double groundHeight = 4;
  if (!(this->_internal_groundheight() <= 0 && this->_internal_groundheight() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 error = 6;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Building::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Building*>(
      &from));
}

void Building::MergeFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Building)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_footprint()) {
    _internal_mutable_footprint()->::DTCC::Polygon::MergeFrom(from._internal_footprint());
  }
  if (from._internal_has_roofpoints()) {
    _internal_mutable_roofpoints()->::DTCC::PointCloud::MergeFrom(from._internal_roofpoints());
  }
  if (!(from._internal_height() <= 0 && from._internal_height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from._internal_groundheight() <= 0 && from._internal_groundheight() >= 0)) {
    _internal_set_groundheight(from._internal_groundheight());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  return true;
}

void Building::InternalSwap(Building* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, GetArenaForAllocation(),
      &other->uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Building, error_)
      + sizeof(Building::error_)
      - PROTOBUF_FIELD_OFFSET(Building, footprint_)>(
          reinterpret_cast<char*>(&footprint_),
          reinterpret_cast<char*>(&other->footprint_));
}

std::string Building::GetTypeName() const {
  return "DTCC.Building";
}


// ===================================================================

class CityModel::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& bounds(const CityModel* msg);
  static const ::DTCC::Georeference& georeference(const CityModel* msg);
  static const ::DTCC::GridField2D& terrain(const CityModel* msg);
};

const ::DTCC::BoundingBox2D&
CityModel::_Internal::bounds(const CityModel* msg) {
  return *msg->bounds_;
}
const ::DTCC::Georeference&
CityModel::_Internal::georeference(const CityModel* msg) {
  return *msg->georeference_;
}
const ::DTCC::GridField2D&
CityModel::_Internal::terrain(const CityModel* msg) {
  return *msg->terrain_;
}
CityModel::CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  buildings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.CityModel)
}
CityModel::CityModel(const CityModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    bounds_ = new ::DTCC::BoundingBox2D(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  if (from._internal_has_georeference()) {
    georeference_ = new ::DTCC::Georeference(*from.georeference_);
  } else {
    georeference_ = nullptr;
  }
  if (from._internal_has_terrain()) {
    terrain_ = new ::DTCC::GridField2D(*from.terrain_);
  } else {
    terrain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.CityModel)
}

inline void CityModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bounds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terrain_) -
    reinterpret_cast<char*>(&bounds_)) + sizeof(terrain_));
}

CityModel::~CityModel() {
  // @@protoc_insertion_point(destructor:DTCC.CityModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CityModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bounds_;
  if (this != internal_default_instance()) delete georeference_;
  if (this != internal_default_instance()) delete terrain_;
}

void CityModel::ArenaDtor(void* object) {
  CityModel* _this = reinterpret_cast< CityModel* >(object);
  (void)_this;
}
void CityModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CityModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CityModel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.CityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && georeference_ != nullptr) {
    delete georeference_;
  }
  georeference_ = nullptr;
  if (GetArenaForAllocation() == nullptr && terrain_ != nullptr) {
    delete terrain_;
  }
  terrain_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* CityModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Building buildings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .DTCC.BoundingBox2D bounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Georeference georeference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_georeference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.GridField2D terrain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_terrain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CityModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.CityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buildings(i), target, stream);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bounds(this), target, stream);
  }

  // .DTCC.Georeference georeference = 3;
  if (this->_internal_has_georeference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::georeference(this), target, stream);
  }

  // .DTCC.GridField2D terrain = 4;
  if (this->_internal_has_terrain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::terrain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.CityModel)
  return target;
}

size_t CityModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.CityModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // .DTCC.Georeference georeference = 3;
  if (this->_internal_has_georeference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *georeference_);
  }

  // .DTCC.GridField2D terrain = 4;
  if (this->_internal_has_terrain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terrain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CityModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CityModel*>(
      &from));
}

void CityModel::MergeFrom(const CityModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.CityModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
  if (from._internal_has_bounds()) {
    _internal_mutable_bounds()->::DTCC::BoundingBox2D::MergeFrom(from._internal_bounds());
  }
  if (from._internal_has_georeference()) {
    _internal_mutable_georeference()->::DTCC::Georeference::MergeFrom(from._internal_georeference());
  }
  if (from._internal_has_terrain()) {
    _internal_mutable_terrain()->::DTCC::GridField2D::MergeFrom(from._internal_terrain());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CityModel::CopyFrom(const CityModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.CityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityModel::IsInitialized() const {
  return true;
}

void CityModel::InternalSwap(CityModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buildings_.InternalSwap(&other->buildings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CityModel, terrain_)
      + sizeof(CityModel::terrain_)
      - PROTOBUF_FIELD_OFFSET(CityModel, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

std::string CityModel::GetTypeName() const {
  return "DTCC.CityModel";
}


// ===================================================================

class Georeference::_Internal {
 public:
};

Georeference::Georeference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DTCC.Georeference)
}
Georeference::Georeference(const Georeference& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  crs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_crs().empty()) {
    crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_crs(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x0_, &from.x0_,
    static_cast<size_t>(reinterpret_cast<char*>(&epsg_) -
    reinterpret_cast<char*>(&x0_)) + sizeof(epsg_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Georeference)
}

inline void Georeference::SharedCtor() {
crs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epsg_) -
    reinterpret_cast<char*>(&x0_)) + sizeof(epsg_));
}

Georeference::~Georeference() {
  // @@protoc_insertion_point(destructor:DTCC.Georeference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Georeference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  crs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Georeference::ArenaDtor(void* object) {
  Georeference* _this = reinterpret_cast< Georeference* >(object);
  (void)_this;
}
void Georeference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Georeference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Georeference::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Georeference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crs_.ClearToEmpty();
  ::memset(&x0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epsg_) -
      reinterpret_cast<char*>(&x0_)) + sizeof(epsg_));
  _internal_metadata_.Clear<std::string>();
}

const char* Georeference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string crs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_crs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Georeference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Georeference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crs = 1;
  if (!this->_internal_crs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crs().data(), static_cast<int>(this->_internal_crs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DTCC.Georeference.crs");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crs(), target);
  }

  // int32 epsg = 2;
  if (this->_internal_epsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_epsg(), target);
  }

  // double x0 = 3;
  if (!(this->_internal_x0() <= 0 && this->_internal_x0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x0(), target);
  }

  // double y0 = 4;
  if (!(this->_internal_y0() <= 0 && this->_internal_y0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Georeference)
  return target;
}

size_t Georeference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Georeference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crs = 1;
  if (!this->_internal_crs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crs());
  }

  // double x0 = 3;
  if (!(this->_internal_x0() <= 0 && this->_internal_x0() >= 0)) {
    total_size += 1 + 8;
  }

  // double y0 = 4;
  if (!(this->_internal_y0() <= 0 && this->_internal_y0() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 epsg = 2;
  if (this->_internal_epsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Georeference::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Georeference*>(
      &from));
}

void Georeference::MergeFrom(const Georeference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Georeference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_crs().empty()) {
    _internal_set_crs(from._internal_crs());
  }
  if (!(from._internal_x0() <= 0 && from._internal_x0() >= 0)) {
    _internal_set_x0(from._internal_x0());
  }
  if (!(from._internal_y0() <= 0 && from._internal_y0() >= 0)) {
    _internal_set_y0(from._internal_y0());
  }
  if (from._internal_epsg() != 0) {
    _internal_set_epsg(from._internal_epsg());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Georeference::CopyFrom(const Georeference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Georeference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Georeference::IsInitialized() const {
  return true;
}

void Georeference::InternalSwap(Georeference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &crs_, GetArenaForAllocation(),
      &other->crs_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Georeference, epsg_)
      + sizeof(Georeference::epsg_)
      - PROTOBUF_FIELD_OFFSET(Georeference, x0_)>(
          reinterpret_cast<char*>(&x0_),
          reinterpret_cast<char*>(&other->x0_));
}

std::string Georeference::GetTypeName() const {
  return "DTCC.Georeference";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DTCC::Vector2D* Arena::CreateMaybeMessage< ::DTCC::Vector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Vector3D* Arena::CreateMaybeMessage< ::DTCC::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Triangle* Arena::CreateMaybeMessage< ::DTCC::Triangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Triangle >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Tetrahedron* Arena::CreateMaybeMessage< ::DTCC::Tetrahedron >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Tetrahedron >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox2D* Arena::CreateMaybeMessage< ::DTCC::BoundingBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox3D* Arena::CreateMaybeMessage< ::DTCC::BoundingBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPoint* Arena::CreateMaybeMessage< ::DTCC::MultiPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPoint3D* Arena::CreateMaybeMessage< ::DTCC::MultiPoint3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPoint3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LineString* Arena::CreateMaybeMessage< ::DTCC::LineString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LineString >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LineString3D* Arena::CreateMaybeMessage< ::DTCC::LineString3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LineString3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LinearRing* Arena::CreateMaybeMessage< ::DTCC::LinearRing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LinearRing >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Polygon* Arena::CreateMaybeMessage< ::DTCC::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPolygon* Arena::CreateMaybeMessage< ::DTCC::MultiPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid2D* Arena::CreateMaybeMessage< ::DTCC::Grid2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid3D* Arena::CreateMaybeMessage< ::DTCC::Grid3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Mesh* Arena::CreateMaybeMessage< ::DTCC::Mesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Mesh >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::VolumeMesh* Arena::CreateMaybeMessage< ::DTCC::VolumeMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::VolumeMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField2D* Arena::CreateMaybeMessage< ::DTCC::GridField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField3D* Arena::CreateMaybeMessage< ::DTCC::GridField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField2D* Arena::CreateMaybeMessage< ::DTCC::GridVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField3D* Arena::CreateMaybeMessage< ::DTCC::GridVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshField* Arena::CreateMaybeMessage< ::DTCC::MeshField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshField >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshVectorField* Arena::CreateMaybeMessage< ::DTCC::MeshVectorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshVectorField >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::VolumeMeshField* Arena::CreateMaybeMessage< ::DTCC::VolumeMeshField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::VolumeMeshField >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::VolumeVectorField* Arena::CreateMaybeMessage< ::DTCC::VolumeVectorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::VolumeVectorField >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::PointCloud* Arena::CreateMaybeMessage< ::DTCC::PointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Building* Arena::CreateMaybeMessage< ::DTCC::Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Building >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::CityModel* Arena::CreateMaybeMessage< ::DTCC::CityModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::CityModel >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Georeference* Arena::CreateMaybeMessage< ::DTCC::Georeference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Georeference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
