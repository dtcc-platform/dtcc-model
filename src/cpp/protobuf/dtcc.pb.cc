// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#include "dtcc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace DTCC {

inline constexpr VolumeMesh::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vertices_{},
        cells_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VolumeMesh::VolumeMesh(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VolumeMeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolumeMeshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolumeMeshDefaultTypeInternal() {}
  union {
    VolumeMesh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolumeMeshDefaultTypeInternal _VolumeMesh_default_instance_;

inline constexpr Transform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : affine_{},
        srs_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;

inline constexpr Raster::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        heigh_{0u},
        width_{0u},
        dims_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Raster::Raster(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RasterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RasterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RasterDefaultTypeInternal() {}
  union {
    Raster _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RasterDefaultTypeInternal _Raster_default_instance_;

inline constexpr Quantity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        geometry_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dim_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quantity::Quantity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuantityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuantityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuantityDefaultTypeInternal() {}
  union {
    Quantity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuantityDefaultTypeInternal _Quantity_default_instance_;

inline constexpr LineString::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vertices_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LineString::LineString(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LineStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineStringDefaultTypeInternal() {}
  union {
    LineString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineStringDefaultTypeInternal _LineString_default_instance_;

inline constexpr Bounds::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : xmin_{0},
        ymin_{0},
        zmin_{0},
        xmax_{0},
        ymax_{0},
        zmax_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Bounds::Bounds(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BoundsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundsDefaultTypeInternal() {}
  union {
    Bounds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundsDefaultTypeInternal _Bounds_default_instance_;

inline constexpr VolumeGrid::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bounds_{nullptr},
        width_{0},
        height_{0},
        depth_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VolumeGrid::VolumeGrid(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VolumeGridDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolumeGridDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolumeGridDefaultTypeInternal() {}
  union {
    VolumeGrid _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolumeGridDefaultTypeInternal _VolumeGrid_default_instance_;

inline constexpr Surface::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vertices_{},
        holes_{},
        transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Surface::Surface(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SurfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceDefaultTypeInternal() {}
  union {
    Surface _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceDefaultTypeInternal _Surface_default_instance_;

inline constexpr PointCloud::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        points_{},
        classification_{},
        _classification_cached_byte_size_{0},
        intensity_{},
        _intensity_cached_byte_size_{0},
        return_number_{},
        _return_number_cached_byte_size_{0},
        num_returns_{},
        _num_returns_cached_byte_size_{0},
        bounds_{nullptr},
        transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PointCloud::PointCloud(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudDefaultTypeInternal() {}
  union {
    PointCloud _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudDefaultTypeInternal _PointCloud_default_instance_;

inline constexpr Mesh::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vertice_{},
        normals_{},
        faces_{},
        _faces_cached_byte_size_{0},
        transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Mesh::Mesh(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDefaultTypeInternal _Mesh_default_instance_;

inline constexpr Grid::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bounds_{nullptr},
        width_{0},
        height_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Grid::Grid(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GridDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridDefaultTypeInternal() {}
  union {
    Grid _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridDefaultTypeInternal _Grid_default_instance_;

inline constexpr MultiSurface::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        surfaces_{},
        transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MultiSurface::MultiSurface(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultiSurfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSurfaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSurfaceDefaultTypeInternal() {}
  union {
    MultiSurface _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSurfaceDefaultTypeInternal _MultiSurface_default_instance_;

inline constexpr Object::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        attributes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lod0_{nullptr},
        lod1_{nullptr},
        lod2_{nullptr},
        lod3_{nullptr},
        mesh_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Object::Object(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDefaultTypeInternal _Object_default_instance_;

inline constexpr Terrain::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        object_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Terrain::Terrain(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TerrainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerrainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerrainDefaultTypeInternal() {}
  union {
    Terrain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerrainDefaultTypeInternal _Terrain_default_instance_;

inline constexpr BuildingPart::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        object_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BuildingPart::BuildingPart(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BuildingPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildingPartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildingPartDefaultTypeInternal() {}
  union {
    BuildingPart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildingPartDefaultTypeInternal _BuildingPart_default_instance_;

inline constexpr Building::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        children_{},
        object_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Building::Building(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BuildingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildingDefaultTypeInternal() {}
  union {
    Building _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildingDefaultTypeInternal _Building_default_instance_;

inline constexpr City::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        buildings_{},
        terrain_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR City::City(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CityDefaultTypeInternal() {}
  union {
    City _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CityDefaultTypeInternal _City_default_instance_;
}  // namespace DTCC
namespace DTCC {
// ===================================================================

class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Object, _impl_._has_bits_);
  static const ::DTCC::MultiSurface& lod0(const Object* msg);
  static void set_has_lod0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DTCC::MultiSurface& lod1(const Object* msg);
  static void set_has_lod1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DTCC::MultiSurface& lod2(const Object* msg);
  static void set_has_lod2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::DTCC::MultiSurface& lod3(const Object* msg);
  static void set_has_lod3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DTCC::Mesh& mesh(const Object* msg);
  static void set_has_mesh(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::DTCC::MultiSurface& Object::_Internal::lod0(const Object* msg) {
  return *msg->_impl_.lod0_;
}
const ::DTCC::MultiSurface& Object::_Internal::lod1(const Object* msg) {
  return *msg->_impl_.lod1_;
}
const ::DTCC::MultiSurface& Object::_Internal::lod2(const Object* msg) {
  return *msg->_impl_.lod2_;
}
const ::DTCC::MultiSurface& Object::_Internal::lod3(const Object* msg) {
  return *msg->_impl_.lod3_;
}
const ::DTCC::Mesh& Object::_Internal::mesh(const Object* msg) {
  return *msg->_impl_.mesh_;
}
Object::Object(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Object)
}
inline PROTOBUF_NDEBUG_INLINE Object::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        attributes_(arena, from.attributes_) {}

Object::Object(
    ::google::protobuf::Arena* arena,
    const Object& from)
    : ::google::protobuf::MessageLite(arena) {
  Object* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lod0_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::MultiSurface>(arena, *from._impl_.lod0_)
                : nullptr;
  _impl_.lod1_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::DTCC::MultiSurface>(arena, *from._impl_.lod1_)
                : nullptr;
  _impl_.lod2_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::DTCC::MultiSurface>(arena, *from._impl_.lod2_)
                : nullptr;
  _impl_.lod3_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::DTCC::MultiSurface>(arena, *from._impl_.lod3_)
                : nullptr;
  _impl_.mesh_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::DTCC::Mesh>(arena, *from._impl_.mesh_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.Object)
}
inline PROTOBUF_NDEBUG_INLINE Object::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena),
        attributes_(arena) {}

inline void Object::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lod0_),
           0,
           offsetof(Impl_, mesh_) -
               offsetof(Impl_, lod0_) +
               sizeof(Impl_::mesh_));
}
Object::~Object() {
  // @@protoc_insertion_point(destructor:DTCC.Object)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Object::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.attributes_.Destroy();
  delete _impl_.lod0_;
  delete _impl_.lod1_;
  delete _impl_.lod2_;
  delete _impl_.lod3_;
  delete _impl_.mesh_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Object)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.attributes_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lod0_ != nullptr);
      _impl_.lod0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lod1_ != nullptr);
      _impl_.lod1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.lod2_ != nullptr);
      _impl_.lod2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.lod3_ != nullptr);
      _impl_.lod3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.mesh_ != nullptr);
      _impl_.mesh_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Object::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 32, 2> Object::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Object, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Object_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.id_)}},
    // string attributes = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.attributes_)}},
    // .DTCC.MultiSurface lod0 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.lod0_)}},
    // .DTCC.MultiSurface lod1 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Object, _impl_.lod1_)}},
    // .DTCC.MultiSurface lod2 = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Object, _impl_.lod2_)}},
    // .DTCC.MultiSurface lod3 = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(Object, _impl_.lod3_)}},
    // .DTCC.Mesh mesh = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 4, PROTOBUF_FIELD_OFFSET(Object, _impl_.mesh_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string attributes = 2;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .DTCC.MultiSurface lod0 = 3;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.lod0_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.MultiSurface lod1 = 4;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.lod1_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.MultiSurface lod2 = 5;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.lod2_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.MultiSurface lod3 = 6;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.lod3_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.Mesh mesh = 7;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.mesh_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::MultiSurface>()},
    {::_pbi::TcParser::GetTable<::DTCC::MultiSurface>()},
    {::_pbi::TcParser::GetTable<::DTCC::MultiSurface>()},
    {::_pbi::TcParser::GetTable<::DTCC::MultiSurface>()},
    {::_pbi::TcParser::GetTable<::DTCC::Mesh>()},
  }}, {{
    "\13\2\12\0\0\0\0\0"
    "DTCC.Object"
    "id"
    "attributes"
  }},
};

::uint8_t* Object::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Object)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Object.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string attributes = 2;
  if (!this->_internal_attributes().empty()) {
    const std::string& _s = this->_internal_attributes();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Object.attributes");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.MultiSurface lod0 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::lod0(this),
        _Internal::lod0(this).GetCachedSize(), target, stream);
  }

  // .DTCC.MultiSurface lod1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::lod1(this),
        _Internal::lod1(this).GetCachedSize(), target, stream);
  }

  // .DTCC.MultiSurface lod2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::lod2(this),
        _Internal::lod2(this).GetCachedSize(), target, stream);
  }

  // .DTCC.MultiSurface lod3 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::lod3(this),
        _Internal::lod3(this).GetCachedSize(), target, stream);
  }

  // .DTCC.Mesh mesh = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::mesh(this),
        _Internal::mesh(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Object)
  return target;
}

::size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Object)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string attributes = 2;
  if (!this->_internal_attributes().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_attributes());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .DTCC.MultiSurface lod0 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lod0_);
    }

    // .DTCC.MultiSurface lod1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lod1_);
    }

    // .DTCC.MultiSurface lod2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lod2_);
    }

    // .DTCC.MultiSurface lod3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lod3_);
    }

    // .DTCC.Mesh mesh = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mesh_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Object*>(
      &from));
}

void Object::MergeFrom(const Object& from) {
  Object* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Object)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_attributes().empty()) {
    _this->_internal_set_attributes(from._internal_attributes());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lod0()->::DTCC::MultiSurface::MergeFrom(
          from._internal_lod0());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lod1()->::DTCC::MultiSurface::MergeFrom(
          from._internal_lod1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lod2()->::DTCC::MultiSurface::MergeFrom(
          from._internal_lod2());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lod3()->::DTCC::MultiSurface::MergeFrom(
          from._internal_lod3());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_mesh()->::DTCC::Mesh::MergeFrom(
          from._internal_mesh());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Object::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Object::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Object::InternalSwap(Object* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attributes_, &other->_impl_.attributes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, _impl_.mesh_)
      + sizeof(Object::_impl_.mesh_)
      - PROTOBUF_FIELD_OFFSET(Object, _impl_.lod0_)>(
          reinterpret_cast<char*>(&_impl_.lod0_),
          reinterpret_cast<char*>(&other->_impl_.lod0_));
}

std::string Object::GetTypeName() const {
  return "DTCC.Object";
}

// ===================================================================

class Building::_Internal {
 public:
  using HasBits = decltype(std::declval<Building>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Building, _impl_._has_bits_);
  static const ::DTCC::Object& object(const Building* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Object& Building::_Internal::object(const Building* msg) {
  return *msg->_impl_.object_;
}
Building::Building(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Building)
}
inline PROTOBUF_NDEBUG_INLINE Building::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        children_{visibility, arena, from.children_} {}

Building::Building(
    ::google::protobuf::Arena* arena,
    const Building& from)
    : ::google::protobuf::MessageLite(arena) {
  Building* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.object_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Object>(arena, *from._impl_.object_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.Building)
}
inline PROTOBUF_NDEBUG_INLINE Building::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        children_{visibility, arena} {}

inline void Building::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.object_ = {};
}
Building::~Building() {
  // @@protoc_insertion_point(destructor:DTCC.Building)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Building::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.object_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Building)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Building::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Building::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Building, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Building_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .DTCC.BuildingPart children = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Building, _impl_.children_)}},
    // .DTCC.Object object = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Building, _impl_.object_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .DTCC.Object object = 1;
    {PROTOBUF_FIELD_OFFSET(Building, _impl_.object_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .DTCC.BuildingPart children = 2;
    {PROTOBUF_FIELD_OFFSET(Building, _impl_.children_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Object>()},
    {::_pbi::TcParser::GetTable<::DTCC::BuildingPart>()},
  }}, {{
  }},
};

::uint8_t* Building::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Building)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Object object = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // repeated .DTCC.BuildingPart children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Building)
  return target;
}

::size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Building)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.BuildingPart children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_internal_children()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .DTCC.Object object = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Building::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Building*>(
      &from));
}

void Building::MergeFrom(const Building& from) {
  Building* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Building)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_children()->MergeFrom(
      from._internal_children());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_object()->::DTCC::Object::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Building::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Building::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Building::InternalSwap(Building* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  swap(_impl_.object_, other->_impl_.object_);
}

std::string Building::GetTypeName() const {
  return "DTCC.Building";
}

// ===================================================================

class BuildingPart::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildingPart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BuildingPart, _impl_._has_bits_);
  static const ::DTCC::Object& object(const BuildingPart* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Object& BuildingPart::_Internal::object(const BuildingPart* msg) {
  return *msg->_impl_.object_;
}
BuildingPart::BuildingPart(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.BuildingPart)
}
inline PROTOBUF_NDEBUG_INLINE BuildingPart::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BuildingPart::BuildingPart(
    ::google::protobuf::Arena* arena,
    const BuildingPart& from)
    : ::google::protobuf::MessageLite(arena) {
  BuildingPart* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.object_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Object>(arena, *from._impl_.object_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.BuildingPart)
}
inline PROTOBUF_NDEBUG_INLINE BuildingPart::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BuildingPart::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.object_ = {};
}
BuildingPart::~BuildingPart() {
  // @@protoc_insertion_point(destructor:DTCC.BuildingPart)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void BuildingPart::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.object_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BuildingPart::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BuildingPart)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuildingPart::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BuildingPart::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BuildingPart, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BuildingPart_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .DTCC.Object object = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BuildingPart, _impl_.object_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .DTCC.Object object = 1;
    {PROTOBUF_FIELD_OFFSET(BuildingPart, _impl_.object_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Object>()},
  }}, {{
  }},
};

::uint8_t* BuildingPart::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BuildingPart)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Object object = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BuildingPart)
  return target;
}

::size_t BuildingPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BuildingPart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Object object = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void BuildingPart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuildingPart*>(
      &from));
}

void BuildingPart::MergeFrom(const BuildingPart& from) {
  BuildingPart* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BuildingPart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_object()->::DTCC::Object::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuildingPart::CopyFrom(const BuildingPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BuildingPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BuildingPart::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BuildingPart::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BuildingPart::InternalSwap(BuildingPart* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.object_, other->_impl_.object_);
}

std::string BuildingPart::GetTypeName() const {
  return "DTCC.BuildingPart";
}

// ===================================================================

class Terrain::_Internal {
 public:
  using HasBits = decltype(std::declval<Terrain>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Terrain, _impl_._has_bits_);
  static const ::DTCC::Object& object(const Terrain* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Object& Terrain::_Internal::object(const Terrain* msg) {
  return *msg->_impl_.object_;
}
Terrain::Terrain(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Terrain)
}
inline PROTOBUF_NDEBUG_INLINE Terrain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Terrain::Terrain(
    ::google::protobuf::Arena* arena,
    const Terrain& from)
    : ::google::protobuf::MessageLite(arena) {
  Terrain* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.object_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Object>(arena, *from._impl_.object_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.Terrain)
}
inline PROTOBUF_NDEBUG_INLINE Terrain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Terrain::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.object_ = {};
}
Terrain::~Terrain() {
  // @@protoc_insertion_point(destructor:DTCC.Terrain)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Terrain::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.object_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Terrain::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Terrain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Terrain::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Terrain::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Terrain, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Terrain_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .DTCC.Object object = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Terrain, _impl_.object_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .DTCC.Object object = 1;
    {PROTOBUF_FIELD_OFFSET(Terrain, _impl_.object_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Object>()},
  }}, {{
  }},
};

::uint8_t* Terrain::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Terrain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Object object = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Terrain)
  return target;
}

::size_t Terrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Terrain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Object object = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Terrain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Terrain*>(
      &from));
}

void Terrain::MergeFrom(const Terrain& from) {
  Terrain* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Terrain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_object()->::DTCC::Object::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Terrain::CopyFrom(const Terrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Terrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Terrain::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Terrain::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Terrain::InternalSwap(Terrain* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.object_, other->_impl_.object_);
}

std::string Terrain::GetTypeName() const {
  return "DTCC.Terrain";
}

// ===================================================================

class City::_Internal {
 public:
  using HasBits = decltype(std::declval<City>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(City, _impl_._has_bits_);
  static const ::DTCC::Terrain& terrain(const City* msg);
  static void set_has_terrain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Terrain& City::_Internal::terrain(const City* msg) {
  return *msg->_impl_.terrain_;
}
City::City(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.City)
}
inline PROTOBUF_NDEBUG_INLINE City::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        buildings_{visibility, arena, from.buildings_} {}

City::City(
    ::google::protobuf::Arena* arena,
    const City& from)
    : ::google::protobuf::MessageLite(arena) {
  City* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.terrain_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Terrain>(arena, *from._impl_.terrain_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.City)
}
inline PROTOBUF_NDEBUG_INLINE City::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        buildings_{visibility, arena} {}

inline void City::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.terrain_ = {};
}
City::~City() {
  // @@protoc_insertion_point(destructor:DTCC.City)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void City::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.terrain_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void City::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.City)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buildings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.terrain_ != nullptr);
    _impl_.terrain_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* City::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> City::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(City, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_City_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .DTCC.Terrain terrain = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(City, _impl_.terrain_)}},
    // repeated .DTCC.Building buildings = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(City, _impl_.buildings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .DTCC.Building buildings = 1;
    {PROTOBUF_FIELD_OFFSET(City, _impl_.buildings_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.Terrain terrain = 2;
    {PROTOBUF_FIELD_OFFSET(City, _impl_.terrain_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Building>()},
    {::_pbi::TcParser::GetTable<::DTCC::Terrain>()},
  }}, {{
  }},
};

::uint8_t* City::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.City)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildings_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildings().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Terrain terrain = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::terrain(this),
        _Internal::terrain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.City)
  return target;
}

::size_t City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.City)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->_internal_buildings()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .DTCC.Terrain terrain = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.terrain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void City::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const City*>(
      &from));
}

void City::MergeFrom(const City& from) {
  City* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.City)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buildings()->MergeFrom(
      from._internal_buildings());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_terrain()->::DTCC::Terrain::MergeFrom(
        from._internal_terrain());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool City::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* City::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void City::InternalSwap(City* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buildings_.InternalSwap(&other->_impl_.buildings_);
  swap(_impl_.terrain_, other->_impl_.terrain_);
}

std::string City::GetTypeName() const {
  return "DTCC.City";
}

// ===================================================================

class Quantity::_Internal {
 public:
};

Quantity::Quantity(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Quantity)
}
inline PROTOBUF_NDEBUG_INLINE Quantity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : values_{visibility, arena, from.values_},
        name_(arena, from.name_),
        unit_(arena, from.unit_),
        description_(arena, from.description_),
        geometry_(arena, from.geometry_),
        _cached_size_{0} {}

Quantity::Quantity(
    ::google::protobuf::Arena* arena,
    const Quantity& from)
    : ::google::protobuf::MessageLite(arena) {
  Quantity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.dim_ = from._impl_.dim_;

  // @@protoc_insertion_point(copy_constructor:DTCC.Quantity)
}
inline PROTOBUF_NDEBUG_INLINE Quantity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        name_(arena),
        unit_(arena),
        description_(arena),
        geometry_(arena),
        _cached_size_{0} {}

inline void Quantity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.dim_ = {};
}
Quantity::~Quantity() {
  // @@protoc_insertion_point(destructor:DTCC.Quantity)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Quantity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.unit_.Destroy();
  _impl_.description_.Destroy();
  _impl_.geometry_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quantity::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Quantity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.geometry_.ClearToEmpty();
  _impl_.dim_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Quantity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 49, 2> Quantity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quantity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.name_)}},
    // string unit = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.unit_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.description_)}},
    // string geometry = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.geometry_)}},
    // int32 dim = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.dim_)}},
    // repeated float values = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Quantity, _impl_.values_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string unit = 2;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string geometry = 4;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.geometry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 dim = 5;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float values = 6;
    {PROTOBUF_FIELD_OFFSET(Quantity, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
    "\15\4\4\13\10\0\0\0"
    "DTCC.Quantity"
    "name"
    "unit"
    "description"
    "geometry"
  }},
};

::uint8_t* Quantity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Quantity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Quantity.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string unit = 2;
  if (!this->_internal_unit().empty()) {
    const std::string& _s = this->_internal_unit();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Quantity.unit");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Quantity.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string geometry = 4;
  if (!this->_internal_geometry().empty()) {
    const std::string& _s = this->_internal_geometry();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Quantity.geometry");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 dim = 5;
  if (this->_internal_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_dim(), target);
  }

  // repeated float values = 6;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Quantity)
  return target;
}

::size_t Quantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Quantity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string unit = 2;
  if (!this->_internal_unit().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_unit());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string geometry = 4;
  if (!this->_internal_geometry().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_geometry());
  }

  // int32 dim = 5;
  if (this->_internal_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_dim());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Quantity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Quantity*>(
      &from));
}

void Quantity::MergeFrom(const Quantity& from) {
  Quantity* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Quantity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_geometry().empty()) {
    _this->_internal_set_geometry(from._internal_geometry());
  }
  if (from._internal_dim() != 0) {
    _this->_internal_set_dim(from._internal_dim());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Quantity::CopyFrom(const Quantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Quantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quantity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quantity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quantity::InternalSwap(Quantity* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_, &other->_impl_.unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.geometry_, &other->_impl_.geometry_, arena);
        swap(_impl_.dim_, other->_impl_.dim_);
}

std::string Quantity::GetTypeName() const {
  return "DTCC.Quantity";
}

// ===================================================================

class Bounds::_Internal {
 public:
};

Bounds::Bounds(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Bounds)
}
Bounds::Bounds(
    ::google::protobuf::Arena* arena, const Bounds& from)
    : Bounds(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Bounds::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bounds::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, xmin_),
           0,
           offsetof(Impl_, zmax_) -
               offsetof(Impl_, xmin_) +
               sizeof(Impl_::zmax_));
}
Bounds::~Bounds() {
  // @@protoc_insertion_point(destructor:DTCC.Bounds)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Bounds::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Bounds::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Bounds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.xmin_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.zmax_) -
      reinterpret_cast<char*>(&_impl_.xmin_)) + sizeof(_impl_.zmax_));
  _internal_metadata_.Clear<std::string>();
}

const char* Bounds::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Bounds::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Bounds_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float xmin = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.xmin_)}},
    // float ymin = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.ymin_)}},
    // float zmin = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.zmin_)}},
    // float xmax = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.xmax_)}},
    // float ymax = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.ymax_)}},
    // float zmax = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Bounds, _impl_.zmax_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float xmin = 1;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.xmin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ymin = 2;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.ymin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float zmin = 3;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.zmin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float xmax = 4;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.xmax_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ymax = 5;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.ymax_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float zmax = 6;
    {PROTOBUF_FIELD_OFFSET(Bounds, _impl_.zmax_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Bounds::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Bounds)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float xmin = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmin = this->_internal_xmin();
  ::uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_xmin(), target);
  }

  // float ymin = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymin = this->_internal_ymin();
  ::uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_ymin(), target);
  }

  // float zmin = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmin = this->_internal_zmin();
  ::uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_zmin(), target);
  }

  // float xmax = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmax = this->_internal_xmax();
  ::uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_xmax(), target);
  }

  // float ymax = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymax = this->_internal_ymax();
  ::uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ymax(), target);
  }

  // float zmax = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmax = this->_internal_zmax();
  ::uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_zmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Bounds)
  return target;
}

::size_t Bounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Bounds)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float xmin = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmin = this->_internal_xmin();
  ::uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    total_size += 5;
  }

  // float ymin = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymin = this->_internal_ymin();
  ::uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    total_size += 5;
  }

  // float zmin = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmin = this->_internal_zmin();
  ::uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    total_size += 5;
  }

  // float xmax = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmax = this->_internal_xmax();
  ::uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    total_size += 5;
  }

  // float ymax = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymax = this->_internal_ymax();
  ::uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    total_size += 5;
  }

  // float zmax = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmax = this->_internal_zmax();
  ::uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    total_size += 5;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Bounds::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Bounds*>(
      &from));
}

void Bounds::MergeFrom(const Bounds& from) {
  Bounds* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Bounds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmin = from._internal_xmin();
  ::uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    _this->_internal_set_xmin(from._internal_xmin());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymin = from._internal_ymin();
  ::uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    _this->_internal_set_ymin(from._internal_ymin());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmin = from._internal_zmin();
  ::uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    _this->_internal_set_zmin(from._internal_zmin());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xmax = from._internal_xmax();
  ::uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    _this->_internal_set_xmax(from._internal_xmax());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ymax = from._internal_ymax();
  ::uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    _this->_internal_set_ymax(from._internal_ymax());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zmax = from._internal_zmax();
  ::uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    _this->_internal_set_zmax(from._internal_zmax());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Bounds::CopyFrom(const Bounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Bounds::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Bounds::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Bounds::InternalSwap(Bounds* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bounds, _impl_.zmax_)
      + sizeof(Bounds::_impl_.zmax_)
      - PROTOBUF_FIELD_OFFSET(Bounds, _impl_.xmin_)>(
          reinterpret_cast<char*>(&_impl_.xmin_),
          reinterpret_cast<char*>(&other->_impl_.xmin_));
}

std::string Bounds::GetTypeName() const {
  return "DTCC.Bounds";
}

// ===================================================================

class LineString::_Internal {
 public:
};

LineString::LineString(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.LineString)
}
inline PROTOBUF_NDEBUG_INLINE LineString::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : vertices_{visibility, arena, from.vertices_},
        _cached_size_{0} {}

LineString::LineString(
    ::google::protobuf::Arena* arena,
    const LineString& from)
    : ::google::protobuf::MessageLite(arena) {
  LineString* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:DTCC.LineString)
}
inline PROTOBUF_NDEBUG_INLINE LineString::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vertices_{visibility, arena},
        _cached_size_{0} {}

inline void LineString::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LineString::~LineString() {
  // @@protoc_insertion_point(destructor:DTCC.LineString)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void LineString::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LineString::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LineString)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineString::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> LineString::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LineString_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated float vertices = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LineString, _impl_.vertices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float vertices = 1;
    {PROTOBUF_FIELD_OFFSET(LineString, _impl_.vertices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LineString::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LineString)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float vertices = 1;
  if (this->_internal_vertices_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vertices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LineString)
  return target;
}

::size_t LineString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LineString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertices = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vertices_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void LineString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LineString*>(
      &from));
}

void LineString::MergeFrom(const LineString& from) {
  LineString* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LineString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineString::CopyFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LineString::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LineString::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LineString::InternalSwap(LineString* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
}

std::string LineString::GetTypeName() const {
  return "DTCC.LineString";
}

// ===================================================================

class Surface::_Internal {
 public:
  using HasBits = decltype(std::declval<Surface>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Surface, _impl_._has_bits_);
  static const ::DTCC::Transform& transform(const Surface* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Transform& Surface::_Internal::transform(const Surface* msg) {
  return *msg->_impl_.transform_;
}
Surface::Surface(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Surface)
}
inline PROTOBUF_NDEBUG_INLINE Surface::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vertices_{visibility, arena, from.vertices_},
        holes_{visibility, arena, from.holes_} {}

Surface::Surface(
    ::google::protobuf::Arena* arena,
    const Surface& from)
    : ::google::protobuf::MessageLite(arena) {
  Surface* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Transform>(arena, *from._impl_.transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.Surface)
}
inline PROTOBUF_NDEBUG_INLINE Surface::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vertices_{visibility, arena},
        holes_{visibility, arena} {}

inline void Surface::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.transform_ = {};
}
Surface::~Surface() {
  // @@protoc_insertion_point(destructor:DTCC.Surface)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Surface::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Surface::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Surface)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.holes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Surface::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Surface::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Surface, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Surface_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float vertices = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Surface, _impl_.vertices_)}},
    // repeated .DTCC.LineString holes = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Surface, _impl_.holes_)}},
    // .DTCC.Transform transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(Surface, _impl_.transform_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float vertices = 1;
    {PROTOBUF_FIELD_OFFSET(Surface, _impl_.vertices_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated .DTCC.LineString holes = 2;
    {PROTOBUF_FIELD_OFFSET(Surface, _impl_.holes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.Transform transform = 3;
    {PROTOBUF_FIELD_OFFSET(Surface, _impl_.transform_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::LineString>()},
    {::_pbi::TcParser::GetTable<::DTCC::Transform>()},
  }}, {{
  }},
};

::uint8_t* Surface::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Surface)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float vertices = 1;
  if (this->_internal_vertices_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vertices(), target);
  }

  // repeated .DTCC.LineString holes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_holes_size()); i < n; i++) {
    const auto& repfield = this->_internal_holes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Transform transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Surface)
  return target;
}

::size_t Surface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Surface)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertices = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vertices_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .DTCC.LineString holes = 2;
  total_size += 1UL * this->_internal_holes_size();
  for (const auto& msg : this->_internal_holes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .DTCC.Transform transform = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Surface::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Surface*>(
      &from));
}

void Surface::MergeFrom(const Surface& from) {
  Surface* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Surface)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_holes()->MergeFrom(
      from._internal_holes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::DTCC::Transform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Surface::CopyFrom(const Surface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Surface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Surface::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Surface::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Surface::InternalSwap(Surface* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.holes_.InternalSwap(&other->_impl_.holes_);
  swap(_impl_.transform_, other->_impl_.transform_);
}

std::string Surface::GetTypeName() const {
  return "DTCC.Surface";
}

// ===================================================================

class MultiSurface::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiSurface>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_._has_bits_);
  static const ::DTCC::Transform& transform(const MultiSurface* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Transform& MultiSurface::_Internal::transform(const MultiSurface* msg) {
  return *msg->_impl_.transform_;
}
MultiSurface::MultiSurface(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiSurface)
}
inline PROTOBUF_NDEBUG_INLINE MultiSurface::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        surfaces_{visibility, arena, from.surfaces_} {}

MultiSurface::MultiSurface(
    ::google::protobuf::Arena* arena,
    const MultiSurface& from)
    : ::google::protobuf::MessageLite(arena) {
  MultiSurface* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Transform>(arena, *from._impl_.transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.MultiSurface)
}
inline PROTOBUF_NDEBUG_INLINE MultiSurface::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        surfaces_{visibility, arena} {}

inline void MultiSurface::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.transform_ = {};
}
MultiSurface::~MultiSurface() {
  // @@protoc_insertion_point(destructor:DTCC.MultiSurface)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void MultiSurface::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MultiSurface::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiSurface)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.surfaces_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiSurface::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MultiSurface::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultiSurface_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .DTCC.Transform transform = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_.transform_)}},
    // repeated .DTCC.Surface surfaces = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_.surfaces_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .DTCC.Surface surfaces = 1;
    {PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_.surfaces_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.Transform transform = 2;
    {PROTOBUF_FIELD_OFFSET(MultiSurface, _impl_.transform_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Surface>()},
    {::_pbi::TcParser::GetTable<::DTCC::Transform>()},
  }}, {{
  }},
};

::uint8_t* MultiSurface::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiSurface)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .DTCC.Surface surfaces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_surfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_surfaces().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Transform transform = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiSurface)
  return target;
}

::size_t MultiSurface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiSurface)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Surface surfaces = 1;
  total_size += 1UL * this->_internal_surfaces_size();
  for (const auto& msg : this->_internal_surfaces()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .DTCC.Transform transform = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void MultiSurface::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiSurface*>(
      &from));
}

void MultiSurface::MergeFrom(const MultiSurface& from) {
  MultiSurface* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiSurface)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_surfaces()->MergeFrom(
      from._internal_surfaces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::DTCC::Transform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiSurface::CopyFrom(const MultiSurface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiSurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MultiSurface::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MultiSurface::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MultiSurface::InternalSwap(MultiSurface* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.surfaces_.InternalSwap(&other->_impl_.surfaces_);
  swap(_impl_.transform_, other->_impl_.transform_);
}

std::string MultiSurface::GetTypeName() const {
  return "DTCC.MultiSurface";
}

// ===================================================================

class Mesh::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Mesh, _impl_._has_bits_);
  static const ::DTCC::Transform& transform(const Mesh* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Transform& Mesh::_Internal::transform(const Mesh* msg) {
  return *msg->_impl_.transform_;
}
Mesh::Mesh(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh)
}
inline PROTOBUF_NDEBUG_INLINE Mesh::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vertice_{visibility, arena, from.vertice_},
        normals_{visibility, arena, from.normals_},
        faces_{visibility, arena, from.faces_},
        _faces_cached_byte_size_{0} {}

Mesh::Mesh(
    ::google::protobuf::Arena* arena,
    const Mesh& from)
    : ::google::protobuf::MessageLite(arena) {
  Mesh* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Transform>(arena, *from._impl_.transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh)
}
inline PROTOBUF_NDEBUG_INLINE Mesh::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vertice_{visibility, arena},
        normals_{visibility, arena},
        faces_{visibility, arena},
        _faces_cached_byte_size_{0} {}

inline void Mesh::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.transform_ = {};
}
Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Mesh::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertice_.Clear();
  _impl_.normals_.Clear();
  _impl_.faces_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Mesh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Mesh::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Mesh, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Mesh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .DTCC.Transform transform = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.transform_)}},
    // repeated float vertice = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.vertice_)}},
    // repeated float normals = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.normals_)}},
    // repeated uint32 faces = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.faces_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float vertice = 1;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.vertice_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float normals = 2;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.normals_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated uint32 faces = 3;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.faces_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // .DTCC.Transform transform = 4;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Transform>()},
  }}, {{
  }},
};

::uint8_t* Mesh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float vertice = 1;
  if (this->_internal_vertice_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vertice(), target);
  }

  // repeated float normals = 2;
  if (this->_internal_normals_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_normals(), target);
  }

  // repeated uint32 faces = 3;
  {
    int byte_size = _impl_._faces_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_faces(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Transform transform = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh)
  return target;
}

::size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertice = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vertice_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float normals = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_normals_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 faces = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_faces())
    ;
    _impl_._faces_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .DTCC.Transform transform = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Mesh::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Mesh*>(
      &from));
}

void Mesh::MergeFrom(const Mesh& from) {
  Mesh* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertice()->MergeFrom(from._internal_vertice());
  _this->_internal_mutable_normals()->MergeFrom(from._internal_normals());
  _this->_internal_mutable_faces()->MergeFrom(from._internal_faces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::DTCC::Transform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Mesh::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Mesh::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Mesh::InternalSwap(Mesh* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vertice_.InternalSwap(&other->_impl_.vertice_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
  swap(_impl_.transform_, other->_impl_.transform_);
}

std::string Mesh::GetTypeName() const {
  return "DTCC.Mesh";
}

// ===================================================================

class VolumeMesh::_Internal {
 public:
};

VolumeMesh::VolumeMesh(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.VolumeMesh)
}
inline PROTOBUF_NDEBUG_INLINE VolumeMesh::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : vertices_{visibility, arena, from.vertices_},
        cells_{visibility, arena, from.cells_},
        _cached_size_{0} {}

VolumeMesh::VolumeMesh(
    ::google::protobuf::Arena* arena,
    const VolumeMesh& from)
    : ::google::protobuf::MessageLite(arena) {
  VolumeMesh* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:DTCC.VolumeMesh)
}
inline PROTOBUF_NDEBUG_INLINE VolumeMesh::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vertices_{visibility, arena},
        cells_{visibility, arena},
        _cached_size_{0} {}

inline void VolumeMesh::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VolumeMesh::~VolumeMesh() {
  // @@protoc_insertion_point(destructor:DTCC.VolumeMesh)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VolumeMesh::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VolumeMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.VolumeMesh)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.cells_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VolumeMesh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VolumeMesh::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VolumeMesh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated float cells = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VolumeMesh, _impl_.cells_)}},
    // repeated float vertices = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VolumeMesh, _impl_.vertices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float vertices = 1;
    {PROTOBUF_FIELD_OFFSET(VolumeMesh, _impl_.vertices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float cells = 2;
    {PROTOBUF_FIELD_OFFSET(VolumeMesh, _impl_.cells_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VolumeMesh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.VolumeMesh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float vertices = 1;
  if (this->_internal_vertices_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vertices(), target);
  }

  // repeated float cells = 2;
  if (this->_internal_cells_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.VolumeMesh)
  return target;
}

::size_t VolumeMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.VolumeMesh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertices = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vertices_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float cells = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_cells_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VolumeMesh::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VolumeMesh*>(
      &from));
}

void VolumeMesh::MergeFrom(const VolumeMesh& from) {
  VolumeMesh* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.VolumeMesh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_cells()->MergeFrom(from._internal_cells());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VolumeMesh::CopyFrom(const VolumeMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.VolumeMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VolumeMesh::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VolumeMesh::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VolumeMesh::InternalSwap(VolumeMesh* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
}

std::string VolumeMesh::GetTypeName() const {
  return "DTCC.VolumeMesh";
}

// ===================================================================

class PointCloud::_Internal {
 public:
  using HasBits = decltype(std::declval<PointCloud>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PointCloud, _impl_._has_bits_);
  static const ::DTCC::Bounds& bounds(const PointCloud* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DTCC::Transform& transform(const PointCloud* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::DTCC::Bounds& PointCloud::_Internal::bounds(const PointCloud* msg) {
  return *msg->_impl_.bounds_;
}
const ::DTCC::Transform& PointCloud::_Internal::transform(const PointCloud* msg) {
  return *msg->_impl_.transform_;
}
PointCloud::PointCloud(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.PointCloud)
}
inline PROTOBUF_NDEBUG_INLINE PointCloud::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        points_{visibility, arena, from.points_},
        classification_{visibility, arena, from.classification_},
        _classification_cached_byte_size_{0},
        intensity_{visibility, arena, from.intensity_},
        _intensity_cached_byte_size_{0},
        return_number_{visibility, arena, from.return_number_},
        _return_number_cached_byte_size_{0},
        num_returns_{visibility, arena, from.num_returns_},
        _num_returns_cached_byte_size_{0} {}

PointCloud::PointCloud(
    ::google::protobuf::Arena* arena,
    const PointCloud& from)
    : ::google::protobuf::MessageLite(arena) {
  PointCloud* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Bounds>(arena, *from._impl_.bounds_)
                : nullptr;
  _impl_.transform_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::DTCC::Transform>(arena, *from._impl_.transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:DTCC.PointCloud)
}
inline PROTOBUF_NDEBUG_INLINE PointCloud::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        points_{visibility, arena},
        classification_{visibility, arena},
        _classification_cached_byte_size_{0},
        intensity_{visibility, arena},
        _intensity_cached_byte_size_{0},
        return_number_{visibility, arena},
        _return_number_cached_byte_size_{0},
        num_returns_{visibility, arena},
        _num_returns_cached_byte_size_{0} {}

inline void PointCloud::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, transform_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::transform_));
}
PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:DTCC.PointCloud)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PointCloud::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.bounds_;
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.PointCloud)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.classification_.Clear();
  _impl_.intensity_.Clear();
  _impl_.return_number_.Clear();
  _impl_.num_returns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.bounds_ != nullptr);
      _impl_.bounds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PointCloud::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> PointCloud::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PointCloud, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PointCloud_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.points_)}},
    // repeated uint32 classification = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.classification_)}},
    // repeated uint32 intensity = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.intensity_)}},
    // repeated uint32 return_number = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.return_number_)}},
    // repeated uint32 num_returns = 5;
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.num_returns_)}},
    // .DTCC.Bounds bounds = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.bounds_)}},
    // .DTCC.Transform transform = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.transform_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.points_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated uint32 classification = 2;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.classification_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 intensity = 3;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.intensity_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 return_number = 4;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.return_number_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 num_returns = 5;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.num_returns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // .DTCC.Bounds bounds = 6;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DTCC.Transform transform = 7;
    {PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.transform_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Bounds>()},
    {::_pbi::TcParser::GetTable<::DTCC::Transform>()},
  }}, {{
  }},
};

::uint8_t* PointCloud::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.PointCloud)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  // repeated uint32 classification = 2;
  {
    int byte_size = _impl_._classification_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_classification(), byte_size, target);
    }
  }

  // repeated uint32 intensity = 3;
  {
    int byte_size = _impl_._intensity_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_intensity(), byte_size, target);
    }
  }

  // repeated uint32 return_number = 4;
  {
    int byte_size = _impl_._return_number_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_return_number(), byte_size, target);
    }
  }

  // repeated uint32 num_returns = 5;
  {
    int byte_size = _impl_._num_returns_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_num_returns(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Bounds bounds = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // .DTCC.Transform transform = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.PointCloud)
  return target;
}

::size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.PointCloud)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_points_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 classification = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_classification())
    ;
    _impl_._classification_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 intensity = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_intensity())
    ;
    _impl_._intensity_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 return_number = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_return_number())
    ;
    _impl_._return_number_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 num_returns = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_num_returns())
    ;
    _impl_._num_returns_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .DTCC.Bounds bounds = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bounds_);
    }

    // .DTCC.Transform transform = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PointCloud::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PointCloud*>(
      &from));
}

void PointCloud::MergeFrom(const PointCloud& from) {
  PointCloud* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.PointCloud)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_mutable_classification()->MergeFrom(from._internal_classification());
  _this->_internal_mutable_intensity()->MergeFrom(from._internal_intensity());
  _this->_internal_mutable_return_number()->MergeFrom(from._internal_return_number());
  _this->_internal_mutable_num_returns()->MergeFrom(from._internal_num_returns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_bounds()->::DTCC::Bounds::MergeFrom(
          from._internal_bounds());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transform()->::DTCC::Transform::MergeFrom(
          from._internal_transform());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PointCloud::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PointCloud::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PointCloud::InternalSwap(PointCloud* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.classification_.InternalSwap(&other->_impl_.classification_);
  _impl_.intensity_.InternalSwap(&other->_impl_.intensity_);
  _impl_.return_number_.InternalSwap(&other->_impl_.return_number_);
  _impl_.num_returns_.InternalSwap(&other->_impl_.num_returns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.transform_)
      + sizeof(PointCloud::_impl_.transform_)
      - PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

std::string PointCloud::GetTypeName() const {
  return "DTCC.PointCloud";
}

// ===================================================================

class Grid::_Internal {
 public:
  using HasBits = decltype(std::declval<Grid>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Grid, _impl_._has_bits_);
  static const ::DTCC::Bounds& bounds(const Grid* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Bounds& Grid::_Internal::bounds(const Grid* msg) {
  return *msg->_impl_.bounds_;
}
Grid::Grid(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid)
}
inline PROTOBUF_NDEBUG_INLINE Grid::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Grid::Grid(
    ::google::protobuf::Arena* arena,
    const Grid& from)
    : ::google::protobuf::MessageLite(arena) {
  Grid* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Bounds>(arena, *from._impl_.bounds_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:DTCC.Grid)
}
inline PROTOBUF_NDEBUG_INLINE Grid::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Grid::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::height_));
}
Grid::~Grid() {
  // @@protoc_insertion_point(destructor:DTCC.Grid)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Grid::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.bounds_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Grid::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bounds_ != nullptr);
    _impl_.bounds_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Grid::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Grid::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Grid, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Grid_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .DTCC.Bounds bounds = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Grid, _impl_.bounds_)}},
    // int32 width = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Grid, _impl_.width_)}},
    // int32 height = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Grid, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .DTCC.Bounds bounds = 1;
    {PROTOBUF_FIELD_OFFSET(Grid, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 width = 2;
    {PROTOBUF_FIELD_OFFSET(Grid, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 3;
    {PROTOBUF_FIELD_OFFSET(Grid, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Bounds>()},
  }}, {{
  }},
};

::uint8_t* Grid::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Bounds bounds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid)
  return target;
}

::size_t Grid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Bounds bounds = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bounds_);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Grid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Grid*>(
      &from));
}

void Grid::MergeFrom(const Grid& from) {
  Grid* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bounds()->::DTCC::Bounds::MergeFrom(
        from._internal_bounds());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Grid::CopyFrom(const Grid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Grid::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Grid::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Grid::InternalSwap(Grid* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid, _impl_.height_)
      + sizeof(Grid::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Grid, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

std::string Grid::GetTypeName() const {
  return "DTCC.Grid";
}

// ===================================================================

class VolumeGrid::_Internal {
 public:
  using HasBits = decltype(std::declval<VolumeGrid>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_._has_bits_);
  static const ::DTCC::Bounds& bounds(const VolumeGrid* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DTCC::Bounds& VolumeGrid::_Internal::bounds(const VolumeGrid* msg) {
  return *msg->_impl_.bounds_;
}
VolumeGrid::VolumeGrid(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.VolumeGrid)
}
inline PROTOBUF_NDEBUG_INLINE VolumeGrid::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VolumeGrid::VolumeGrid(
    ::google::protobuf::Arena* arena,
    const VolumeGrid& from)
    : ::google::protobuf::MessageLite(arena) {
  VolumeGrid* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DTCC::Bounds>(arena, *from._impl_.bounds_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, depth_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::depth_));

  // @@protoc_insertion_point(copy_constructor:DTCC.VolumeGrid)
}
inline PROTOBUF_NDEBUG_INLINE VolumeGrid::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VolumeGrid::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, depth_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::depth_));
}
VolumeGrid::~VolumeGrid() {
  // @@protoc_insertion_point(destructor:DTCC.VolumeGrid)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VolumeGrid::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.bounds_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VolumeGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.VolumeGrid)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bounds_ != nullptr);
    _impl_.bounds_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.depth_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.depth_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VolumeGrid::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> VolumeGrid::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VolumeGrid_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // int32 depth = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.depth_)}},
    // .DTCC.Bounds bounds = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.bounds_)}},
    // int32 width = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.width_)}},
    // int32 height = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .DTCC.Bounds bounds = 1;
    {PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 width = 2;
    {PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 3;
    {PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 depth = 4;
    {PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.depth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DTCC::Bounds>()},
  }}, {{
  }},
};

::uint8_t* VolumeGrid::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.VolumeGrid)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DTCC.Bounds bounds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_height(), target);
  }

  // int32 depth = 4;
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.VolumeGrid)
  return target;
}

::size_t VolumeGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.VolumeGrid)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Bounds bounds = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bounds_);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  // int32 depth = 4;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VolumeGrid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VolumeGrid*>(
      &from));
}

void VolumeGrid::MergeFrom(const VolumeGrid& from) {
  VolumeGrid* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.VolumeGrid)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bounds()->::DTCC::Bounds::MergeFrom(
        from._internal_bounds());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VolumeGrid::CopyFrom(const VolumeGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.VolumeGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VolumeGrid::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VolumeGrid::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VolumeGrid::InternalSwap(VolumeGrid* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.depth_)
      + sizeof(VolumeGrid::_impl_.depth_)
      - PROTOBUF_FIELD_OFFSET(VolumeGrid, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

std::string VolumeGrid::GetTypeName() const {
  return "DTCC.VolumeGrid";
}

// ===================================================================

class Raster::_Internal {
 public:
};

Raster::Raster(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Raster)
}
inline PROTOBUF_NDEBUG_INLINE Raster::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

Raster::Raster(
    ::google::protobuf::Arena* arena,
    const Raster& from)
    : ::google::protobuf::MessageLite(arena) {
  Raster* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, heigh_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, heigh_),
           offsetof(Impl_, dims_) -
               offsetof(Impl_, heigh_) +
               sizeof(Impl_::dims_));

  // @@protoc_insertion_point(copy_constructor:DTCC.Raster)
}
inline PROTOBUF_NDEBUG_INLINE Raster::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void Raster::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, heigh_),
           0,
           offsetof(Impl_, dims_) -
               offsetof(Impl_, heigh_) +
               sizeof(Impl_::dims_));
}
Raster::~Raster() {
  // @@protoc_insertion_point(destructor:DTCC.Raster)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Raster::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Raster::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Raster)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  ::memset(&_impl_.heigh_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dims_) -
      reinterpret_cast<char*>(&_impl_.heigh_)) + sizeof(_impl_.dims_));
  _internal_metadata_.Clear<std::string>();
}

const char* Raster::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Raster::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Raster_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 dims = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Raster, _impl_.dims_)}},
    // repeated float data = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Raster, _impl_.data_)}},
    // uint32 heigh = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Raster, _impl_.heigh_)}},
    // uint32 width = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Raster, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float data = 1;
    {PROTOBUF_FIELD_OFFSET(Raster, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // uint32 heigh = 2;
    {PROTOBUF_FIELD_OFFSET(Raster, _impl_.heigh_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 width = 3;
    {PROTOBUF_FIELD_OFFSET(Raster, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 dims = 4;
    {PROTOBUF_FIELD_OFFSET(Raster, _impl_.dims_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Raster::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Raster)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // uint32 heigh = 2;
  if (this->_internal_heigh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_heigh(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_width(), target);
  }

  // uint32 dims = 4;
  if (this->_internal_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_dims(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Raster)
  return target;
}

::size_t Raster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Raster)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_data_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // uint32 heigh = 2;
  if (this->_internal_heigh() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_heigh());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 dims = 4;
  if (this->_internal_dims() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_dims());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Raster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Raster*>(
      &from));
}

void Raster::MergeFrom(const Raster& from) {
  Raster* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Raster)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (from._internal_heigh() != 0) {
    _this->_internal_set_heigh(from._internal_heigh());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_dims() != 0) {
    _this->_internal_set_dims(from._internal_dims());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Raster::CopyFrom(const Raster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Raster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Raster::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Raster::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Raster::InternalSwap(Raster* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Raster, _impl_.dims_)
      + sizeof(Raster::_impl_.dims_)
      - PROTOBUF_FIELD_OFFSET(Raster, _impl_.heigh_)>(
          reinterpret_cast<char*>(&_impl_.heigh_),
          reinterpret_cast<char*>(&other->_impl_.heigh_));
}

std::string Raster::GetTypeName() const {
  return "DTCC.Raster";
}

// ===================================================================

class Transform::_Internal {
 public:
};

Transform::Transform(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : affine_{visibility, arena, from.affine_},
        srs_(arena, from.srs_),
        _cached_size_{0} {}

Transform::Transform(
    ::google::protobuf::Arena* arena,
    const Transform& from)
    : ::google::protobuf::MessageLite(arena) {
  Transform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:DTCC.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : affine_{visibility, arena},
        srs_(arena),
        _cached_size_{0} {}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Transform::~Transform() {
  // @@protoc_insertion_point(destructor:DTCC.Transform)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.srs_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Transform)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affine_.Clear();
  _impl_.srs_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Transform::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 26, 2> Transform::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Transform_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated float affine = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.affine_)}},
    // string srs = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.srs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string srs = 1;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.srs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated float affine = 2;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.affine_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
    "\16\3\0\0\0\0\0\0"
    "DTCC.Transform"
    "srs"
  }},
};

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Transform)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string srs = 1;
  if (!this->_internal_srs().empty()) {
    const std::string& _s = this->_internal_srs();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DTCC.Transform.srs");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated float affine = 2;
  if (this->_internal_affine_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_affine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float affine = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_affine_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string srs = 1;
  if (!this->_internal_srs().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_srs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Transform::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transform*>(
      &from));
}

void Transform::MergeFrom(const Transform& from) {
  Transform* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_affine()->MergeFrom(from._internal_affine());
  if (!from._internal_srs().empty()) {
    _this->_internal_set_srs(from._internal_srs());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transform::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Transform::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Transform::InternalSwap(Transform* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affine_.InternalSwap(&other->_impl_.affine_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srs_, &other->_impl_.srs_, arena);
}

std::string Transform::GetTypeName() const {
  return "DTCC.Transform";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DTCC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
