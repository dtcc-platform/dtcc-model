// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#include "dtcc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DTCC {
PROTOBUF_CONSTEXPR Vector2D::Vector2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2DDefaultTypeInternal() {}
  union {
    Vector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2DDefaultTypeInternal _Vector2D_default_instance_;
PROTOBUF_CONSTEXPR Vector3D::Vector3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DDefaultTypeInternal _Vector3D_default_instance_;
PROTOBUF_CONSTEXPR Simplex1D::Simplex1D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v0_)*/0
  , /*decltype(_impl_.v1_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Simplex1DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Simplex1DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Simplex1DDefaultTypeInternal() {}
  union {
    Simplex1D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Simplex1DDefaultTypeInternal _Simplex1D_default_instance_;
PROTOBUF_CONSTEXPR Simplex2D::Simplex2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v0_)*/0
  , /*decltype(_impl_.v1_)*/0
  , /*decltype(_impl_.v2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Simplex2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Simplex2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Simplex2DDefaultTypeInternal() {}
  union {
    Simplex2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Simplex2DDefaultTypeInternal _Simplex2D_default_instance_;
PROTOBUF_CONSTEXPR Simplex3D::Simplex3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v0_)*/0
  , /*decltype(_impl_.v1_)*/0
  , /*decltype(_impl_.v2_)*/0
  , /*decltype(_impl_.v3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Simplex3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Simplex3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Simplex3DDefaultTypeInternal() {}
  union {
    Simplex3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Simplex3DDefaultTypeInternal _Simplex3D_default_instance_;
PROTOBUF_CONSTEXPR BoundingBox2D::BoundingBox2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundingBox2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundingBox2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundingBox2DDefaultTypeInternal() {}
  union {
    BoundingBox2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
PROTOBUF_CONSTEXPR BoundingBox3D::BoundingBox3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundingBox3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundingBox3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundingBox3DDefaultTypeInternal() {}
  union {
    BoundingBox3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
PROTOBUF_CONSTEXPR MultiPoint::MultiPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPointDefaultTypeInternal() {}
  union {
    MultiPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPointDefaultTypeInternal _MultiPoint_default_instance_;
PROTOBUF_CONSTEXPR MultiPoint3D::MultiPoint3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPoint3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPoint3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPoint3DDefaultTypeInternal() {}
  union {
    MultiPoint3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPoint3DDefaultTypeInternal _MultiPoint3D_default_instance_;
PROTOBUF_CONSTEXPR LineString::LineString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineStringDefaultTypeInternal() {}
  union {
    LineString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineStringDefaultTypeInternal _LineString_default_instance_;
PROTOBUF_CONSTEXPR LineString3D::LineString3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineString3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineString3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineString3DDefaultTypeInternal() {}
  union {
    LineString3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineString3DDefaultTypeInternal _LineString3D_default_instance_;
PROTOBUF_CONSTEXPR LinearRing::LinearRing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinearRingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearRingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearRingDefaultTypeInternal() {}
  union {
    LinearRing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearRingDefaultTypeInternal _LinearRing_default_instance_;
PROTOBUF_CONSTEXPR Polygon::Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.holes_)*/{}
  , /*decltype(_impl_.shell_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolygonDefaultTypeInternal _Polygon_default_instance_;
PROTOBUF_CONSTEXPR MultiPolygon::MultiPolygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.polygons_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPolygonDefaultTypeInternal() {}
  union {
    MultiPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPolygonDefaultTypeInternal _MultiPolygon_default_instance_;
PROTOBUF_CONSTEXPR Grid2D::Grid2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.boundingbox_)*/nullptr
  , /*decltype(_impl_.xsize_)*/0
  , /*decltype(_impl_.ysize_)*/0
  , /*decltype(_impl_.xstep_)*/0
  , /*decltype(_impl_.ystep_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Grid2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Grid2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Grid2DDefaultTypeInternal() {}
  union {
    Grid2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Grid2DDefaultTypeInternal _Grid2D_default_instance_;
PROTOBUF_CONSTEXPR Grid3D::Grid3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.boundingbox_)*/nullptr
  , /*decltype(_impl_.xsize_)*/0
  , /*decltype(_impl_.ysize_)*/0
  , /*decltype(_impl_.zsize_)*/0
  , /*decltype(_impl_.xstep_)*/0
  , /*decltype(_impl_.ystep_)*/0
  , /*decltype(_impl_.zstep_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Grid3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Grid3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Grid3DDefaultTypeInternal() {}
  union {
    Grid3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Grid3DDefaultTypeInternal _Grid3D_default_instance_;
PROTOBUF_CONSTEXPR Mesh2D::Mesh2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.markers_)*/{}
  , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mesh2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mesh2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mesh2DDefaultTypeInternal() {}
  union {
    Mesh2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mesh2DDefaultTypeInternal _Mesh2D_default_instance_;
PROTOBUF_CONSTEXPR Mesh3D::Mesh3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.markers_)*/{}
  , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mesh3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mesh3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mesh3DDefaultTypeInternal() {}
  union {
    Mesh3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mesh3DDefaultTypeInternal _Mesh3D_default_instance_;
PROTOBUF_CONSTEXPR Surface2D::Surface2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.normals_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Surface2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Surface2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Surface2DDefaultTypeInternal() {}
  union {
    Surface2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Surface2DDefaultTypeInternal _Surface2D_default_instance_;
PROTOBUF_CONSTEXPR Surface3D::Surface3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.normals_)*/{}
  , /*decltype(_impl_.faces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Surface3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Surface3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Surface3DDefaultTypeInternal() {}
  union {
    Surface3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Surface3DDefaultTypeInternal _Surface3D_default_instance_;
PROTOBUF_CONSTEXPR GridField2D::GridField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GridField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridField2DDefaultTypeInternal() {}
  union {
    GridField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridField2DDefaultTypeInternal _GridField2D_default_instance_;
PROTOBUF_CONSTEXPR GridField3D::GridField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GridField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridField3DDefaultTypeInternal() {}
  union {
    GridField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridField3DDefaultTypeInternal _GridField3D_default_instance_;
PROTOBUF_CONSTEXPR GridVectorField2D::GridVectorField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GridVectorField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridVectorField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridVectorField2DDefaultTypeInternal() {}
  union {
    GridVectorField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridVectorField2DDefaultTypeInternal _GridVectorField2D_default_instance_;
PROTOBUF_CONSTEXPR GridVectorField3D::GridVectorField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GridVectorField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridVectorField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridVectorField3DDefaultTypeInternal() {}
  union {
    GridVectorField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridVectorField3DDefaultTypeInternal _GridVectorField3D_default_instance_;
PROTOBUF_CONSTEXPR MeshField2D::MeshField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.mesh_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshField2DDefaultTypeInternal() {}
  union {
    MeshField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshField2DDefaultTypeInternal _MeshField2D_default_instance_;
PROTOBUF_CONSTEXPR MeshField3D::MeshField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.mesh_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshField3DDefaultTypeInternal() {}
  union {
    MeshField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshField3DDefaultTypeInternal _MeshField3D_default_instance_;
PROTOBUF_CONSTEXPR MeshVectorField2D::MeshVectorField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.mesh_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshVectorField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshVectorField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshVectorField2DDefaultTypeInternal() {}
  union {
    MeshVectorField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshVectorField2DDefaultTypeInternal _MeshVectorField2D_default_instance_;
PROTOBUF_CONSTEXPR MeshVectorField3D::MeshVectorField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.mesh_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshVectorField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshVectorField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshVectorField3DDefaultTypeInternal() {}
  union {
    MeshVectorField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshVectorField3DDefaultTypeInternal _MeshVectorField3D_default_instance_;
PROTOBUF_CONSTEXPR SurfaceField2D::SurfaceField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.surface_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SurfaceField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceField2DDefaultTypeInternal() {}
  union {
    SurfaceField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceField2DDefaultTypeInternal _SurfaceField2D_default_instance_;
PROTOBUF_CONSTEXPR SurfaceField3D::SurfaceField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.surface_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SurfaceField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceField3DDefaultTypeInternal() {}
  union {
    SurfaceField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceField3DDefaultTypeInternal _SurfaceField3D_default_instance_;
PROTOBUF_CONSTEXPR SurfaceVectorField2D::SurfaceVectorField2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.surface_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SurfaceVectorField2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceVectorField2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceVectorField2DDefaultTypeInternal() {}
  union {
    SurfaceVectorField2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceVectorField2DDefaultTypeInternal _SurfaceVectorField2D_default_instance_;
PROTOBUF_CONSTEXPR SurfaceVectorField3D::SurfaceVectorField3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.surface_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SurfaceVectorField3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceVectorField3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceVectorField3DDefaultTypeInternal() {}
  union {
    SurfaceVectorField3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceVectorField3DDefaultTypeInternal _SurfaceVectorField3D_default_instance_;
PROTOBUF_CONSTEXPR PointCloud::PointCloud(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.classification_)*/{}
  , /*decltype(_impl_._classification_cached_byte_size_)*/{0}
  , /*decltype(_impl_.intensity_)*/{}
  , /*decltype(_impl_._intensity_cached_byte_size_)*/{0}
  , /*decltype(_impl_.returnnumber_)*/{}
  , /*decltype(_impl_._returnnumber_cached_byte_size_)*/{0}
  , /*decltype(_impl_.numreturns_)*/{}
  , /*decltype(_impl_._numreturns_cached_byte_size_)*/{0}
  , /*decltype(_impl_.usedclassifications_)*/{}
  , /*decltype(_impl_._usedclassifications_cached_byte_size_)*/{0}
  , /*decltype(_impl_.bounds_)*/nullptr
  , /*decltype(_impl_.georeference_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudDefaultTypeInternal() {}
  union {
    PointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudDefaultTypeInternal _PointCloud_default_instance_;
PROTOBUF_CONSTEXPR Building::Building(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footprint_)*/nullptr
  , /*decltype(_impl_.roofpoints_)*/nullptr
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.groundheight_)*/0
  , /*decltype(_impl_.error_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildingDefaultTypeInternal() {}
  union {
    Building _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildingDefaultTypeInternal _Building_default_instance_;
PROTOBUF_CONSTEXPR CityModel::CityModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buildings_)*/{}
  , /*decltype(_impl_.bounds_)*/nullptr
  , /*decltype(_impl_.georeference_)*/nullptr
  , /*decltype(_impl_.terrain_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CityModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CityModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CityModelDefaultTypeInternal() {}
  union {
    CityModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CityModelDefaultTypeInternal _CityModel_default_instance_;
PROTOBUF_CONSTEXPR Georeference::Georeference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x0_)*/0
  , /*decltype(_impl_.y0_)*/0
  , /*decltype(_impl_.epsg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoreferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoreferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoreferenceDefaultTypeInternal() {}
  union {
    Georeference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoreferenceDefaultTypeInternal _Georeference_default_instance_;
}  // namespace DTCC
namespace DTCC {

// ===================================================================

class Vector2D::_Internal {
 public:
};

Vector2D::Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector2D)
}
Vector2D::Vector2D(const Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vector2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector2D)
}

inline void Vector2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2D::~Vector2D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

const char* Vector2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector2D)
  return target;
}

size_t Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vector2D*>(
      &from));
}

void Vector2D::MergeFrom(const Vector2D& from) {
  Vector2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vector2D::CopyFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2D::IsInitialized() const {
  return true;
}

void Vector2D::InternalSwap(Vector2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2D, _impl_.y_)
      + sizeof(Vector2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Vector2D::GetTypeName() const {
  return "DTCC.Vector2D";
}


// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vector3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector3D)
}

inline void Vector3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<std::string>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vector3D*>(
      &from));
}

void Vector3D::MergeFrom(const Vector3D& from) {
  Vector3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.z_)
      + sizeof(Vector3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Vector3D::GetTypeName() const {
  return "DTCC.Vector3D";
}


// ===================================================================

class Simplex1D::_Internal {
 public:
};

Simplex1D::Simplex1D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex1D)
}
Simplex1D::Simplex1D(const Simplex1D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Simplex1D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){}
    , decltype(_impl_.v1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.v0_, &from._impl_.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v1_) -
    reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v1_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex1D)
}

inline void Simplex1D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){0}
    , decltype(_impl_.v1_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Simplex1D::~Simplex1D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex1D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Simplex1D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Simplex1D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Simplex1D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex1D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v1_) -
      reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v1_));
  _internal_metadata_.Clear<std::string>();
}

const char* Simplex1D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Simplex1D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex1D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex1D)
  return target;
}

size_t Simplex1D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex1D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex1D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Simplex1D*>(
      &from));
}

void Simplex1D::MergeFrom(const Simplex1D& from) {
  Simplex1D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex1D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v0() != 0) {
    _this->_internal_set_v0(from._internal_v0());
  }
  if (from._internal_v1() != 0) {
    _this->_internal_set_v1(from._internal_v1());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Simplex1D::CopyFrom(const Simplex1D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex1D::IsInitialized() const {
  return true;
}

void Simplex1D::InternalSwap(Simplex1D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex1D, _impl_.v1_)
      + sizeof(Simplex1D::_impl_.v1_)
      - PROTOBUF_FIELD_OFFSET(Simplex1D, _impl_.v0_)>(
          reinterpret_cast<char*>(&_impl_.v0_),
          reinterpret_cast<char*>(&other->_impl_.v0_));
}

std::string Simplex1D::GetTypeName() const {
  return "DTCC.Simplex1D";
}


// ===================================================================

class Simplex2D::_Internal {
 public:
};

Simplex2D::Simplex2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex2D)
}
Simplex2D::Simplex2D(const Simplex2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Simplex2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){}
    , decltype(_impl_.v1_){}
    , decltype(_impl_.v2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.v0_, &from._impl_.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v2_) -
    reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v2_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex2D)
}

inline void Simplex2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){0}
    , decltype(_impl_.v1_){0}
    , decltype(_impl_.v2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Simplex2D::~Simplex2D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Simplex2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Simplex2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Simplex2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v2_) -
      reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v2_));
  _internal_metadata_.Clear<std::string>();
}

const char* Simplex2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Simplex2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex2D)
  return target;
}

size_t Simplex2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Simplex2D*>(
      &from));
}

void Simplex2D::MergeFrom(const Simplex2D& from) {
  Simplex2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v0() != 0) {
    _this->_internal_set_v0(from._internal_v0());
  }
  if (from._internal_v1() != 0) {
    _this->_internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _this->_internal_set_v2(from._internal_v2());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Simplex2D::CopyFrom(const Simplex2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex2D::IsInitialized() const {
  return true;
}

void Simplex2D::InternalSwap(Simplex2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex2D, _impl_.v2_)
      + sizeof(Simplex2D::_impl_.v2_)
      - PROTOBUF_FIELD_OFFSET(Simplex2D, _impl_.v0_)>(
          reinterpret_cast<char*>(&_impl_.v0_),
          reinterpret_cast<char*>(&other->_impl_.v0_));
}

std::string Simplex2D::GetTypeName() const {
  return "DTCC.Simplex2D";
}


// ===================================================================

class Simplex3D::_Internal {
 public:
};

Simplex3D::Simplex3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex3D)
}
Simplex3D::Simplex3D(const Simplex3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Simplex3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){}
    , decltype(_impl_.v1_){}
    , decltype(_impl_.v2_){}
    , decltype(_impl_.v3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.v0_, &from._impl_.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v3_) -
    reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v3_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex3D)
}

inline void Simplex3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_){0}
    , decltype(_impl_.v1_){0}
    , decltype(_impl_.v2_){0}
    , decltype(_impl_.v3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Simplex3D::~Simplex3D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Simplex3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Simplex3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Simplex3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v3_) -
      reinterpret_cast<char*>(&_impl_.v0_)) + sizeof(_impl_.v3_));
  _internal_metadata_.Clear<std::string>();
}

const char* Simplex3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 v3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.v3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Simplex3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  // int32 v3 = 4;
  if (this->_internal_v3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_v3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex3D)
  return target;
}

size_t Simplex3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->_internal_v0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->_internal_v1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->_internal_v2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v2());
  }

  // int32 v3 = 4;
  if (this->_internal_v3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Simplex3D*>(
      &from));
}

void Simplex3D::MergeFrom(const Simplex3D& from) {
  Simplex3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v0() != 0) {
    _this->_internal_set_v0(from._internal_v0());
  }
  if (from._internal_v1() != 0) {
    _this->_internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _this->_internal_set_v2(from._internal_v2());
  }
  if (from._internal_v3() != 0) {
    _this->_internal_set_v3(from._internal_v3());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Simplex3D::CopyFrom(const Simplex3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex3D::IsInitialized() const {
  return true;
}

void Simplex3D::InternalSwap(Simplex3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex3D, _impl_.v3_)
      + sizeof(Simplex3D::_impl_.v3_)
      - PROTOBUF_FIELD_OFFSET(Simplex3D, _impl_.v0_)>(
          reinterpret_cast<char*>(&_impl_.v0_),
          reinterpret_cast<char*>(&other->_impl_.v0_));
}

std::string Simplex3D::GetTypeName() const {
  return "DTCC.Simplex3D";
}


// ===================================================================

class BoundingBox2D::_Internal {
 public:
  static const ::DTCC::Vector2D& p(const BoundingBox2D* msg);
  static const ::DTCC::Vector2D& q(const BoundingBox2D* msg);
};

const ::DTCC::Vector2D&
BoundingBox2D::_Internal::p(const BoundingBox2D* msg) {
  return *msg->_impl_.p_;
}
const ::DTCC::Vector2D&
BoundingBox2D::_Internal::q(const BoundingBox2D* msg) {
  return *msg->_impl_.q_;
}
BoundingBox2D::BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox2D)
}
BoundingBox2D::BoundingBox2D(const BoundingBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BoundingBox2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::DTCC::Vector2D(*from._impl_.p_);
  }
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::DTCC::Vector2D(*from._impl_.q_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox2D)
}

inline void BoundingBox2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoundingBox2D::~BoundingBox2D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundingBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p_;
  if (this != internal_default_instance()) delete _impl_.q_;
}

void BoundingBox2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundingBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingBox2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Vector2D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.Vector2D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingBox2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->_internal_has_p()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  // .DTCC.Vector2D q = 2;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox2D)
  return target;
}

size_t BoundingBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_);
  }

  // .DTCC.Vector2D q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BoundingBox2D*>(
      &from));
}

void BoundingBox2D::MergeFrom(const BoundingBox2D& from) {
  BoundingBox2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _this->_internal_mutable_p()->::DTCC::Vector2D::MergeFrom(
        from._internal_p());
  }
  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::DTCC::Vector2D::MergeFrom(
        from._internal_q());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoundingBox2D::CopyFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2D::IsInitialized() const {
  return true;
}

void BoundingBox2D::InternalSwap(BoundingBox2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox2D, _impl_.q_)
      + sizeof(BoundingBox2D::_impl_.q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox2D, _impl_.p_)>(
          reinterpret_cast<char*>(&_impl_.p_),
          reinterpret_cast<char*>(&other->_impl_.p_));
}

std::string BoundingBox2D::GetTypeName() const {
  return "DTCC.BoundingBox2D";
}


// ===================================================================

class BoundingBox3D::_Internal {
 public:
  static const ::DTCC::Vector3D& p(const BoundingBox3D* msg);
  static const ::DTCC::Vector3D& q(const BoundingBox3D* msg);
};

const ::DTCC::Vector3D&
BoundingBox3D::_Internal::p(const BoundingBox3D* msg) {
  return *msg->_impl_.p_;
}
const ::DTCC::Vector3D&
BoundingBox3D::_Internal::q(const BoundingBox3D* msg) {
  return *msg->_impl_.q_;
}
BoundingBox3D::BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox3D)
}
BoundingBox3D::BoundingBox3D(const BoundingBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BoundingBox3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::DTCC::Vector3D(*from._impl_.p_);
  }
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::DTCC::Vector3D(*from._impl_.q_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox3D)
}

inline void BoundingBox3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoundingBox3D::~BoundingBox3D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundingBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p_;
  if (this != internal_default_instance()) delete _impl_.q_;
}

void BoundingBox3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundingBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingBox3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Vector3D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.Vector3D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingBox3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->_internal_has_p()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  // .DTCC.Vector3D q = 2;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox3D)
  return target;
}

size_t BoundingBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_);
  }

  // .DTCC.Vector3D q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BoundingBox3D*>(
      &from));
}

void BoundingBox3D::MergeFrom(const BoundingBox3D& from) {
  BoundingBox3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _this->_internal_mutable_p()->::DTCC::Vector3D::MergeFrom(
        from._internal_p());
  }
  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::DTCC::Vector3D::MergeFrom(
        from._internal_q());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoundingBox3D::CopyFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3D::IsInitialized() const {
  return true;
}

void BoundingBox3D::InternalSwap(BoundingBox3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox3D, _impl_.q_)
      + sizeof(BoundingBox3D::_impl_.q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox3D, _impl_.p_)>(
          reinterpret_cast<char*>(&_impl_.p_),
          reinterpret_cast<char*>(&other->_impl_.p_));
}

std::string BoundingBox3D::GetTypeName() const {
  return "DTCC.BoundingBox3D";
}


// ===================================================================

class MultiPoint::_Internal {
 public:
};

MultiPoint::MultiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPoint)
}
MultiPoint::MultiPoint(const MultiPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MultiPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPoint)
}

inline void MultiPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiPoint::~MultiPoint() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void MultiPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPoint)
  return target;
}

size_t MultiPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiPoint*>(
      &from));
}

void MultiPoint::MergeFrom(const MultiPoint& from) {
  MultiPoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPoint::CopyFrom(const MultiPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPoint::IsInitialized() const {
  return true;
}

void MultiPoint::InternalSwap(MultiPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

std::string MultiPoint::GetTypeName() const {
  return "DTCC.MultiPoint";
}


// ===================================================================

class MultiPoint3D::_Internal {
 public:
};

MultiPoint3D::MultiPoint3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPoint3D)
}
MultiPoint3D::MultiPoint3D(const MultiPoint3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MultiPoint3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPoint3D)
}

inline void MultiPoint3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiPoint3D::~MultiPoint3D() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPoint3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPoint3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void MultiPoint3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPoint3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPoint3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPoint3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPoint3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPoint3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPoint3D)
  return target;
}

size_t MultiPoint3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPoint3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPoint3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiPoint3D*>(
      &from));
}

void MultiPoint3D::MergeFrom(const MultiPoint3D& from) {
  MultiPoint3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPoint3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPoint3D::CopyFrom(const MultiPoint3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPoint3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPoint3D::IsInitialized() const {
  return true;
}

void MultiPoint3D::InternalSwap(MultiPoint3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

std::string MultiPoint3D::GetTypeName() const {
  return "DTCC.MultiPoint3D";
}


// ===================================================================

class LineString::_Internal {
 public:
};

LineString::LineString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.LineString)
}
LineString::LineString(const LineString& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LineString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LineString)
}

inline void LineString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LineString::~LineString() {
  // @@protoc_insertion_point(destructor:DTCC.LineString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
}

void LineString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineString::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LineString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LineString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LineString)
  return target;
}

size_t LineString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LineString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineString::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LineString*>(
      &from));
}

void LineString::MergeFrom(const LineString& from) {
  LineString* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LineString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineString::CopyFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString::IsInitialized() const {
  return true;
}

void LineString::InternalSwap(LineString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
}

std::string LineString::GetTypeName() const {
  return "DTCC.LineString";
}


// ===================================================================

class LineString3D::_Internal {
 public:
};

LineString3D::LineString3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.LineString3D)
}
LineString3D::LineString3D(const LineString3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LineString3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LineString3D)
}

inline void LineString3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LineString3D::~LineString3D() {
  // @@protoc_insertion_point(destructor:DTCC.LineString3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineString3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
}

void LineString3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineString3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LineString3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineString3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineString3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LineString3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LineString3D)
  return target;
}

size_t LineString3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LineString3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineString3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LineString3D*>(
      &from));
}

void LineString3D::MergeFrom(const LineString3D& from) {
  LineString3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LineString3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineString3D::CopyFrom(const LineString3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LineString3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString3D::IsInitialized() const {
  return true;
}

void LineString3D::InternalSwap(LineString3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
}

std::string LineString3D::GetTypeName() const {
  return "DTCC.LineString3D";
}


// ===================================================================

class LinearRing::_Internal {
 public:
};

LinearRing::LinearRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.LinearRing)
}
LinearRing::LinearRing(const LinearRing& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LinearRing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.LinearRing)
}

inline void LinearRing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LinearRing::~LinearRing() {
  // @@protoc_insertion_point(destructor:DTCC.LinearRing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearRing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
}

void LinearRing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearRing::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.LinearRing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinearRing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearRing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.LinearRing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.LinearRing)
  return target;
}

size_t LinearRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.LinearRing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearRing::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LinearRing*>(
      &from));
}

void LinearRing::MergeFrom(const LinearRing& from) {
  LinearRing* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.LinearRing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinearRing::CopyFrom(const LinearRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.LinearRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearRing::IsInitialized() const {
  return true;
}

void LinearRing::InternalSwap(LinearRing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
}

std::string LinearRing::GetTypeName() const {
  return "DTCC.LinearRing";
}


// ===================================================================

class Polygon::_Internal {
 public:
  static const ::DTCC::LinearRing& shell(const Polygon* msg);
};

const ::DTCC::LinearRing&
Polygon::_Internal::shell(const Polygon* msg) {
  return *msg->_impl_.shell_;
}
Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.holes_){from._impl_.holes_}
    , decltype(_impl_.shell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_shell()) {
    _this->_impl_.shell_ = new ::DTCC::LinearRing(*from._impl_.shell_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.Polygon)
}

inline void Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.holes_){arena}
    , decltype(_impl_.shell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:DTCC.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.holes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.shell_;
}

void Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.holes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.shell_ != nullptr) {
    delete _impl_.shell_;
  }
  _impl_.shell_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.LinearRing shell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.LinearRing holes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.LinearRing shell = 1;
  if (this->_internal_has_shell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shell(this),
        _Internal::shell(this).GetCachedSize(), target, stream);
  }

  // repeated .DTCC.LinearRing holes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_holes_size()); i < n; i++) {
    const auto& repfield = this->_internal_holes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.LinearRing holes = 2;
  total_size += 1UL * this->_internal_holes_size();
  for (const auto& msg : this->_impl_.holes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DTCC.LinearRing shell = 1;
  if (this->_internal_has_shell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Polygon*>(
      &from));
}

void Polygon::MergeFrom(const Polygon& from) {
  Polygon* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.holes_.MergeFrom(from._impl_.holes_);
  if (from._internal_has_shell()) {
    _this->_internal_mutable_shell()->::DTCC::LinearRing::MergeFrom(
        from._internal_shell());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.holes_.InternalSwap(&other->_impl_.holes_);
  swap(_impl_.shell_, other->_impl_.shell_);
}

std::string Polygon::GetTypeName() const {
  return "DTCC.Polygon";
}


// ===================================================================

class MultiPolygon::_Internal {
 public:
};

MultiPolygon::MultiPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MultiPolygon)
}
MultiPolygon::MultiPolygon(const MultiPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MultiPolygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.polygons_){from._impl_.polygons_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.MultiPolygon)
}

inline void MultiPolygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.polygons_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiPolygon::~MultiPolygon() {
  // @@protoc_insertion_point(destructor:DTCC.MultiPolygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygons_.~RepeatedPtrField();
}

void MultiPolygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MultiPolygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygons_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiPolygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Polygon polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPolygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MultiPolygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Polygon polygons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygons_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MultiPolygon)
  return target;
}

size_t MultiPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MultiPolygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Polygon polygons = 1;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->_impl_.polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPolygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiPolygon*>(
      &from));
}

void MultiPolygon::MergeFrom(const MultiPolygon& from) {
  MultiPolygon* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MultiPolygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.polygons_.MergeFrom(from._impl_.polygons_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiPolygon::CopyFrom(const MultiPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MultiPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPolygon::IsInitialized() const {
  return true;
}

void MultiPolygon::InternalSwap(MultiPolygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.polygons_.InternalSwap(&other->_impl_.polygons_);
}

std::string MultiPolygon::GetTypeName() const {
  return "DTCC.MultiPolygon";
}


// ===================================================================

class Grid2D::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& boundingbox(const Grid2D* msg);
};

const ::DTCC::BoundingBox2D&
Grid2D::_Internal::boundingbox(const Grid2D* msg) {
  return *msg->_impl_.boundingbox_;
}
Grid2D::Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid2D)
}
Grid2D::Grid2D(const Grid2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Grid2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.boundingbox_){nullptr}
    , decltype(_impl_.xsize_){}
    , decltype(_impl_.ysize_){}
    , decltype(_impl_.xstep_){}
    , decltype(_impl_.ystep_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    _this->_impl_.boundingbox_ = new ::DTCC::BoundingBox2D(*from._impl_.boundingbox_);
  }
  ::memcpy(&_impl_.xsize_, &from._impl_.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ystep_) -
    reinterpret_cast<char*>(&_impl_.xsize_)) + sizeof(_impl_.ystep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid2D)
}

inline void Grid2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.boundingbox_){nullptr}
    , decltype(_impl_.xsize_){0}
    , decltype(_impl_.ysize_){0}
    , decltype(_impl_.xstep_){0}
    , decltype(_impl_.ystep_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Grid2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.boundingbox_;
}

void Grid2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.boundingbox_ != nullptr) {
    delete _impl_.boundingbox_;
  }
  _impl_.boundingbox_ = nullptr;
  ::memset(&_impl_.xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ystep_) -
      reinterpret_cast<char*>(&_impl_.xsize_)) + sizeof(_impl_.ystep_));
  _internal_metadata_.Clear<std::string>();
}

const char* Grid2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.BoundingBox2D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float xStep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Grid2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::boundingbox(this),
        _Internal::boundingbox(this).GetCachedSize(), target, stream);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // float xStep = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = this->_internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_xstep(), target);
  }

  // float yStep = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = this->_internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_ystep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid2D)
  return target;
}

size_t Grid2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.boundingbox_);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ysize());
  }

  // float xStep = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = this->_internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    total_size += 1 + 4;
  }

  // float yStep = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = this->_internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Grid2D*>(
      &from));
}

void Grid2D::MergeFrom(const Grid2D& from) {
  Grid2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_boundingbox()) {
    _this->_internal_mutable_boundingbox()->::DTCC::BoundingBox2D::MergeFrom(
        from._internal_boundingbox());
  }
  if (from._internal_xsize() != 0) {
    _this->_internal_set_xsize(from._internal_xsize());
  }
  if (from._internal_ysize() != 0) {
    _this->_internal_set_ysize(from._internal_ysize());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = from._internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    _this->_internal_set_xstep(from._internal_xstep());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = from._internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    _this->_internal_set_ystep(from._internal_ystep());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {
  return true;
}

void Grid2D::InternalSwap(Grid2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid2D, _impl_.ystep_)
      + sizeof(Grid2D::_impl_.ystep_)
      - PROTOBUF_FIELD_OFFSET(Grid2D, _impl_.boundingbox_)>(
          reinterpret_cast<char*>(&_impl_.boundingbox_),
          reinterpret_cast<char*>(&other->_impl_.boundingbox_));
}

std::string Grid2D::GetTypeName() const {
  return "DTCC.Grid2D";
}


// ===================================================================

class Grid3D::_Internal {
 public:
  static const ::DTCC::BoundingBox3D& boundingbox(const Grid3D* msg);
};

const ::DTCC::BoundingBox3D&
Grid3D::_Internal::boundingbox(const Grid3D* msg) {
  return *msg->_impl_.boundingbox_;
}
Grid3D::Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid3D)
}
Grid3D::Grid3D(const Grid3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Grid3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.boundingbox_){nullptr}
    , decltype(_impl_.xsize_){}
    , decltype(_impl_.ysize_){}
    , decltype(_impl_.zsize_){}
    , decltype(_impl_.xstep_){}
    , decltype(_impl_.ystep_){}
    , decltype(_impl_.zstep_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    _this->_impl_.boundingbox_ = new ::DTCC::BoundingBox3D(*from._impl_.boundingbox_);
  }
  ::memcpy(&_impl_.xsize_, &from._impl_.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.zstep_) -
    reinterpret_cast<char*>(&_impl_.xsize_)) + sizeof(_impl_.zstep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid3D)
}

inline void Grid3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.boundingbox_){nullptr}
    , decltype(_impl_.xsize_){0}
    , decltype(_impl_.ysize_){0}
    , decltype(_impl_.zsize_){0}
    , decltype(_impl_.xstep_){0}
    , decltype(_impl_.ystep_){0}
    , decltype(_impl_.zstep_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Grid3D::~Grid3D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Grid3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.boundingbox_;
}

void Grid3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Grid3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.boundingbox_ != nullptr) {
    delete _impl_.boundingbox_;
  }
  _impl_.boundingbox_ = nullptr;
  ::memset(&_impl_.xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.zstep_) -
      reinterpret_cast<char*>(&_impl_.xsize_)) + sizeof(_impl_.zstep_));
  _internal_metadata_.Clear<std::string>();
}

const char* Grid3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.BoundingBox3D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 zSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.zsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float xStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yStep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float zStep = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.zstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Grid3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::boundingbox(this),
        _Internal::boundingbox(this).GetCachedSize(), target, stream);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // int32 zSize = 4;
  if (this->_internal_zsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_zsize(), target);
  }

  // float xStep = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = this->_internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_xstep(), target);
  }

  // float yStep = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = this->_internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ystep(), target);
  }

  // float zStep = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zstep = this->_internal_zstep();
  uint32_t raw_zstep;
  memcpy(&raw_zstep, &tmp_zstep, sizeof(tmp_zstep));
  if (raw_zstep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_zstep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid3D)
  return target;
}

size_t Grid3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->_internal_has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.boundingbox_);
  }

  // int32 xSize = 2;
  if (this->_internal_xsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->_internal_ysize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ysize());
  }

  // int32 zSize = 4;
  if (this->_internal_zsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zsize());
  }

  // float xStep = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = this->_internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    total_size += 1 + 4;
  }

  // float yStep = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = this->_internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    total_size += 1 + 4;
  }

  // float zStep = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zstep = this->_internal_zstep();
  uint32_t raw_zstep;
  memcpy(&raw_zstep, &tmp_zstep, sizeof(tmp_zstep));
  if (raw_zstep != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Grid3D*>(
      &from));
}

void Grid3D::MergeFrom(const Grid3D& from) {
  Grid3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_boundingbox()) {
    _this->_internal_mutable_boundingbox()->::DTCC::BoundingBox3D::MergeFrom(
        from._internal_boundingbox());
  }
  if (from._internal_xsize() != 0) {
    _this->_internal_set_xsize(from._internal_xsize());
  }
  if (from._internal_ysize() != 0) {
    _this->_internal_set_ysize(from._internal_ysize());
  }
  if (from._internal_zsize() != 0) {
    _this->_internal_set_zsize(from._internal_zsize());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xstep = from._internal_xstep();
  uint32_t raw_xstep;
  memcpy(&raw_xstep, &tmp_xstep, sizeof(tmp_xstep));
  if (raw_xstep != 0) {
    _this->_internal_set_xstep(from._internal_xstep());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ystep = from._internal_ystep();
  uint32_t raw_ystep;
  memcpy(&raw_ystep, &tmp_ystep, sizeof(tmp_ystep));
  if (raw_ystep != 0) {
    _this->_internal_set_ystep(from._internal_ystep());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zstep = from._internal_zstep();
  uint32_t raw_zstep;
  memcpy(&raw_zstep, &tmp_zstep, sizeof(tmp_zstep));
  if (raw_zstep != 0) {
    _this->_internal_set_zstep(from._internal_zstep());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Grid3D::CopyFrom(const Grid3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid3D::IsInitialized() const {
  return true;
}

void Grid3D::InternalSwap(Grid3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid3D, _impl_.zstep_)
      + sizeof(Grid3D::_impl_.zstep_)
      - PROTOBUF_FIELD_OFFSET(Grid3D, _impl_.boundingbox_)>(
          reinterpret_cast<char*>(&_impl_.boundingbox_),
          reinterpret_cast<char*>(&other->_impl_.boundingbox_));
}

std::string Grid3D::GetTypeName() const {
  return "DTCC.Grid3D";
}


// ===================================================================

class Mesh2D::_Internal {
 public:
};

Mesh2D::Mesh2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh2D)
}
Mesh2D::Mesh2D(const Mesh2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Mesh2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.markers_){from._impl_.markers_}
    , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh2D)
}

inline void Mesh2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.cells_){arena}
    , decltype(_impl_.markers_){arena}
    , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mesh2D::~Mesh2D() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mesh2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.cells_.~RepeatedPtrField();
  _impl_.markers_.~RepeatedField();
}

void Mesh2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mesh2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.cells_.Clear();
  _impl_.markers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Mesh2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex2D cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_markers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_markers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mesh2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Simplex2D cells = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 markers = 3;
  {
    int byte_size = _impl_._markers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_markers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh2D)
  return target;
}

size_t Mesh2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex2D cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_impl_.cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 markers = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.markers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._markers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Mesh2D*>(
      &from));
}

void Mesh2D::MergeFrom(const Mesh2D& from) {
  Mesh2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_impl_.cells_.MergeFrom(from._impl_.cells_);
  _this->_impl_.markers_.MergeFrom(from._impl_.markers_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Mesh2D::CopyFrom(const Mesh2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh2D::IsInitialized() const {
  return true;
}

void Mesh2D::InternalSwap(Mesh2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
  _impl_.markers_.InternalSwap(&other->_impl_.markers_);
}

std::string Mesh2D::GetTypeName() const {
  return "DTCC.Mesh2D";
}


// ===================================================================

class Mesh3D::_Internal {
 public:
};

Mesh3D::Mesh3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh3D)
}
Mesh3D::Mesh3D(const Mesh3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Mesh3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.markers_){from._impl_.markers_}
    , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh3D)
}

inline void Mesh3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.cells_){arena}
    , decltype(_impl_.markers_){arena}
    , /*decltype(_impl_._markers_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mesh3D::~Mesh3D() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mesh3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.cells_.~RepeatedPtrField();
  _impl_.markers_.~RepeatedField();
}

void Mesh3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mesh3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.cells_.Clear();
  _impl_.markers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Mesh3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex3D cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_markers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_markers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mesh3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Simplex3D cells = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 markers = 3;
  {
    int byte_size = _impl_._markers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_markers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh3D)
  return target;
}

size_t Mesh3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex3D cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_impl_.cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 markers = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.markers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._markers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Mesh3D*>(
      &from));
}

void Mesh3D::MergeFrom(const Mesh3D& from) {
  Mesh3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_impl_.cells_.MergeFrom(from._impl_.cells_);
  _this->_impl_.markers_.MergeFrom(from._impl_.markers_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Mesh3D::CopyFrom(const Mesh3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh3D::IsInitialized() const {
  return true;
}

void Mesh3D::InternalSwap(Mesh3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
  _impl_.markers_.InternalSwap(&other->_impl_.markers_);
}

std::string Mesh3D::GetTypeName() const {
  return "DTCC.Mesh3D";
}


// ===================================================================

class Surface2D::_Internal {
 public:
};

Surface2D::Surface2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Surface2D)
}
Surface2D::Surface2D(const Surface2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Surface2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.normals_){from._impl_.normals_}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Surface2D)
}

inline void Surface2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.normals_){arena}
    , decltype(_impl_.edges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Surface2D::~Surface2D() {
  // @@protoc_insertion_point(destructor:DTCC.Surface2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Surface2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
  _impl_.edges_.~RepeatedPtrField();
}

void Surface2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Surface2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Surface2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.normals_.Clear();
  _impl_.edges_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Surface2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Vector2D normals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex1D edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Surface2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Surface2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Vector2D normals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Simplex1D edges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Surface2D)
  return target;
}

size_t Surface2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Surface2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Vector2D normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_impl_.normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex1D edges = 3;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Surface2D*>(
      &from));
}

void Surface2D::MergeFrom(const Surface2D& from) {
  Surface2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Surface2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_impl_.normals_.MergeFrom(from._impl_.normals_);
  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Surface2D::CopyFrom(const Surface2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Surface2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface2D::IsInitialized() const {
  return true;
}

void Surface2D::InternalSwap(Surface2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
}

std::string Surface2D::GetTypeName() const {
  return "DTCC.Surface2D";
}


// ===================================================================

class Surface3D::_Internal {
 public:
};

Surface3D::Surface3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Surface3D)
}
Surface3D::Surface3D(const Surface3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Surface3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.normals_){from._impl_.normals_}
    , decltype(_impl_.faces_){from._impl_.faces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Surface3D)
}

inline void Surface3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.normals_){arena}
    , decltype(_impl_.faces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Surface3D::~Surface3D() {
  // @@protoc_insertion_point(destructor:DTCC.Surface3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Surface3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
  _impl_.faces_.~RepeatedPtrField();
}

void Surface3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Surface3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Surface3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.normals_.Clear();
  _impl_.faces_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Surface3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Vector3D normals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex2D faces = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Surface3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Surface3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Vector3D normals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DTCC.Simplex2D faces = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Surface3D)
  return target;
}

size_t Surface3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Surface3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Vector3D normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_impl_.normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex2D faces = 3;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_impl_.faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Surface3D*>(
      &from));
}

void Surface3D::MergeFrom(const Surface3D& from) {
  Surface3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Surface3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_impl_.normals_.MergeFrom(from._impl_.normals_);
  _this->_impl_.faces_.MergeFrom(from._impl_.faces_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Surface3D::CopyFrom(const Surface3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Surface3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface3D::IsInitialized() const {
  return true;
}

void Surface3D::InternalSwap(Surface3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
}

std::string Surface3D::GetTypeName() const {
  return "DTCC.Surface3D";
}


// ===================================================================

class GridField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridField2D* msg);
};

const ::DTCC::Grid2D&
GridField2D::_Internal::grid(const GridField2D* msg) {
  return *msg->_impl_.grid_;
}
GridField2D::GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField2D)
}
GridField2D::GridField2D(const GridField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GridField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::DTCC::Grid2D(*from._impl_.grid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField2D)
}

inline void GridField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GridField2D::~GridField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GridField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.grid_;
}

void GridField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GridField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GridField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField2D)
  return target;
}

size_t GridField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GridField2D*>(
      &from));
}

void GridField2D::MergeFrom(const GridField2D& from) {
  GridField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(
        from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridField2D::CopyFrom(const GridField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField2D::IsInitialized() const {
  return true;
}

void GridField2D::InternalSwap(GridField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.grid_, other->_impl_.grid_);
}

std::string GridField2D::GetTypeName() const {
  return "DTCC.GridField2D";
}


// ===================================================================

class GridField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridField3D* msg);
};

const ::DTCC::Grid3D&
GridField3D::_Internal::grid(const GridField3D* msg) {
  return *msg->_impl_.grid_;
}
GridField3D::GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField3D)
}
GridField3D::GridField3D(const GridField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GridField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::DTCC::Grid3D(*from._impl_.grid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField3D)
}

inline void GridField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GridField3D::~GridField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GridField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.grid_;
}

void GridField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GridField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GridField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField3D)
  return target;
}

size_t GridField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GridField3D*>(
      &from));
}

void GridField3D::MergeFrom(const GridField3D& from) {
  GridField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(
        from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridField3D::CopyFrom(const GridField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField3D::IsInitialized() const {
  return true;
}

void GridField3D::InternalSwap(GridField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.grid_, other->_impl_.grid_);
}

std::string GridField3D::GetTypeName() const {
  return "DTCC.GridField3D";
}


// ===================================================================

class GridVectorField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridVectorField2D* msg);
};

const ::DTCC::Grid2D&
GridVectorField2D::_Internal::grid(const GridVectorField2D* msg) {
  return *msg->_impl_.grid_;
}
GridVectorField2D::GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField2D)
}
GridVectorField2D::GridVectorField2D(const GridVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GridVectorField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::DTCC::Grid2D(*from._impl_.grid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField2D)
}

inline void GridVectorField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GridVectorField2D::~GridVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GridVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.grid_;
}

void GridVectorField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GridVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridVectorField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GridVectorField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField2D)
  return target;
}

size_t GridVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GridVectorField2D*>(
      &from));
}

void GridVectorField2D::MergeFrom(const GridVectorField2D& from) {
  GridVectorField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(
        from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridVectorField2D::CopyFrom(const GridVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField2D::IsInitialized() const {
  return true;
}

void GridVectorField2D::InternalSwap(GridVectorField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.grid_, other->_impl_.grid_);
}

std::string GridVectorField2D::GetTypeName() const {
  return "DTCC.GridVectorField2D";
}


// ===================================================================

class GridVectorField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridVectorField3D* msg);
};

const ::DTCC::Grid3D&
GridVectorField3D::_Internal::grid(const GridVectorField3D* msg) {
  return *msg->_impl_.grid_;
}
GridVectorField3D::GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField3D)
}
GridVectorField3D::GridVectorField3D(const GridVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GridVectorField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::DTCC::Grid3D(*from._impl_.grid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField3D)
}

inline void GridVectorField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.grid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GridVectorField3D::~GridVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GridVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.grid_;
}

void GridVectorField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GridVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GridVectorField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GridVectorField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField3D)
  return target;
}

size_t GridVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GridVectorField3D*>(
      &from));
}

void GridVectorField3D::MergeFrom(const GridVectorField3D& from) {
  GridVectorField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(
        from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GridVectorField3D::CopyFrom(const GridVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField3D::IsInitialized() const {
  return true;
}

void GridVectorField3D::InternalSwap(GridVectorField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.grid_, other->_impl_.grid_);
}

std::string GridVectorField3D::GetTypeName() const {
  return "DTCC.GridVectorField3D";
}


// ===================================================================

class MeshField2D::_Internal {
 public:
  static const ::DTCC::Mesh2D& mesh(const MeshField2D* msg);
};

const ::DTCC::Mesh2D&
MeshField2D::_Internal::mesh(const MeshField2D* msg) {
  return *msg->_impl_.mesh_;
}
MeshField2D::MeshField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshField2D)
}
MeshField2D::MeshField2D(const MeshField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MeshField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    _this->_impl_.mesh_ = new ::DTCC::Mesh2D(*from._impl_.mesh_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshField2D)
}

inline void MeshField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeshField2D::~MeshField2D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.mesh_;
}

void MeshField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh2D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh2D mesh = 1;
  if (this->_internal_has_mesh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mesh(this),
        _Internal::mesh(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshField2D)
  return target;
}

size_t MeshField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh2D mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MeshField2D*>(
      &from));
}

void MeshField2D::MergeFrom(const MeshField2D& from) {
  MeshField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_mesh()) {
    _this->_internal_mutable_mesh()->::DTCC::Mesh2D::MergeFrom(
        from._internal_mesh());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshField2D::CopyFrom(const MeshField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshField2D::IsInitialized() const {
  return true;
}

void MeshField2D::InternalSwap(MeshField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.mesh_, other->_impl_.mesh_);
}

std::string MeshField2D::GetTypeName() const {
  return "DTCC.MeshField2D";
}


// ===================================================================

class MeshField3D::_Internal {
 public:
  static const ::DTCC::Mesh3D& mesh(const MeshField3D* msg);
};

const ::DTCC::Mesh3D&
MeshField3D::_Internal::mesh(const MeshField3D* msg) {
  return *msg->_impl_.mesh_;
}
MeshField3D::MeshField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshField3D)
}
MeshField3D::MeshField3D(const MeshField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MeshField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    _this->_impl_.mesh_ = new ::DTCC::Mesh3D(*from._impl_.mesh_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshField3D)
}

inline void MeshField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeshField3D::~MeshField3D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.mesh_;
}

void MeshField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh3D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh3D mesh = 1;
  if (this->_internal_has_mesh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mesh(this),
        _Internal::mesh(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshField3D)
  return target;
}

size_t MeshField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh3D mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MeshField3D*>(
      &from));
}

void MeshField3D::MergeFrom(const MeshField3D& from) {
  MeshField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_mesh()) {
    _this->_internal_mutable_mesh()->::DTCC::Mesh3D::MergeFrom(
        from._internal_mesh());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshField3D::CopyFrom(const MeshField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshField3D::IsInitialized() const {
  return true;
}

void MeshField3D::InternalSwap(MeshField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.mesh_, other->_impl_.mesh_);
}

std::string MeshField3D::GetTypeName() const {
  return "DTCC.MeshField3D";
}


// ===================================================================

class MeshVectorField2D::_Internal {
 public:
  static const ::DTCC::Mesh2D& mesh(const MeshVectorField2D* msg);
};

const ::DTCC::Mesh2D&
MeshVectorField2D::_Internal::mesh(const MeshVectorField2D* msg) {
  return *msg->_impl_.mesh_;
}
MeshVectorField2D::MeshVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshVectorField2D)
}
MeshVectorField2D::MeshVectorField2D(const MeshVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MeshVectorField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    _this->_impl_.mesh_ = new ::DTCC::Mesh2D(*from._impl_.mesh_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshVectorField2D)
}

inline void MeshVectorField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeshVectorField2D::~MeshVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshVectorField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.mesh_;
}

void MeshVectorField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshVectorField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshVectorField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh2D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshVectorField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshVectorField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh2D mesh = 1;
  if (this->_internal_has_mesh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mesh(this),
        _Internal::mesh(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshVectorField2D)
  return target;
}

size_t MeshVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshVectorField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh2D mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshVectorField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MeshVectorField2D*>(
      &from));
}

void MeshVectorField2D::MergeFrom(const MeshVectorField2D& from) {
  MeshVectorField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshVectorField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_mesh()) {
    _this->_internal_mutable_mesh()->::DTCC::Mesh2D::MergeFrom(
        from._internal_mesh());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshVectorField2D::CopyFrom(const MeshVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshVectorField2D::IsInitialized() const {
  return true;
}

void MeshVectorField2D::InternalSwap(MeshVectorField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.mesh_, other->_impl_.mesh_);
}

std::string MeshVectorField2D::GetTypeName() const {
  return "DTCC.MeshVectorField2D";
}


// ===================================================================

class MeshVectorField3D::_Internal {
 public:
  static const ::DTCC::Mesh3D& mesh(const MeshVectorField3D* msg);
};

const ::DTCC::Mesh3D&
MeshVectorField3D::_Internal::mesh(const MeshVectorField3D* msg) {
  return *msg->_impl_.mesh_;
}
MeshVectorField3D::MeshVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshVectorField3D)
}
MeshVectorField3D::MeshVectorField3D(const MeshVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MeshVectorField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    _this->_impl_.mesh_ = new ::DTCC::Mesh3D(*from._impl_.mesh_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshVectorField3D)
}

inline void MeshVectorField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.mesh_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeshVectorField3D::~MeshVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshVectorField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.mesh_;
}

void MeshVectorField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshVectorField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mesh_ != nullptr) {
    delete _impl_.mesh_;
  }
  _impl_.mesh_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* MeshVectorField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Mesh3D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshVectorField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshVectorField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh3D mesh = 1;
  if (this->_internal_has_mesh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mesh(this),
        _Internal::mesh(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshVectorField3D)
  return target;
}

size_t MeshVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshVectorField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Mesh3D mesh = 1;
  if (this->_internal_has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshVectorField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MeshVectorField3D*>(
      &from));
}

void MeshVectorField3D::MergeFrom(const MeshVectorField3D& from) {
  MeshVectorField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshVectorField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_mesh()) {
    _this->_internal_mutable_mesh()->::DTCC::Mesh3D::MergeFrom(
        from._internal_mesh());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MeshVectorField3D::CopyFrom(const MeshVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshVectorField3D::IsInitialized() const {
  return true;
}

void MeshVectorField3D::InternalSwap(MeshVectorField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.mesh_, other->_impl_.mesh_);
}

std::string MeshVectorField3D::GetTypeName() const {
  return "DTCC.MeshVectorField3D";
}


// ===================================================================

class SurfaceField2D::_Internal {
 public:
  static const ::DTCC::Surface2D& surface(const SurfaceField2D* msg);
};

const ::DTCC::Surface2D&
SurfaceField2D::_Internal::surface(const SurfaceField2D* msg) {
  return *msg->_impl_.surface_;
}
SurfaceField2D::SurfaceField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceField2D)
}
SurfaceField2D::SurfaceField2D(const SurfaceField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SurfaceField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    _this->_impl_.surface_ = new ::DTCC::Surface2D(*from._impl_.surface_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceField2D)
}

inline void SurfaceField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SurfaceField2D::~SurfaceField2D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurfaceField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.surface_;
}

void SurfaceField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurfaceField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SurfaceField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Surface2D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurfaceField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface2D surface = 1;
  if (this->_internal_has_surface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::surface(this),
        _Internal::surface(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceField2D)
  return target;
}

size_t SurfaceField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Surface2D surface = 1;
  if (this->_internal_has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SurfaceField2D*>(
      &from));
}

void SurfaceField2D::MergeFrom(const SurfaceField2D& from) {
  SurfaceField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_surface()) {
    _this->_internal_mutable_surface()->::DTCC::Surface2D::MergeFrom(
        from._internal_surface());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SurfaceField2D::CopyFrom(const SurfaceField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceField2D::IsInitialized() const {
  return true;
}

void SurfaceField2D::InternalSwap(SurfaceField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

std::string SurfaceField2D::GetTypeName() const {
  return "DTCC.SurfaceField2D";
}


// ===================================================================

class SurfaceField3D::_Internal {
 public:
  static const ::DTCC::Surface3D& surface(const SurfaceField3D* msg);
};

const ::DTCC::Surface3D&
SurfaceField3D::_Internal::surface(const SurfaceField3D* msg) {
  return *msg->_impl_.surface_;
}
SurfaceField3D::SurfaceField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceField3D)
}
SurfaceField3D::SurfaceField3D(const SurfaceField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SurfaceField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    _this->_impl_.surface_ = new ::DTCC::Surface3D(*from._impl_.surface_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceField3D)
}

inline void SurfaceField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SurfaceField3D::~SurfaceField3D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurfaceField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.surface_;
}

void SurfaceField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurfaceField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SurfaceField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Surface3D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurfaceField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface3D surface = 1;
  if (this->_internal_has_surface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::surface(this),
        _Internal::surface(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceField3D)
  return target;
}

size_t SurfaceField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Surface3D surface = 1;
  if (this->_internal_has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SurfaceField3D*>(
      &from));
}

void SurfaceField3D::MergeFrom(const SurfaceField3D& from) {
  SurfaceField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_surface()) {
    _this->_internal_mutable_surface()->::DTCC::Surface3D::MergeFrom(
        from._internal_surface());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SurfaceField3D::CopyFrom(const SurfaceField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceField3D::IsInitialized() const {
  return true;
}

void SurfaceField3D::InternalSwap(SurfaceField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

std::string SurfaceField3D::GetTypeName() const {
  return "DTCC.SurfaceField3D";
}


// ===================================================================

class SurfaceVectorField2D::_Internal {
 public:
  static const ::DTCC::Surface2D& surface(const SurfaceVectorField2D* msg);
};

const ::DTCC::Surface2D&
SurfaceVectorField2D::_Internal::surface(const SurfaceVectorField2D* msg) {
  return *msg->_impl_.surface_;
}
SurfaceVectorField2D::SurfaceVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceVectorField2D)
}
SurfaceVectorField2D::SurfaceVectorField2D(const SurfaceVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SurfaceVectorField2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    _this->_impl_.surface_ = new ::DTCC::Surface2D(*from._impl_.surface_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceVectorField2D)
}

inline void SurfaceVectorField2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SurfaceVectorField2D::~SurfaceVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceVectorField2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurfaceVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.surface_;
}

void SurfaceVectorField2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurfaceVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceVectorField2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SurfaceVectorField2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Surface2D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurfaceVectorField2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceVectorField2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface2D surface = 1;
  if (this->_internal_has_surface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::surface(this),
        _Internal::surface(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceVectorField2D)
  return target;
}

size_t SurfaceVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceVectorField2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Surface2D surface = 1;
  if (this->_internal_has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceVectorField2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SurfaceVectorField2D*>(
      &from));
}

void SurfaceVectorField2D::MergeFrom(const SurfaceVectorField2D& from) {
  SurfaceVectorField2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceVectorField2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_surface()) {
    _this->_internal_mutable_surface()->::DTCC::Surface2D::MergeFrom(
        from._internal_surface());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SurfaceVectorField2D::CopyFrom(const SurfaceVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceVectorField2D::IsInitialized() const {
  return true;
}

void SurfaceVectorField2D::InternalSwap(SurfaceVectorField2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

std::string SurfaceVectorField2D::GetTypeName() const {
  return "DTCC.SurfaceVectorField2D";
}


// ===================================================================

class SurfaceVectorField3D::_Internal {
 public:
  static const ::DTCC::Surface3D& surface(const SurfaceVectorField3D* msg);
};

const ::DTCC::Surface3D&
SurfaceVectorField3D::_Internal::surface(const SurfaceVectorField3D* msg) {
  return *msg->_impl_.surface_;
}
SurfaceVectorField3D::SurfaceVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceVectorField3D)
}
SurfaceVectorField3D::SurfaceVectorField3D(const SurfaceVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SurfaceVectorField3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    _this->_impl_.surface_ = new ::DTCC::Surface3D(*from._impl_.surface_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceVectorField3D)
}

inline void SurfaceVectorField3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.surface_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SurfaceVectorField3D::~SurfaceVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceVectorField3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurfaceVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.surface_;
}

void SurfaceVectorField3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurfaceVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceVectorField3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.surface_ != nullptr) {
    delete _impl_.surface_;
  }
  _impl_.surface_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SurfaceVectorField3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DTCC.Surface3D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurfaceVectorField3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceVectorField3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface3D surface = 1;
  if (this->_internal_has_surface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::surface(this),
        _Internal::surface(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceVectorField3D)
  return target;
}

size_t SurfaceVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceVectorField3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .DTCC.Surface3D surface = 1;
  if (this->_internal_has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceVectorField3D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SurfaceVectorField3D*>(
      &from));
}

void SurfaceVectorField3D::MergeFrom(const SurfaceVectorField3D& from) {
  SurfaceVectorField3D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceVectorField3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_surface()) {
    _this->_internal_mutable_surface()->::DTCC::Surface3D::MergeFrom(
        from._internal_surface());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SurfaceVectorField3D::CopyFrom(const SurfaceVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceVectorField3D::IsInitialized() const {
  return true;
}

void SurfaceVectorField3D::InternalSwap(SurfaceVectorField3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

std::string SurfaceVectorField3D::GetTypeName() const {
  return "DTCC.SurfaceVectorField3D";
}


// ===================================================================

class PointCloud::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& bounds(const PointCloud* msg);
  static const ::DTCC::Georeference& georeference(const PointCloud* msg);
};

const ::DTCC::BoundingBox2D&
PointCloud::_Internal::bounds(const PointCloud* msg) {
  return *msg->_impl_.bounds_;
}
const ::DTCC::Georeference&
PointCloud::_Internal::georeference(const PointCloud* msg) {
  return *msg->_impl_.georeference_;
}
PointCloud::PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PointCloud* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.classification_){from._impl_.classification_}
    , /*decltype(_impl_._classification_cached_byte_size_)*/{0}
    , decltype(_impl_.intensity_){from._impl_.intensity_}
    , /*decltype(_impl_._intensity_cached_byte_size_)*/{0}
    , decltype(_impl_.returnnumber_){from._impl_.returnnumber_}
    , /*decltype(_impl_._returnnumber_cached_byte_size_)*/{0}
    , decltype(_impl_.numreturns_){from._impl_.numreturns_}
    , /*decltype(_impl_._numreturns_cached_byte_size_)*/{0}
    , decltype(_impl_.usedclassifications_){from._impl_.usedclassifications_}
    , /*decltype(_impl_._usedclassifications_cached_byte_size_)*/{0}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.georeference_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    _this->_impl_.bounds_ = new ::DTCC::BoundingBox2D(*from._impl_.bounds_);
  }
  if (from._internal_has_georeference()) {
    _this->_impl_.georeference_ = new ::DTCC::Georeference(*from._impl_.georeference_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.PointCloud)
}

inline void PointCloud::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.classification_){arena}
    , /*decltype(_impl_._classification_cached_byte_size_)*/{0}
    , decltype(_impl_.intensity_){arena}
    , /*decltype(_impl_._intensity_cached_byte_size_)*/{0}
    , decltype(_impl_.returnnumber_){arena}
    , /*decltype(_impl_._returnnumber_cached_byte_size_)*/{0}
    , decltype(_impl_.numreturns_){arena}
    , /*decltype(_impl_._numreturns_cached_byte_size_)*/{0}
    , decltype(_impl_.usedclassifications_){arena}
    , /*decltype(_impl_._usedclassifications_cached_byte_size_)*/{0}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.georeference_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:DTCC.PointCloud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.classification_.~RepeatedField();
  _impl_.intensity_.~RepeatedField();
  _impl_.returnnumber_.~RepeatedField();
  _impl_.numreturns_.~RepeatedField();
  _impl_.usedclassifications_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.bounds_;
  if (this != internal_default_instance()) delete _impl_.georeference_;
}

void PointCloud::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.PointCloud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.classification_.Clear();
  _impl_.intensity_.Clear();
  _impl_.returnnumber_.Clear();
  _impl_.numreturns_.Clear();
  _impl_.usedclassifications_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.bounds_ != nullptr) {
    delete _impl_.bounds_;
  }
  _impl_.bounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.georeference_ != nullptr) {
    delete _impl_.georeference_;
  }
  _impl_.georeference_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PointCloud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DTCC.BoundingBox2D bounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_classification(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_classification(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 returnNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_returnnumber(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_returnnumber(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 numReturns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_numreturns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_numreturns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 usedClassifications = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_usedclassifications(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_usedclassifications(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.Georeference georeference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_georeference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointCloud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.PointCloud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 classification = 3;
  {
    int byte_size = _impl_._classification_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_classification(), byte_size, target);
    }
  }

  // repeated uint32 intensity = 4;
  {
    int byte_size = _impl_._intensity_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_intensity(), byte_size, target);
    }
  }

  // repeated uint32 returnNumber = 5;
  {
    int byte_size = _impl_._returnnumber_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_returnnumber(), byte_size, target);
    }
  }

  // repeated uint32 numReturns = 6;
  {
    int byte_size = _impl_._numreturns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_numreturns(), byte_size, target);
    }
  }

  // repeated uint32 usedClassifications = 7;
  {
    int byte_size = _impl_._usedclassifications_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_usedclassifications(), byte_size, target);
    }
  }

  // .DTCC.Georeference georeference = 8;
  if (this->_internal_has_georeference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::georeference(this),
        _Internal::georeference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.PointCloud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 classification = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.classification_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._classification_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 intensity = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.intensity_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 returnNumber = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.returnnumber_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._returnnumber_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 numReturns = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.numreturns_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._numreturns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 usedClassifications = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.usedclassifications_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._usedclassifications_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounds_);
  }

  // .DTCC.Georeference georeference = 8;
  if (this->_internal_has_georeference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.georeference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PointCloud*>(
      &from));
}

void PointCloud::MergeFrom(const PointCloud& from) {
  PointCloud* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.PointCloud)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.classification_.MergeFrom(from._impl_.classification_);
  _this->_impl_.intensity_.MergeFrom(from._impl_.intensity_);
  _this->_impl_.returnnumber_.MergeFrom(from._impl_.returnnumber_);
  _this->_impl_.numreturns_.MergeFrom(from._impl_.numreturns_);
  _this->_impl_.usedclassifications_.MergeFrom(from._impl_.usedclassifications_);
  if (from._internal_has_bounds()) {
    _this->_internal_mutable_bounds()->::DTCC::BoundingBox2D::MergeFrom(
        from._internal_bounds());
  }
  if (from._internal_has_georeference()) {
    _this->_internal_mutable_georeference()->::DTCC::Georeference::MergeFrom(
        from._internal_georeference());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.classification_.InternalSwap(&other->_impl_.classification_);
  _impl_.intensity_.InternalSwap(&other->_impl_.intensity_);
  _impl_.returnnumber_.InternalSwap(&other->_impl_.returnnumber_);
  _impl_.numreturns_.InternalSwap(&other->_impl_.numreturns_);
  _impl_.usedclassifications_.InternalSwap(&other->_impl_.usedclassifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.georeference_)
      + sizeof(PointCloud::_impl_.georeference_)
      - PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

std::string PointCloud::GetTypeName() const {
  return "DTCC.PointCloud";
}


// ===================================================================

class Building::_Internal {
 public:
  static const ::DTCC::Polygon& footprint(const Building* msg);
  static const ::DTCC::PointCloud& roofpoints(const Building* msg);
};

const ::DTCC::Polygon&
Building::_Internal::footprint(const Building* msg) {
  return *msg->_impl_.footprint_;
}
const ::DTCC::PointCloud&
Building::_Internal::roofpoints(const Building* msg) {
  return *msg->_impl_.roofpoints_;
}
Building::Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Building)
}
Building::Building(const Building& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Building* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.footprint_){nullptr}
    , decltype(_impl_.roofpoints_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.groundheight_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_footprint()) {
    _this->_impl_.footprint_ = new ::DTCC::Polygon(*from._impl_.footprint_);
  }
  if (from._internal_has_roofpoints()) {
    _this->_impl_.roofpoints_ = new ::DTCC::PointCloud(*from._impl_.roofpoints_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Building)
}

inline void Building::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.footprint_){nullptr}
    , decltype(_impl_.roofpoints_){nullptr}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.groundheight_){0}
    , decltype(_impl_.error_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:DTCC.Building)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Building::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.footprint_;
  if (this != internal_default_instance()) delete _impl_.roofpoints_;
}

void Building::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Building)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.footprint_ != nullptr) {
    delete _impl_.footprint_;
  }
  _impl_.footprint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roofpoints_ != nullptr) {
    delete _impl_.roofpoints_;
  }
  _impl_.roofpoints_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<std::string>();
}

const char* Building::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .DTCC.Polygon footPrint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_footprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double groundHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.groundheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.PointCloud roofpoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_roofpoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Building::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Building)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DTCC.Building.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->_internal_has_footprint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::footprint(this),
        _Internal::footprint(this).GetCachedSize(), target, stream);
  }

  // double height = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // double groundHeight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_groundheight = this->_internal_groundheight();
  uint64_t raw_groundheight;
  memcpy(&raw_groundheight, &tmp_groundheight, sizeof(tmp_groundheight));
  if (raw_groundheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_groundheight(), target);
  }

  // .DTCC.PointCloud roofpoints = 5;
  if (this->_internal_has_roofpoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::roofpoints(this),
        _Internal::roofpoints(this).GetCachedSize(), target, stream);
  }

  // uint64 error = 6;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Building)
  return target;
}

size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Building)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->_internal_has_footprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footprint_);
  }

  // .DTCC.PointCloud roofpoints = 5;
  if (this->_internal_has_roofpoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roofpoints_);
  }

  // double height = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // double groundHeight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_groundheight = this->_internal_groundheight();
  uint64_t raw_groundheight;
  memcpy(&raw_groundheight, &tmp_groundheight, sizeof(tmp_groundheight));
  if (raw_groundheight != 0) {
    total_size += 1 + 8;
  }

  // uint64 error = 6;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Building::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Building*>(
      &from));
}

void Building::MergeFrom(const Building& from) {
  Building* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Building)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_footprint()) {
    _this->_internal_mutable_footprint()->::DTCC::Polygon::MergeFrom(
        from._internal_footprint());
  }
  if (from._internal_has_roofpoints()) {
    _this->_internal_mutable_roofpoints()->::DTCC::PointCloud::MergeFrom(
        from._internal_roofpoints());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_groundheight = from._internal_groundheight();
  uint64_t raw_groundheight;
  memcpy(&raw_groundheight, &tmp_groundheight, sizeof(tmp_groundheight));
  if (raw_groundheight != 0) {
    _this->_internal_set_groundheight(from._internal_groundheight());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  return true;
}

void Building::InternalSwap(Building* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Building, _impl_.error_)
      + sizeof(Building::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(Building, _impl_.footprint_)>(
          reinterpret_cast<char*>(&_impl_.footprint_),
          reinterpret_cast<char*>(&other->_impl_.footprint_));
}

std::string Building::GetTypeName() const {
  return "DTCC.Building";
}


// ===================================================================

class CityModel::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& bounds(const CityModel* msg);
  static const ::DTCC::Georeference& georeference(const CityModel* msg);
  static const ::DTCC::GridField2D& terrain(const CityModel* msg);
};

const ::DTCC::BoundingBox2D&
CityModel::_Internal::bounds(const CityModel* msg) {
  return *msg->_impl_.bounds_;
}
const ::DTCC::Georeference&
CityModel::_Internal::georeference(const CityModel* msg) {
  return *msg->_impl_.georeference_;
}
const ::DTCC::GridField2D&
CityModel::_Internal::terrain(const CityModel* msg) {
  return *msg->_impl_.terrain_;
}
CityModel::CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.CityModel)
}
CityModel::CityModel(const CityModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CityModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buildings_){from._impl_.buildings_}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.georeference_){nullptr}
    , decltype(_impl_.terrain_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    _this->_impl_.bounds_ = new ::DTCC::BoundingBox2D(*from._impl_.bounds_);
  }
  if (from._internal_has_georeference()) {
    _this->_impl_.georeference_ = new ::DTCC::Georeference(*from._impl_.georeference_);
  }
  if (from._internal_has_terrain()) {
    _this->_impl_.terrain_ = new ::DTCC::GridField2D(*from._impl_.terrain_);
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.CityModel)
}

inline void CityModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buildings_){arena}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.georeference_){nullptr}
    , decltype(_impl_.terrain_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CityModel::~CityModel() {
  // @@protoc_insertion_point(destructor:DTCC.CityModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CityModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buildings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bounds_;
  if (this != internal_default_instance()) delete _impl_.georeference_;
  if (this != internal_default_instance()) delete _impl_.terrain_;
}

void CityModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CityModel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.CityModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buildings_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.bounds_ != nullptr) {
    delete _impl_.bounds_;
  }
  _impl_.bounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.georeference_ != nullptr) {
    delete _impl_.georeference_;
  }
  _impl_.georeference_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.terrain_ != nullptr) {
    delete _impl_.terrain_;
  }
  _impl_.terrain_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* CityModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DTCC.Building buildings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DTCC.BoundingBox2D bounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.Georeference georeference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_georeference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DTCC.GridField2D terrain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_terrain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CityModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.CityModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildings_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // .DTCC.Georeference georeference = 3;
  if (this->_internal_has_georeference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::georeference(this),
        _Internal::georeference(this).GetCachedSize(), target, stream);
  }

  // .DTCC.GridField2D terrain = 4;
  if (this->_internal_has_terrain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::terrain(this),
        _Internal::terrain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.CityModel)
  return target;
}

size_t CityModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.CityModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 1;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->_impl_.buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DTCC.BoundingBox2D bounds = 2;
  if (this->_internal_has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounds_);
  }

  // .DTCC.Georeference georeference = 3;
  if (this->_internal_has_georeference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.georeference_);
  }

  // .DTCC.GridField2D terrain = 4;
  if (this->_internal_has_terrain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.terrain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CityModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CityModel*>(
      &from));
}

void CityModel::MergeFrom(const CityModel& from) {
  CityModel* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.CityModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buildings_.MergeFrom(from._impl_.buildings_);
  if (from._internal_has_bounds()) {
    _this->_internal_mutable_bounds()->::DTCC::BoundingBox2D::MergeFrom(
        from._internal_bounds());
  }
  if (from._internal_has_georeference()) {
    _this->_internal_mutable_georeference()->::DTCC::Georeference::MergeFrom(
        from._internal_georeference());
  }
  if (from._internal_has_terrain()) {
    _this->_internal_mutable_terrain()->::DTCC::GridField2D::MergeFrom(
        from._internal_terrain());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CityModel::CopyFrom(const CityModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.CityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityModel::IsInitialized() const {
  return true;
}

void CityModel::InternalSwap(CityModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buildings_.InternalSwap(&other->_impl_.buildings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CityModel, _impl_.terrain_)
      + sizeof(CityModel::_impl_.terrain_)
      - PROTOBUF_FIELD_OFFSET(CityModel, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

std::string CityModel::GetTypeName() const {
  return "DTCC.CityModel";
}


// ===================================================================

class Georeference::_Internal {
 public:
};

Georeference::Georeference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DTCC.Georeference)
}
Georeference::Georeference(const Georeference& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Georeference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crs_){}
    , decltype(_impl_.x0_){}
    , decltype(_impl_.y0_){}
    , decltype(_impl_.epsg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.crs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crs().empty()) {
    _this->_impl_.crs_.Set(from._internal_crs(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x0_, &from._impl_.x0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.epsg_) -
    reinterpret_cast<char*>(&_impl_.x0_)) + sizeof(_impl_.epsg_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Georeference)
}

inline void Georeference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crs_){}
    , decltype(_impl_.x0_){0}
    , decltype(_impl_.y0_){0}
    , decltype(_impl_.epsg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.crs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Georeference::~Georeference() {
  // @@protoc_insertion_point(destructor:DTCC.Georeference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Georeference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crs_.Destroy();
}

void Georeference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Georeference::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Georeference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crs_.ClearToEmpty();
  ::memset(&_impl_.x0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.epsg_) -
      reinterpret_cast<char*>(&_impl_.x0_)) + sizeof(_impl_.epsg_));
  _internal_metadata_.Clear<std::string>();
}

const char* Georeference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string crs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_crs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 epsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Georeference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Georeference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string crs = 1;
  if (!this->_internal_crs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crs().data(), static_cast<int>(this->_internal_crs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DTCC.Georeference.crs");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crs(), target);
  }

  // int32 epsg = 2;
  if (this->_internal_epsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_epsg(), target);
  }

  // double x0 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x0 = this->_internal_x0();
  uint64_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x0(), target);
  }

  // double y0 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y0 = this->_internal_y0();
  uint64_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_y0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Georeference)
  return target;
}

size_t Georeference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Georeference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crs = 1;
  if (!this->_internal_crs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crs());
  }

  // double x0 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x0 = this->_internal_x0();
  uint64_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    total_size += 1 + 8;
  }

  // double y0 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y0 = this->_internal_y0();
  uint64_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    total_size += 1 + 8;
  }

  // int32 epsg = 2;
  if (this->_internal_epsg() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_epsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Georeference::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Georeference*>(
      &from));
}

void Georeference::MergeFrom(const Georeference& from) {
  Georeference* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Georeference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_crs().empty()) {
    _this->_internal_set_crs(from._internal_crs());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x0 = from._internal_x0();
  uint64_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    _this->_internal_set_x0(from._internal_x0());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y0 = from._internal_y0();
  uint64_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    _this->_internal_set_y0(from._internal_y0());
  }
  if (from._internal_epsg() != 0) {
    _this->_internal_set_epsg(from._internal_epsg());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Georeference::CopyFrom(const Georeference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Georeference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Georeference::IsInitialized() const {
  return true;
}

void Georeference::InternalSwap(Georeference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crs_, lhs_arena,
      &other->_impl_.crs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Georeference, _impl_.epsg_)
      + sizeof(Georeference::_impl_.epsg_)
      - PROTOBUF_FIELD_OFFSET(Georeference, _impl_.x0_)>(
          reinterpret_cast<char*>(&_impl_.x0_),
          reinterpret_cast<char*>(&other->_impl_.x0_));
}

std::string Georeference::GetTypeName() const {
  return "DTCC.Georeference";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DTCC::Vector2D*
Arena::CreateMaybeMessage< ::DTCC::Vector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Vector3D*
Arena::CreateMaybeMessage< ::DTCC::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex1D*
Arena::CreateMaybeMessage< ::DTCC::Simplex1D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex1D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex2D*
Arena::CreateMaybeMessage< ::DTCC::Simplex2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex3D*
Arena::CreateMaybeMessage< ::DTCC::Simplex3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox2D*
Arena::CreateMaybeMessage< ::DTCC::BoundingBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox3D*
Arena::CreateMaybeMessage< ::DTCC::BoundingBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPoint*
Arena::CreateMaybeMessage< ::DTCC::MultiPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPoint3D*
Arena::CreateMaybeMessage< ::DTCC::MultiPoint3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPoint3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LineString*
Arena::CreateMaybeMessage< ::DTCC::LineString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LineString >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LineString3D*
Arena::CreateMaybeMessage< ::DTCC::LineString3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LineString3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::LinearRing*
Arena::CreateMaybeMessage< ::DTCC::LinearRing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::LinearRing >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Polygon*
Arena::CreateMaybeMessage< ::DTCC::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MultiPolygon*
Arena::CreateMaybeMessage< ::DTCC::MultiPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MultiPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid2D*
Arena::CreateMaybeMessage< ::DTCC::Grid2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid3D*
Arena::CreateMaybeMessage< ::DTCC::Grid3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Mesh2D*
Arena::CreateMaybeMessage< ::DTCC::Mesh2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Mesh2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Mesh3D*
Arena::CreateMaybeMessage< ::DTCC::Mesh3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Mesh3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Surface2D*
Arena::CreateMaybeMessage< ::DTCC::Surface2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Surface2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Surface3D*
Arena::CreateMaybeMessage< ::DTCC::Surface3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Surface3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField2D*
Arena::CreateMaybeMessage< ::DTCC::GridField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField3D*
Arena::CreateMaybeMessage< ::DTCC::GridField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField2D*
Arena::CreateMaybeMessage< ::DTCC::GridVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField3D*
Arena::CreateMaybeMessage< ::DTCC::GridVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshField2D*
Arena::CreateMaybeMessage< ::DTCC::MeshField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshField3D*
Arena::CreateMaybeMessage< ::DTCC::MeshField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshVectorField2D*
Arena::CreateMaybeMessage< ::DTCC::MeshVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshVectorField3D*
Arena::CreateMaybeMessage< ::DTCC::MeshVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceField2D*
Arena::CreateMaybeMessage< ::DTCC::SurfaceField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceField3D*
Arena::CreateMaybeMessage< ::DTCC::SurfaceField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceVectorField2D*
Arena::CreateMaybeMessage< ::DTCC::SurfaceVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceVectorField3D*
Arena::CreateMaybeMessage< ::DTCC::SurfaceVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::PointCloud*
Arena::CreateMaybeMessage< ::DTCC::PointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Building*
Arena::CreateMaybeMessage< ::DTCC::Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Building >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::CityModel*
Arena::CreateMaybeMessage< ::DTCC::CityModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::CityModel >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Georeference*
Arena::CreateMaybeMessage< ::DTCC::Georeference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Georeference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
